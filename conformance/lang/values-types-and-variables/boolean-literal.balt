Test-Case: output
Description: Test boolean type descriptor.
Labels: boolean-type-descriptor, boolean-literal

public function main() {
    boolean x = true;
    io:println(x); // @output true

    x = false;
    io:println(x); // @output false
}

Test-Case: output
Description: Test boolean literals with function calls.
Labels: function-type-descriptor, boolean-type-descriptor, boolean-literal

public function main() {
    testBoolean(true);

    testBoolean(false);

    io:println(true.toString()); // @output true

    io:println(false.toString()); // @output false
}

function testBoolean(boolean x) {
    io:println(x); // @output true
                   // @output false
}

Test-Case: output
Description: Test boolean literals with return statement.
Labels: function-type-descriptor, boolean-type-descriptor, return-type-descriptor, boolean-literal

public function main() {
    io:println(testBoolean(true)); // @output true

    io:println(testBoolean(false)); // @output false
}

function testBoolean(boolean x) returns boolean {
    return x;
}

Test-Case: output
Description: Test negation of boolean literals.
Labels: boolean-literal, unary-expr

public function main() {
    io:println(!true); // @output false

    io:println(!false); // @output true
}

Test-Case: output
Description: Equality check of boolean literals.
Labels: boolean-literal, equality-expr

public function main() {
    io:println(true == true); // @output true

    io:println(true == false); // @output false

    io:println(true != true); // @output false

    io:println(true != false); // @output true

    io:println(false == false); // @output true

    io:println(false != false); // @output false
}

Test-Case: output
Description: Test assigned boolean literals.
Labels: boolean-type-descriptor, boolean-literal, equality-expr

public function main() {
    boolean x = true;
    io:println(x == true); // @output true

    boolean y = false;
    io:println(y == false); // @output true
}

Test-Case: output
Description: Test boolean literal with if-else block.
Labels: boolean-type-descriptor, boolean-literal, equality-expr, if-else-stmt

public function main() {
    boolean x = false;
    if true {
        x = true;
    } else {

    }
    io:println(x); // @output true

    x = true;
    if false {

    } else {
        x = false;
    }
    io:println(x); // @output false
}

Test-Case: output
Description: Test boolean literals with valid type cast.
Labels: boolean-type-descriptor, boolean-literal, type-cast-expr

public function main() {
    io:println(<boolean> true); // @output true

    io:println(<boolean> false); // @output false
}

Test-Case: error
Description: Test boolean literals with invalid type cast.
Labels: any-type-descriptor, floating-point-type-descriptor, int-type-descriptor, nil-type-descriptor,
        string-type-descriptor, nil-literal, type-cast-expr

public function main() {
    any x = <decimal> true; // @error 'boolean' cannot be cast to 'decimal'

    x = <decimal> false; // @error 'boolean' cannot be cast to 'decimal'

    x = <float> true; // @error 'boolean' cannot be cast to 'float'

    x = <float> false; // @error 'boolean' cannot be cast to 'float'

    x = <int> true; // @error 'boolean' cannot be cast to 'int'

    x = <int> false; // @error 'boolean' cannot be cast to 'int'

    x = <()> true; // @error 'boolean' cannot be cast to '()'

    x = <()> false; // @error 'boolean' cannot be cast to '()'

    x = <string> true; // @error 'boolean' cannot be cast to 'string'

    x = <string> false; // @error 'boolean' cannot be cast to 'string'
}

Test-Case: error
Description: Test invalid boolean literals.
Labels: boolean-type-descriptor, int-literal

public function main() {
    boolean a = True; // @error expected a 'boolean', but found an undefined symbol 'True'

    boolean b = False; // @error expected a 'boolean', but found an undefined symbol 'False'

    boolean c = TRUE; // @error expected a 'boolean', but found an undefined symbol 'TRUE'

    boolean d = FALSE; // @error expected a 'boolean', but found an undefined symbol 'FALSE'

    boolean e = 1; // @error expected a 'boolean', but found a 'int'

    boolean f = 0; // @error expected a 'boolean', but found a 'int'
}
