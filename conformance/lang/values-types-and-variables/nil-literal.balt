Test-Case: output
Description: Test nil type descriptor with nil literal '()'.
Labels: nil-type-descriptor, nil-literal

public function main() {
    () x = ();
    io:println(x.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil type descriptor with nil literal 'null'.
Labels: nil-type-descriptor, nil-literal

public function main() {
    () x = null;
    io:println(x.toBalString()); // @output ()
}

Test-Case: output
Description: Test value and assignability of the nil literal.
Labels: nil-type-descriptor, nil-literal, equality-expr

public function main() {
    () x = ();
    () y = null;
    io:println(x == y); // @output true

    x = y;
    io:println(x.toBalString()); // @output ()

    x = ();
    y = x;
    io:println(y.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil type descriptor with different nil literal representations.
Labels: nil-type-descriptor, nil-literal

public function main() {
    () x = ( );
    io:println(x.toBalString()); // @output ()

    x = (    );
    io:println(x.toBalString()); // @output ()

    x = (
    );
    io:println(x.toBalString()); // @output ()

    x = (());
    io:println(x.toBalString()); // @output ()

    x = (null);
    io:println(x.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literal '()' with function call.
Labels: function-type-descriptor, nil-type-descriptor, nil-literal

public function main() {
    testNil(());
}

function testNil(() x) {
    io:println(x.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literal 'null' with function call.
Labels: function-type-descriptor, nil-type-descriptor, nil-literal

public function main() {
    testNil(null);
}

function testNil(() x) {
    io:println(x.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literal '()' with optional type descriptor.
Labels: boolean-type-descriptor, floating-point-type-descriptor, int-type-descriptor, optional-type-descriptor,
        nil-literal

public function main() {
    boolean? a = ();
    io:println(a.toBalString()); // @output ()

    decimal? b = ();
    io:println(b.toBalString()); // @output ()

    float? c = ();
    io:println(c.toBalString()); // @output ()

    int? d = ();
    io:println(d.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literal 'null' with optional type descriptor.
Labels: boolean-type-descriptor, floating-point-type-descriptor, int-type-descriptor, optional-type-descriptor,
        nil-literal

public function main() {
    boolean? a = null;
    io:println(a.toBalString()); // @output ()

    decimal? b = null;
    io:println(b.toBalString()); // @output ()

    float? c = null;
    io:println(c.toBalString()); // @output ()

    int? d = null;
    io:println(d.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literals with return statement.
Labels: function-type-descriptor, nil-type-descriptor, return-type-descriptor, nil-literal

public function main() {
    io:println(testNil(()).toBalString()); // @output ()

    io:println(testNil(null).toBalString()); // @output ()
}

function testNil(() x) returns () {
    return x;
}

Test-Case: output
Description: Test nil literals with valid type casts.
Labels: nil-type-descriptor, nil-literal, type-cast-expr

public function main() {
    io:println((<()> ()).toBalString()); // @output ()

    io:println((<()> null).toBalString()); // @output ()
}

Test-Case: error
Description: Test nil literals with invalid type casts.
Labels: any-type-descriptor, boolean-type-descriptor, floating-point-type-descriptor, int-type-descriptor,
        string-type-descriptor, nil-literal, type-cast-expr

public function main() {
    any x = <boolean> (); // @error '()' cannot be cast to 'boolean'

    x = <decimal> (); // @error '()' cannot be cast to 'decimal'

    x = <float> (); // @error '()' cannot be cast to 'float'

    x = <int> (); // @error '()' cannot be cast to 'int'

    x = <string> (); // @error '()' cannot be cast to 'string'
}

Test-Case: error
Description: Test invalid nil literals.
Labels: nil-type-descriptor

public function main() {
    () a = Null; // @error expected a '()', but found an undefined symbol 'Null'

    () b = NULL; // @error expected a '()', but found an undefined symbol 'NULL'

    () c = nil; // @error expected a '()', but found an undefined symbol 'nil'

    () d = Nil; // @error expected a '()', but found an undefined symbol 'Nil'
}
