Test-Case: output
Description: Test Signed32 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 145678392;
    int:Signed32 a3 = 2147483647;

    testSigned32Int(a1);
    testSigned32Int(a2);
    testSigned32Int(a3);

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);
}

function testSigned32Int(int:Signed32 i) {
    io:println(i); // @output -2147483648
                   // @output 145678392
                   // @output 2147483647
}

Test-Case: output
Description: Test assignability with type Signed32 values.
Labels: lang.int, string-literal

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 145678392;
    int:Signed32 a3 = 2147483647;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -2147483648
                       // @output 145678392
                       // @output 2147483647
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output -2147483648
                   // @output 145678392
                   // @output 2147483647
}

Test-Case: output
Description: Test int:Signed32 value belonging to a wider type.
Labels: lang.int

public function main() {
    int:Signed32 a1 = 1234521672;

    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Signed32 values.
Labels: lang.int

public function main() {
    int:Signed32 a1 = 127;
    int:Signed32 a2 = 127;

    io:println(a1 == a2); // @output true

    int b1 = a1;
    io:println(a1 == b1); // @output true

    int:Signed32 a3 = -127;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test int:Signed32 value assignability with incompatible types.
Labels: lang.int

public function main() {
    int:Signed32 a1 = 21474836488; // @error int is not a subtype of int:Signed32

    int:Signed32 a2 = 100;
    testSigned8Int(a2); // @error int:Signed32 is not a subtype of int:Signed8

    int:Signed32 a3 = "A"; // @error string is not a subtype of int:Signed32

    string b1 = a2; // @error int:Signed32 is not a subtype of string
}

function testSigned8Int(int:Signed8 i) {
    io:println(i);
}

Test-Case: output
Description: Test Signed16 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 15213;
    int:Signed16 a3 = 32767;

    testSigned16Int(a1);
    testSigned16Int(a2);
    testSigned16Int(a3);
}

function testSigned16Int(int:Signed16 i) {
    io:println(i); // @output -32768
                   // @output 15213
                   // @output 32767
}

Test-Case: output
Description: Test assignability with type Signed16 values.
Labels: lang.int, string-literal

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 15213;
    int:Signed16 a3 = 32767;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Signed32 b1 = a3;
    testIntOrNil(b1);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -32768
                       // @output 15213
                       // @output 32767
                       // @output 32767
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output -32768
                   // @output 15213
                   // @output 32767
}

Test-Case: output
Description: Test int:Signed16 value belonging to a wider type.
Labels: lang.int

public function main() {
    int:Signed16 a1 = 23546;

    io:println(a1 is int:Signed32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Signed16 values.
Labels: lang.int

public function main() {
    int:Signed16 a1 = 32767;
    int:Signed16 a2 = 32767;

    io:println(a1 == a2); // @output true

    int:Signed32 b1 = a1;
    io:println(a1 == b1); // @output true

    int:Signed16 a3 = -32767;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test int:Signed16 value assignability with incompatible types.
Labels: lang.int

public function main() {
    int:Signed16 a1 = 32768; // @error int is not a subtype of int:Signed16

    int:Signed16 a2 = 100;
    testSigned8Int(a2); // @error int:Signed16 is not a subtype of int:Signed8

    int:Signed16 a3 = "A"; // @error string is not a subtype of int:Signed16

    string b1 = a2; // @error int:Signed16 is not a subtype of string
}

Test-Case: error
Description: Test assigning an incompatible int value to int:Signed8.
Fail-Issue: ballerina-lang#32508
Labels: lang.int

public function main() {
    int:Signed8 x6 = -9223372036854775681; // @error int is not a subtype of int:Signed8
    int:Signed8 x7 = 9223372036854775807; // @error int is not a subtype of int:Signed8
}

Test-Case: output
Description: Test Signed8 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = 0;
    int:Signed8 a3 = 127;

    testSigned8Int(a1);
    testSigned8Int(a2);
    testSigned8Int(a3);
}

function testSigned8Int(int:Signed8 i) {
    io:println(i); // @output -128
                   // @output 0
                   // @output 127
}

Test-Case: output
Description: Test assignability with type Signed8 values.
Labels: lang.int, string-literal

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = 0;
    int:Signed8 a3 = 127;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Signed16 b1 = a2;
    testIntOrNil(b1);

    int:Signed32 b2 = a3;
    testIntOrNil(b2);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -128
                       // @output 0
                       // @output 127
                       // @output 0
                       // @output 127
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output -128
                   // @output 0
                   // @output 127
}

Test-Case: output
Description: Test int:Signed8 value belonging to a wider type.
Labels: lang.int

public function main() {
    int:Signed8 a1 = 100;

    io:println(a1 is int:Signed32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Signed8 values.
Labels: lang.int

public function main() {
    int:Signed8 a1 = 125;
    int:Signed8 a2 = 125;

    io:println(a1 == a2); // @output true

    int:Signed16 b1 = a1;
    io:println(a1 == b1); // @output true

    int:Signed8 a3 = -125;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test int:Signed8 value assignability with incompatible types.
Labels: lang.int

public function main() {
    int:Signed8 a1 = 256; // @error int is not a subtype of int:Signed8

    int:Signed8 a2 = 100;
    testUnsigned32Int(a2); // @error int:Signed8 is not a subtype of int:Unsigned32

    int:Unsigned8 a3 = "A"; // @error string is not a subtype of int:Signed8

    string b1 = a2; // @error int:Signed8 is not a subtype of string
}

function testUnsigned32Int(int:Unsigned32 i) {
    io:println(i);
}

Test-Case: error
Description: Test assigning an incompatible int value to int:Signed16.
Fail-Issue: ballerina-lang#32508
Labels: lang.int

public function main() {
    int:Signed16 a = 21474803712; // @error int is not a subtype of int:Signed16
    int:Signed16 b = 9223372036854775807; // @error int is not a subtype of int:Signed16
}

Test-Case: error
Description: Test missing int module-prefix with built-in subtypes of int.
Labels: lang.int

public function main() {
    Signed8 a = 10; // @error unknown type
    Signed16 b = 10; // @error unknown type
    Signed32 c = 10; // @error unknown type
}

Test-Case: output
Description: Test Unsigned32 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 23526165;
    int:Unsigned32 a3 = 4294967295;

    testUnsigned32Int(a1);
    testUnsigned32Int(a2);
    testUnsigned32Int(a3);
}

function testUnsigned32Int(int:Unsigned32 i) {
    io:println(i); // @output 0
                   // @output 23526165
                   // @output 4294967295
}

Test-Case: output
Description: Test assignability with type Unsigned32 values.
Labels: lang.int, string-literal

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 23526165;
    int:Unsigned32 a3 = 4294967295;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 0
                       // @output 23526165
                       // @output 4294967295
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output 0
                   // @output 23526165
                   // @output 4294967295
}

Test-Case: output
Description: Test int:Unsigned32 value belonging to a wider type.
Labels: lang.int, is-expr

public function main() {
    int:Unsigned32 a1 = 130;

    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Unsigned32 values.
Labels: lang.int

public function main() {
    int:Unsigned32 a1 = 127;
    int:Unsigned32 a2 = 127;

    io:println(a1 == a2); // @output true

    int b1 = a1;
    io:println(a1 == b1); // @output true
}

Test-Case: error
Description: Test int:Unsigned32 value assignability with incompatible types.
Labels: lang.int, string-literal, string-type-descriptor

public function main() {
    int:Unsigned32 a1 = -1; // @error int is not a subtype of int:Unsigned32

    int:Unsigned32 a2 = 130;
    testUnsigned8Int(a2); // @error int:Unsigned32 is not a subtype of int:Unsigned8

    int:Unsigned32 a3 = "A"; // @error string is not a subtype of int:Unsigned32

    string b1 = a2; // @error int:Unsigned32 is not a subtype of string
}

function testUnsigned8Int(int:Unsigned8 i) {
    io:println(i);
}

Test-Case: output
Description: Test Unsigned16 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 15431;
    int:Unsigned16 a3 = 65535;

    testUnsigned16Int(a1);
    testUnsigned16Int(a2);
    testUnsigned16Int(a3);
}

function testUnsigned16Int(int:Unsigned16 i) {
    io:println(i); // @output 0
                   // @output 15431
                   // @output 65535
}

Test-Case: output
Description: Test assignability with type Unsigned16 values.
Labels: lang.int, string-literal

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 15431;
    int:Unsigned16 a3 = 65535;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Unsigned32 b1 = a3;

    testIntOrNil(b1);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 0
                       // @output 15431
                       // @output 65535
                       // @output 65535
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output 0
                   // @output 15431
                   // @output 65535
}

Test-Case: output
Description: Test int:Unsigned16 value belonging to a wider type.
Labels: lang.int, is-expr

public function main() {
    int:Unsigned16 a1 = 130;

    io:println(a1 is int:Unsigned32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Unsigned16 values.
Labels: lang.int

public function main() {
    int:Unsigned16 a1 = 127;
    int:Unsigned16 a2 = 127;

    io:println(a1 == a2); // @output true

    int:Unsigned32 b1 = a1;
    io:println(a1 == b1); // @output true
}

Test-Case: error
Description: Test int:Unsigned16 value assignability with incompatible types.
Labels: lang.int, string-literal, string-type-descriptor

public function main() {
    int:Unsigned16 a1 = -1; // @error int is not a subtype of int:Unsigned16

    int:Unsigned16 a2 = 130;
    testUnsigned8Int(a2); // @error int:Unsigned16 is not a subtype of int:Unsigned8

    int:Unsigned16 a3 = "A"; // @error string is not a subtype of int:Unsigned16

    string b1 = a2; // @error int:Unsigned16 is not a subtype of string
}

function testUnsigned8Int(int:Unsigned8 i) {
    io:println(i);
}

Test-Case: error
Description: Test assigning an incompatible int value to int:Unsigned16.
Fail-Issue: ballerina-lang#32508
Labels: lang.int

public function main() {
    int:Unsigned16 a = -21474770945; // @error int is not a subtype of int:Unsigned16
    int:Unsigned16 b = -21474836480; // @error int is not a subtype of int:Unsigned16
}

Test-Case: output
Description: Test Unsigned8 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 130;
    int:Unsigned8 a3 = 255;

    testUnsigned8Int(a1);
    testUnsigned8Int(a2);
    testUnsigned8Int(a3);
}

function testUnsigned8Int(int:Unsigned8 i) {
    io:println(i); // @output 0
                   // @output 130
                   // @output 255
}

Test-Case: output
Description: Test assignability with type Unsigned8 values.
Labels: lang.int, string-literal

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 130;
    int:Unsigned8 a3 = 255;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Unsigned16 b1 = a2;
    int:Unsigned32 b2 = a3;

    testIntOrNil(b1);
    testIntOrNil(b2);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 0
                       // @output 130
                       // @output 255
                       // @output 130
                       // @output 255
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output 0
                   // @output 130
                   // @output 255
}

Test-Case: output
Description: Test int:Unsigned8 value belonging to a wider type.
Labels: lang.int, is-expr

public function main() {
    int:Unsigned8 a1 = 130;

    io:println(a1 is int:Unsigned32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Unsigned8 values.
Labels: lang.int

public function main() {
    int:Unsigned8 a1 = 127;
    int:Unsigned8 a2 = 127;

    io:println(a1 == a2); // @output true

    int:Unsigned16 b1 = a1;
    io:println(a1 == b1); // @output true
}

Test-Case: error
Description: Test int:Unsigned8 value assignability with incompatible types.
Labels: lang.int, string-literal, string-type-descriptor

public function main() {
    int:Unsigned8 a1 = 256; // @error int is not a subtype of int:Unsigned8

    int:Unsigned8 a2 = 130;
    testSigned8Int(a2); // @error int:Unsigned8 is not a subtype of int:Signed8

    int:Unsigned8 a3 = "A"; // @error string is not a subtype of int:Unsigned8

    string b1 = a2; // @error int:Unsigned8 is not a subtype of string
}

function testSigned8Int(int:Signed8 i) {
    io:println(i);
}

Test-Case: error
Description: Test assigning an incompatible int value to int:Unsigned8.
Fail-Issue: ballerina-lang#32508
Labels: lang.int

public function main() {
    int:Unsigned8 a = -9223372036854775553; // @error int is not a subtype of int:Unsigned8
    int:Unsigned8 b = -9223372036854775808; // @error int is not a subtype of int:Unsigned8
}

Test-Case: output
Description: Test maximum value of int type.
Labels: lang.int, string-literal

public function main() {
    int:MAX_VALUE a = 9223372036854775807;

    testIntOrNil(a);
    testIntOrNil(int:MAX_VALUE);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 9223372036854775807
                       // @output 9223372036854775807
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning too large value for int max value.
Fail-Issue: ballerina-lang#32574
Labels: lang.int

public function main() {
    int:MAX_VALUE a = 9223372036854775808; // @error too large value
}

Test-Case: error
Description: Test assigning invalid value for int max value.
Labels: lang.int

public function main() {
    int:MAX_VALUE a = 9223372036854775806; // @error int is not a subtype of int:MAX_VALUE
}

Test-Case: error
Description: Test updating int:MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:MAX_VALUE = 10; // @error cannot update constant

}

Test-Case: error
Description: Test missing int module-prefix with int MAX_VALUE.
Labels: lang.int

public function main() {
    MAX_VALUE a = 9223372036854775807; // @error unknown type
}

Test-Case: output
Description: Test minimum value of int type.
Labels: lang.int, string-literal

public function main() {
    int:MIN_VALUE a = -9223372036854775807 - 1;

    testIntOrNil(a);
    testIntOrNil(int:MIN_VALUE);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -9223372036854775808
                       // @output -9223372036854775808
    } else {
        io:println("nil");
    }
}

Test-Case: panic
Description: Test assigning -9223372036854775808 for MIN_VALUE.
Fail-Issue: ballerina-lang#32577
Labels: lang.int

public function main() {
    int:MIN_VALUE a = -9223372036854775808; // @panic number overflow
}

Test-Case: error
Description: Test assigning too small value for int min value.
Labels: lang.int

public function main() {
    int:MIN_VALUE a = -9223372036854775809; // @error too small value
}

Test-Case: error
Description: Test assigning invalid value for int min value.
Fail-Issue: ballerina-lang#32513
Labels: lang.int

public function main() {
    int:MIN_VALUE a = 10; // @error int is not a subtype of int:MIN_VALUE
}

Test-Case: error
Description: Test updating int:MIN_VALUE constant value.
Labels: lang.int

public function main() {
    int:MIN_VALUE = 10; // @error cannot update constant

}

Test-Case: error
Description: Test missing int module-prefix with int MIN_VALUE.
Labels: lang.int

public function main() {
    MIN_VALUE a = -9223372036854775807 - 1; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Signed32 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED32_MAX_VALUE a = 2147483647;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED32_MAX_VALUE);

    int b = int:SIGNED32_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 2147483647
                       // @output 2147483647
                       // @output 2147483647
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED32_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED32_MAX_VALUE a = 10; // @error int is not a subtype of int:SIGNED32_MAX_VALUE
}

Test-Case: error
Description: Test assigning int:SIGNED32_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed32 a = int:SIGNED32_MAX_VALUE; // @error int is not a subtype of int:Signed32
}

Test-Case: error
Description: Test updating int:SIGNED32_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED32_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED32_MAX_VALUE.
Labels: lang.int

public function main() {
    SIGNED32_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test minimum value of Signed32 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED32_MIN_VALUE a = -2147483648;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED32_MIN_VALUE);

    int b = int:SIGNED32_MIN_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -2147483648
                       // @output -2147483648
                       // @output -2147483648
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED32_MIN_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED32_MIN_VALUE a = 10; // @error int is not a subtype of int:SIGNED32_MIN_VALUE
}

Test-Case: error
Description: Test assigning int:SIGNED32_MIN_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed32 a = int:SIGNED32_MAX_VALUE; // @error int is not a subtype of int:Signed32
}

Test-Case: error
Description: Test updating int:SIGNED32_MIN_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED32_MIN_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED32_MIN_VALUE.
Labels: lang.int

public function main() {
    SIGNED32_MIN_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Signed16 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED16_MAX_VALUE a = 32767;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED16_MAX_VALUE);

    int b = int:SIGNED16_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 32767
                       // @output 32767
                       // @output 32767
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED16_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED16_MAX_VALUE a = 10; // @error int is not a subtype of 32767
}

Test-Case: error
Description: Test assigning int:SIGNED16_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed16 a = int:SIGNED16_MAX_VALUE; // @error int is not a subtype of int:Signed16
    string b = int:SIGNED16_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED16_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED16_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED16_MAX_VALUE.
Labels: lang.int

public function main() {
    SIGNED16_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test minimum value of Signed16 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED16_MIN_VALUE a = -32768;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED16_MIN_VALUE);

    int b = int:SIGNED16_MIN_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -32768
                       // @output -32768
                       // @output -32768
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED16_MIN_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED16_MIN_VALUE a = 10; // @error int is not a subtype of -32768
}

Test-Case: error
Description: Test assigning int:SIGNED16_MIN_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed16 a = int:SIGNED16_MIN_VALUE; // @error int is not a subtype of int:Signed16
    string b = int:SIGNED16_MIN_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED16_MIN_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED16_MIN_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED16_MIN_VALUE.
Labels: lang.int

public function main() {
    SIGNED16_MIN_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Signed8 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED8_MAX_VALUE a = 127;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED8_MAX_VALUE);

    int b = int:SIGNED8_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 127
                       // @output 127
                       // @output 127
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED8_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED8_MAX_VALUE a = 10; // @error int is not a subtype of 127
}

Test-Case: error
Description: Test assigning int:SIGNED8_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed8 a = int:SIGNED8_MAX_VALUE; // @error int is not a subtype of int:Signed8
    string b = int:SIGNED8_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED8_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED8_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED8_MAX_VALUE.
Labels: lang.int

public function main() {
    SIGNED8_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test minimum value of Signed8 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED8_MIN_VALUE a = -128;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED8_MIN_VALUE);

    int b = int:SIGNED8_MIN_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -128
                       // @output -128
                       // @output -128
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED8_MIN_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED8_MIN_VALUE a = 10; // @error int is not a subtype of -128
}

Test-Case: error
Description: Test assigning int:SIGNED8_MIN_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed8 a = int:SIGNED8_MIN_VALUE; // @error int is not a subtype of int:Signed8
    string b = int:SIGNED8_MIN_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED8_MIN_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED8_MIN_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED8_MIN_VALUE.
Labels: lang.int

public function main() {
    SIGNED8_MIN_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Unsigned32 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:UNSIGNED32_MAX_VALUE a = 4294967295;

    testIntOrNil(a);
    testIntOrNil(int:UNSIGNED32_MAX_VALUE);

    int b = int:UNSIGNED32_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 4294967295
                       // @output 4294967295
                       // @output 4294967295
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:UNSIGNED32_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:UNSIGNED32_MAX_VALUE a = 10; // @error int is not a subtype of 4294967295
}

Test-Case: error
Description: Test assigning int:UNSIGNED32_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Unsigned32 a = int:UNSIGNED32_MAX_VALUE; // @error int is not a subtype of int:Unsigned32
    string b = int:UNSIGNED32_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:UNSIGNED32_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:UNSIGNED32_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:UNSIGNED32_MAX_VALUE.
Labels: lang.int

public function main() {
    UNSIGNED32_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Unsigned16 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:UNSIGNED16_MAX_VALUE a = 65535;

    testIntOrNil(a);
    testIntOrNil(int:UNSIGNED16_MAX_VALUE);

    int b = int:UNSIGNED16_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 65535
                       // @output 65535
                       // @output 65535
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:UNSIGNED16_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:UNSIGNED16_MAX_VALUE a = 10; // @error int is not a subtype of 65535
}

Test-Case: error
Description: Test assigning int:UNSIGNED16_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Unsigned16 a = int:UNSIGNED16_MAX_VALUE; // @error int is not a subtype of int:Unsigned16
    string b = int:UNSIGNED16_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:UNSIGNED16_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:UNSIGNED16_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:UNSIGNED16_MAX_VALUE.
Labels: lang.int

public function main() {
    UNSIGNED16_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Unsigned8 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:UNSIGNED8_MAX_VALUE a = 255;

    testIntOrNil(a);
    testIntOrNil(int:UNSIGNED8_MAX_VALUE);

    int b = int:UNSIGNED8_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 255
                       // @output 255
                       // @output 255
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:UNSIGNED8_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED8_MAX_VALUE a = 10; // @error int is not a subtype of 65535
}

Test-Case: error
Description: Test assigning int:UNSIGNED8_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Unsigned8 a = int:SIGNED8_MAX_VALUE; // @error int is not a subtype of int:Unsigned8
    string b = int:SIGNED8_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:UNSIGNED8_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED8_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED8_MAX_VALUE.
Labels: lang.int

public function main() {
    SIGNED8_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test `abs` function with type Signed32.
Labels: lang.int, string-literal

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -1234;
    int:Signed32 a3 = 1234;
    int:Signed32 a4 = 145678392;
    int:Signed32 a5 = 2147483647;

    int b1 = a1.abs();
    testIntOrNil(b1);

    testIntOrNil(a2.abs());

    int b2 = int:abs(a3);
    testIntOrNil(b2);

    int? b3 = a4.abs();
    testIntOrNil(b3);

    testIntOrNil(int:abs(a5));
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 2147483648
                       // @output 1234
                       // @output 1234
                       // @output 145678392
                       // @output 2147483647
    } else {
        io:println("nil");
    }
}

Test-Case: output
Description: Test `abs` function with type Signed16.
Labels: lang.int, string-literal

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = -1234;
    int:Signed16 a3 = 1234;
    int:Signed16 a4 = 15213;
    int:Signed16 a5 = 32767;

    int b1 = a1.abs();
    testIntOrNil(b1);

    testIntOrNil(a2.abs());

    int b2 = int:abs(a3);
    testIntOrNil(b2);

    int? b3 = a4.abs();
    testIntOrNil(b3);

    testIntOrNil(int:abs(a5));
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 32768
                       // @output 1234
                       // @output 1234
                       // @output 15213
                       // @output 32767
    } else {
        io:println("nil");
    }
}

Test-Case: output
Description: Test `abs` function with type Signed8.
Labels: lang.int, string-literal

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -10;
    int:Signed8 a3 = 0;
    int:Signed8 a4 = 10;
    int:Signed8 a5 = 127;

    int b1 = a1.abs();
    testIntOrNil(b1);

    testIntOrNil(a2.abs());

    int b2 = int:abs(a3);
    testIntOrNil(b2);

    int? b3 = a4.abs();
    testIntOrNil(b3);

    testIntOrNil(int:abs(a5));
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 128
                       // @output 10
                       // @output 0
                       // @output 10
                       // @output 127
    } else {
        io:println("nil");
    }
}

Test-Case: output
Description: Test `abs` function with type Unsigned32.
Labels: lang.int

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 150;
    int:Unsigned32 a3 = 23526165;
    int:Unsigned32 a4 = 4294967295;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));
}

function testInt(int i) {
    io:println(i); // @output 0
                   // @output 150
                   // @output 23526165
                   // @output 4294967295
}

Test-Case: output
Description: Test `abs` function with type Unsigned16.
Labels: lang.int

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 150;
    int:Unsigned16 a3 = 15431;
    int:Unsigned16 a4 = 65535;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));
}

function testInt(int i) {
    io:println(i); // @output 0
                   // @output 150
                   // @output 15431
                   // @output 65535
}

Test-Case: output
Description: Test `abs` function with type Unsigned8.
Labels: lang.int

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 25;
    int:Unsigned8 a3 = 143;
    int:Unsigned8 a4 = 255;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));
}

function testInt(int i) {
    io:println(i); // @output 0
                   // @output 25
                   // @output 143
                   // @output 255
}

Test-Case: output
Description: Test `abs` function with type int.
Labels: lang.int

public function main() {
    int a1 = -9223372036854775807;
    int a2 = -736453762;
    int a3 = -120;
    int a4 = 120;
    int a5 = 736453762;
    int a6 = 9223372036854775807;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));

    a5 = a5.abs();
    testInt(a5);

    a6 = int:abs(a6);
    testInt(a6);
}

function testInt(int i) {
    io:println(i); // @output 9223372036854775807
                   // @output 736453762
                   // @output 120
                   // @output 120
                   // @output 736453762
                   // @output 9223372036854775807
}

Test-Case: output
Description: Test `abs` function with int literals.
Labels: lang.int

public function main() {
    int a1 = (-9223372036854775807).abs();
    testInt(a1);

    a1 = (-736453762).abs();
    testInt(a1);

    a1 = int:abs(-120);
    testInt(a1);

    int a2 = (120).abs();
    testInt(a2);

    a2 = (736453762).abs();
    testInt(a2);

    a2 = int:abs(9223372036854775807);
    testInt(a2);
}

function testInt(int i) {
    io:println(i); // @output 9223372036854775807
                   // @output 736453762
                   // @output 120
                   // @output 120
                   // @output 736453762
                   // @output 9223372036854775807
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-lang#32590
Labels: lang.int

public function main() {
    int a1 = -9223372036854775807 - 1;
    int b1 = a1.abs(); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-lang#32590
Labels: lang.int

public function main() {
    int a1 = -9223372036854775807 - 1;
    int b1 = int:abs(a1); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-lang#32590
Labels: lang.int

public function main() {
    int a1 = (-9223372036854775807 - 1).abs(); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Labels: lang.int

public function main() {
    int b1 = (9223372036854775807 + 1).abs(); // @panic int range overflow
}

Test-Case: output
Description: Test chained `abs` function.
Labels: lang.int

public function main() {
    int a1 = -736453762;

    int b1 = a1.abs().abs().abs();
    testInt(b1);

    testInt(int:abs(int:abs(a1).abs()));
}

function testInt(int i) {
    io:println(i); // @output 736453762
                   // @output 736453762
}
