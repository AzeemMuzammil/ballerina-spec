Test-Case: output
Description: Test Signed32 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 145678392;
    int:Signed32 a3 = 2147483647;

    testSigned32Int(a1);
    testSigned32Int(a2);
    testSigned32Int(a3);
}

function testSigned32Int(int:Signed32 i) {
    io:println(i); // @output -2147483648
                   // @output 145678392
                   // @output 2147483647
}

Test-Case: output
Description: Test assignability with type Signed32 values.
Labels: lang.int, string-literal

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 145678392;
    int:Signed32 a3 = 2147483647;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -2147483648
                       // @output 145678392
                       // @output 2147483647
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output -2147483648
                   // @output 145678392
                   // @output 2147483647
}

Test-Case: output
Description: Test int:Signed32 value belonging to a wider type.
Labels: lang.int

public function main() {
    int:Signed32 a1 = 1234521672;

    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Signed32 values.
Labels: lang.int

public function main() {
    int:Signed32 a1 = 127;
    int:Signed32 a2 = 127;

    io:println(a1 == a2); // @output true

    int b1 = a1;
    io:println(a1 == b1); // @output true

    int:Signed32 a3 = -127;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test int:Signed32 value assignability with incompatible types.
Labels: lang.int

public function main() {
    int:Signed32 a1 = 21474836488; // @error int is not a subtype of int:Signed32

    int:Signed32 a2 = 100;
    testSigned8Int(a2); // @error int:Signed32 is not a subtype of int:Signed8

    int:Signed32 a3 = "A"; // @error string is not a subtype of int:Signed32

    string b1 = a2; // @error int:Signed32 is not a subtype of string
}

function testSigned8Int(int:Signed8 i) {
    io:println(i);
}

Test-Case: output
Description: Test Signed16 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 15213;
    int:Signed16 a3 = 32767;

    testSigned16Int(a1);
    testSigned16Int(a2);
    testSigned16Int(a3);
}

function testSigned16Int(int:Signed16 i) {
    io:println(i); // @output -32768
                   // @output 15213
                   // @output 32767
}

Test-Case: output
Description: Test assignability with type Signed16 values.
Labels: lang.int, string-literal

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 15213;
    int:Signed16 a3 = 32767;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Signed32 b1 = a3;
    testIntOrNil(b1);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -32768
                       // @output 15213
                       // @output 32767
                       // @output 32767
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output -32768
                   // @output 15213
                   // @output 32767
}

Test-Case: output
Description: Test int:Signed16 value belonging to a wider type.
Labels: lang.int

public function main() {
    int:Signed16 a1 = 23546;

    io:println(a1 is int:Signed32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Signed16 values.
Labels: lang.int

public function main() {
    int:Signed16 a1 = 32767;
    int:Signed16 a2 = 32767;

    io:println(a1 == a2); // @output true

    int:Signed32 b1 = a1;
    io:println(a1 == b1); // @output true

    int:Signed16 a3 = -32767;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test int:Signed16 value assignability with incompatible types.
Labels: lang.int

public function main() {
    int:Signed16 a1 = 32768; // @error int is not a subtype of int:Signed16

    int:Signed16 a2 = 100;
    testSigned8Int(a2); // @error int:Signed16 is not a subtype of int:Signed8

    int:Signed16 a3 = "A"; // @error string is not a subtype of int:Signed16

    string b1 = a2; // @error int:Signed16 is not a subtype of string
}

Test-Case: error
Description: Test assigning an incompatible int value to int:Signed8.
Fail-Issue: ballerina-lang#32508
Labels: lang.int

public function main() {
    int:Signed8 x6 = -9223372036854775681; // @error int is not a subtype of int:Signed8
    int:Signed8 x7 = 9223372036854775807; // @error int is not a subtype of int:Signed8
}

Test-Case: output
Description: Test Signed8 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = 0;
    int:Signed8 a3 = 127;

    testSigned8Int(a1);
    testSigned8Int(a2);
    testSigned8Int(a3);
}

function testSigned8Int(int:Signed8 i) {
    io:println(i); // @output -128
                   // @output 0
                   // @output 127
}

Test-Case: output
Description: Test assignability with type Signed8 values.
Labels: lang.int, string-literal

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = 0;
    int:Signed8 a3 = 127;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Signed16 b1 = a2;
    testIntOrNil(b1);

    int:Signed32 b2 = a3;
    testIntOrNil(b2);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -128
                       // @output 0
                       // @output 127
                       // @output 0
                       // @output 127
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output -128
                   // @output 0
                   // @output 127
}

Test-Case: output
Description: Test int:Signed8 value belonging to a wider type.
Labels: lang.int

public function main() {
    int:Signed8 a1 = 100;

    io:println(a1 is int:Signed32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Signed8 values.
Labels: lang.int

public function main() {
    int:Signed8 a1 = 125;
    int:Signed8 a2 = 125;

    io:println(a1 == a2); // @output true

    int:Signed16 b1 = a1;
    io:println(a1 == b1); // @output true

    int:Signed8 a3 = -125;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test int:Signed8 value assignability with incompatible types.
Labels: lang.int

public function main() {
    int:Signed8 a1 = 256; // @error int is not a subtype of int:Signed8

    int:Signed8 a2 = 100;
    testUnsigned32Int(a2); // @error int:Signed8 is not a subtype of int:Unsigned32

    int:Unsigned8 a3 = "A"; // @error string is not a subtype of int:Signed8

    string b1 = a2; // @error int:Signed8 is not a subtype of string
}

function testUnsigned32Int(int:Unsigned32 i) {
    io:println(i);
}

Test-Case: error
Description: Test assigning an incompatible int value to int:Signed16.
Fail-Issue: ballerina-lang#32508
Labels: lang.int

public function main() {
    int:Signed16 a = 21474803712; // @error int is not a subtype of int:Signed16
    int:Signed16 b = 9223372036854775807; // @error int is not a subtype of int:Signed16
}

Test-Case: error
Description: Test missing int module-prefix with built-in subtypes of int.
Labels: lang.int

public function main() {
    Signed8 a = 10; // @error unknown type
    Signed16 b = 10; // @error unknown type
    Signed32 c = 10; // @error unknown type
}

Test-Case: output
Description: Test Unsigned32 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 23526165;
    int:Unsigned32 a3 = 4294967295;

    testUnsigned32Int(a1);
    testUnsigned32Int(a2);
    testUnsigned32Int(a3);
}

function testUnsigned32Int(int:Unsigned32 i) {
    io:println(i); // @output 0
                   // @output 23526165
                   // @output 4294967295
}

Test-Case: output
Description: Test assignability with type Unsigned32 values.
Labels: lang.int, string-literal

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 23526165;
    int:Unsigned32 a3 = 4294967295;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 0
                       // @output 23526165
                       // @output 4294967295
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output 0
                   // @output 23526165
                   // @output 4294967295
}

Test-Case: output
Description: Test int:Unsigned32 value belonging to a wider type.
Labels: lang.int, is-expr

public function main() {
    int:Unsigned32 a1 = 130;

    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Unsigned32 values.
Labels: lang.int

public function main() {
    int:Unsigned32 a1 = 127;
    int:Unsigned32 a2 = 127;

    io:println(a1 == a2); // @output true

    int b1 = a1;
    io:println(a1 == b1); // @output true
}

Test-Case: error
Description: Test int:Unsigned32 value assignability with incompatible types.
Labels: lang.int, string-literal, string-type-descriptor

public function main() {
    int:Unsigned32 a1 = -1; // @error int is not a subtype of int:Unsigned32

    int:Unsigned32 a2 = 130;
    testUnsigned8Int(a2); // @error int:Unsigned32 is not a subtype of int:Unsigned8

    int:Unsigned32 a3 = "A"; // @error string is not a subtype of int:Unsigned32

    string b1 = a2; // @error int:Unsigned32 is not a subtype of string
}

function testUnsigned8Int(int:Unsigned8 i) {
    io:println(i);
}

Test-Case: output
Description: Test Unsigned16 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 15431;
    int:Unsigned16 a3 = 65535;

    testUnsigned16Int(a1);
    testUnsigned16Int(a2);
    testUnsigned16Int(a3);
}

function testUnsigned16Int(int:Unsigned16 i) {
    io:println(i); // @output 0
                   // @output 15431
                   // @output 65535
}

Test-Case: output
Description: Test assignability with type Unsigned16 values.
Labels: lang.int, string-literal

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 15431;
    int:Unsigned16 a3 = 65535;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Unsigned32 b1 = a3;

    testIntOrNil(b1);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 0
                       // @output 15431
                       // @output 65535
                       // @output 65535
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output 0
                   // @output 15431
                   // @output 65535
}

Test-Case: output
Description: Test int:Unsigned16 value belonging to a wider type.
Labels: lang.int, is-expr

public function main() {
    int:Unsigned16 a1 = 130;

    io:println(a1 is int:Unsigned32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Unsigned16 values.
Labels: lang.int

public function main() {
    int:Unsigned16 a1 = 127;
    int:Unsigned16 a2 = 127;

    io:println(a1 == a2); // @output true

    int:Unsigned32 b1 = a1;
    io:println(a1 == b1); // @output true
}

Test-Case: error
Description: Test int:Unsigned16 value assignability with incompatible types.
Labels: lang.int, string-literal, string-type-descriptor

public function main() {
    int:Unsigned16 a1 = -1; // @error int is not a subtype of int:Unsigned16

    int:Unsigned16 a2 = 130;
    testUnsigned8Int(a2); // @error int:Unsigned16 is not a subtype of int:Unsigned8

    int:Unsigned16 a3 = "A"; // @error string is not a subtype of int:Unsigned16

    string b1 = a2; // @error int:Unsigned16 is not a subtype of string
}

function testUnsigned8Int(int:Unsigned8 i) {
    io:println(i);
}

Test-Case: error
Description: Test assigning an incompatible int value to int:Unsigned16.
Fail-Issue: ballerina-lang#32508
Labels: lang.int

public function main() {
    int:Unsigned16 a = -21474770945; // @error int is not a subtype of int:Unsigned16
    int:Unsigned16 b = -21474836480; // @error int is not a subtype of int:Unsigned16
}

Test-Case: output
Description: Test Unsigned8 built-in subtype of int.
Labels: lang.int

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 130;
    int:Unsigned8 a3 = 255;

    testUnsigned8Int(a1);
    testUnsigned8Int(a2);
    testUnsigned8Int(a3);
}

function testUnsigned8Int(int:Unsigned8 i) {
    io:println(i); // @output 0
                   // @output 130
                   // @output 255
}

Test-Case: output
Description: Test assignability with type Unsigned8 values.
Labels: lang.int, string-literal

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 130;
    int:Unsigned8 a3 = 255;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Unsigned16 b1 = a2;
    int:Unsigned32 b2 = a3;

    testIntOrNil(b1);
    testIntOrNil(b2);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 0
                       // @output 130
                       // @output 255
                       // @output 130
                       // @output 255
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output 0
                   // @output 130
                   // @output 255
}

Test-Case: output
Description: Test int:Unsigned8 value belonging to a wider type.
Labels: lang.int, is-expr

public function main() {
    int:Unsigned8 a1 = 130;

    io:println(a1 is int:Unsigned32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Unsigned8 values.
Labels: lang.int

public function main() {
    int:Unsigned8 a1 = 127;
    int:Unsigned8 a2 = 127;

    io:println(a1 == a2); // @output true

    int:Unsigned16 b1 = a1;
    io:println(a1 == b1); // @output true
}

Test-Case: error
Description: Test int:Unsigned8 value assignability with incompatible types.
Labels: lang.int, string-literal, string-type-descriptor

public function main() {
    int:Unsigned8 a1 = 256; // @error int is not a subtype of int:Unsigned8

    int:Unsigned8 a2 = 130;
    testSigned8Int(a2); // @error int:Unsigned8 is not a subtype of int:Signed8

    int:Unsigned8 a3 = "A"; // @error string is not a subtype of int:Unsigned8

    string b1 = a2; // @error int:Unsigned8 is not a subtype of string
}

function testSigned8Int(int:Signed8 i) {
    io:println(i);
}

Test-Case: error
Description: Test assigning an incompatible int value to int:Unsigned8.
Fail-Issue: ballerina-lang#32508
Labels: lang.int

public function main() {
    int:Unsigned8 a = -9223372036854775553; // @error int is not a subtype of int:Unsigned8
    int:Unsigned8 b = -9223372036854775808; // @error int is not a subtype of int:Unsigned8
}

Test-Case: output
Description: Test maximum value of int type.
Labels: lang.int, string-literal

public function main() {
    int:MAX_VALUE a = 9223372036854775807;

    testIntOrNil(a);
    testIntOrNil(int:MAX_VALUE);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 9223372036854775807
                       // @output 9223372036854775807
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning too large value for int max value.
Fail-Issue: ballerina-lang#32574
Labels: lang.int

public function main() {
    int:MAX_VALUE a = 9223372036854775808; // @error too large value
}

Test-Case: error
Description: Test assigning invalid value for int max value.
Labels: lang.int

public function main() {
    int:MAX_VALUE a = 9223372036854775806; // @error int is not a subtype of int:MAX_VALUE
}

Test-Case: error
Description: Test updating int:MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:MAX_VALUE = 10; // @error cannot update constant

}

Test-Case: error
Description: Test missing int module-prefix with int MAX_VALUE.
Labels: lang.int

public function main() {
    MAX_VALUE a = 9223372036854775807; // @error unknown type
}

Test-Case: output
Description: Test minimum value of int type.
Labels: lang.int, string-literal

public function main() {
    int:MIN_VALUE a = -9223372036854775807 - 1;

    testIntOrNil(a);
    testIntOrNil(int:MIN_VALUE);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -9223372036854775808
                       // @output -9223372036854775808
    } else {
        io:println("nil");
    }
}

Test-Case: panic
Description: Test assigning -9223372036854775808 for MIN_VALUE.
Fail-Issue: ballerina-lang#32577
Labels: lang.int

public function main() {
    int:MIN_VALUE a = -9223372036854775808; // @panic number overflow
}

Test-Case: error
Description: Test assigning too small value for int min value.
Labels: lang.int

public function main() {
    int:MIN_VALUE a = -9223372036854775809; // @error too small value
}

Test-Case: error
Description: Test assigning invalid value for int min value.
Fail-Issue: ballerina-lang#32513
Labels: lang.int

public function main() {
    int:MIN_VALUE a = 10; // @error int is not a subtype of int:MIN_VALUE
}

Test-Case: error
Description: Test updating int:MIN_VALUE constant value.
Labels: lang.int

public function main() {
    int:MIN_VALUE = 10; // @error cannot update constant

}

Test-Case: error
Description: Test missing int module-prefix with int MIN_VALUE.
Labels: lang.int

public function main() {
    MIN_VALUE a = -9223372036854775807 - 1; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Signed32 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED32_MAX_VALUE a = 2147483647;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED32_MAX_VALUE);

    int b = int:SIGNED32_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 2147483647
                       // @output 2147483647
                       // @output 2147483647
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED32_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED32_MAX_VALUE a = 10; // @error int is not a subtype of int:SIGNED32_MAX_VALUE
}

Test-Case: error
Description: Test assigning int:SIGNED32_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed32 a = int:SIGNED32_MAX_VALUE; // @error int is not a subtype of int:Signed32
}

Test-Case: error
Description: Test updating int:SIGNED32_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED32_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED32_MAX_VALUE.
Labels: lang.int

public function main() {
    SIGNED32_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test minimum value of Signed32 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED32_MIN_VALUE a = -2147483648;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED32_MIN_VALUE);

    int b = int:SIGNED32_MIN_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -2147483648
                       // @output -2147483648
                       // @output -2147483648
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED32_MIN_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED32_MIN_VALUE a = 10; // @error int is not a subtype of int:SIGNED32_MIN_VALUE
}

Test-Case: error
Description: Test assigning int:SIGNED32_MIN_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed32 a = int:SIGNED32_MAX_VALUE; // @error int is not a subtype of int:Signed32
}

Test-Case: error
Description: Test updating int:SIGNED32_MIN_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED32_MIN_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED32_MIN_VALUE.
Labels: lang.int

public function main() {
    SIGNED32_MIN_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Signed16 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED16_MAX_VALUE a = 32767;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED16_MAX_VALUE);

    int b = int:SIGNED16_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 32767
                       // @output 32767
                       // @output 32767
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED16_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED16_MAX_VALUE a = 10; // @error int is not a subtype of 32767
}

Test-Case: error
Description: Test assigning int:SIGNED16_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed16 a = int:SIGNED16_MAX_VALUE; // @error int is not a subtype of int:Signed16
    string b = int:SIGNED16_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED16_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED16_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED16_MAX_VALUE.
Labels: lang.int

public function main() {
    SIGNED16_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test minimum value of Signed16 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED16_MIN_VALUE a = -32768;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED16_MIN_VALUE);

    int b = int:SIGNED16_MIN_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -32768
                       // @output -32768
                       // @output -32768
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED16_MIN_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED16_MIN_VALUE a = 10; // @error int is not a subtype of -32768
}

Test-Case: error
Description: Test assigning int:SIGNED16_MIN_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed16 a = int:SIGNED16_MIN_VALUE; // @error int is not a subtype of int:Signed16
    string b = int:SIGNED16_MIN_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED16_MIN_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED16_MIN_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED16_MIN_VALUE.
Labels: lang.int

public function main() {
    SIGNED16_MIN_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Signed8 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED8_MAX_VALUE a = 127;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED8_MAX_VALUE);

    int b = int:SIGNED8_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 127
                       // @output 127
                       // @output 127
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED8_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED8_MAX_VALUE a = 10; // @error int is not a subtype of 127
}

Test-Case: error
Description: Test assigning int:SIGNED8_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed8 a = int:SIGNED8_MAX_VALUE; // @error int is not a subtype of int:Signed8
    string b = int:SIGNED8_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED8_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED8_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED8_MAX_VALUE.
Labels: lang.int

public function main() {
    SIGNED8_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test minimum value of Signed8 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:SIGNED8_MIN_VALUE a = -128;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED8_MIN_VALUE);

    int b = int:SIGNED8_MIN_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -128
                       // @output -128
                       // @output -128
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED8_MIN_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED8_MIN_VALUE a = 10; // @error int is not a subtype of -128
}

Test-Case: error
Description: Test assigning int:SIGNED8_MIN_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Signed8 a = int:SIGNED8_MIN_VALUE; // @error int is not a subtype of int:Signed8
    string b = int:SIGNED8_MIN_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED8_MIN_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED8_MIN_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED8_MIN_VALUE.
Labels: lang.int

public function main() {
    SIGNED8_MIN_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Unsigned32 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:UNSIGNED32_MAX_VALUE a = 4294967295;

    testIntOrNil(a);
    testIntOrNil(int:UNSIGNED32_MAX_VALUE);

    int b = int:UNSIGNED32_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 4294967295
                       // @output 4294967295
                       // @output 4294967295
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:UNSIGNED32_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:UNSIGNED32_MAX_VALUE a = 10; // @error int is not a subtype of 4294967295
}

Test-Case: error
Description: Test assigning int:UNSIGNED32_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Unsigned32 a = int:UNSIGNED32_MAX_VALUE; // @error int is not a subtype of int:Unsigned32
    string b = int:UNSIGNED32_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:UNSIGNED32_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:UNSIGNED32_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:UNSIGNED32_MAX_VALUE.
Labels: lang.int

public function main() {
    UNSIGNED32_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Unsigned16 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:UNSIGNED16_MAX_VALUE a = 65535;

    testIntOrNil(a);
    testIntOrNil(int:UNSIGNED16_MAX_VALUE);

    int b = int:UNSIGNED16_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 65535
                       // @output 65535
                       // @output 65535
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:UNSIGNED16_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:UNSIGNED16_MAX_VALUE a = 10; // @error int is not a subtype of 65535
}

Test-Case: error
Description: Test assigning int:UNSIGNED16_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Unsigned16 a = int:UNSIGNED16_MAX_VALUE; // @error int is not a subtype of int:Unsigned16
    string b = int:UNSIGNED16_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:UNSIGNED16_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:UNSIGNED16_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:UNSIGNED16_MAX_VALUE.
Labels: lang.int

public function main() {
    UNSIGNED16_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Unsigned8 built-in subtype of int.
Labels: lang.int, string-literal

public function main() {
    int:UNSIGNED8_MAX_VALUE a = 255;

    testIntOrNil(a);
    testIntOrNil(int:UNSIGNED8_MAX_VALUE);

    int b = int:UNSIGNED8_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 255
                       // @output 255
                       // @output 255
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:UNSIGNED8_MAX_VALUE type variable.
Labels: lang.int

public function main() {
    int:SIGNED8_MAX_VALUE a = 10; // @error int is not a subtype of 65535
}

Test-Case: error
Description: Test assigning int:UNSIGNED8_MAX_VALUE with an incompatible type.
Labels: lang.int

public function main() {
    int:Unsigned8 a = int:SIGNED8_MAX_VALUE; // @error int is not a subtype of int:Unsigned8
    string b = int:SIGNED8_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:UNSIGNED8_MAX_VALUE constant value.
Labels: lang.int

public function main() {
    int:SIGNED8_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED8_MAX_VALUE.
Labels: lang.int

public function main() {
    SIGNED8_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test `abs` function with type Signed32.
Labels: lang.int

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -1234;
    int:Signed32 a3 = 1234;
    int:Signed32 a4 = 145678392;
    int:Signed32 a5 = 2147483647;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    int? b3 = a4.abs();
    testInt(b3);

    testInt(int:abs(a5));
}

function testInt(int i) {
    io:println(i); // @output 2147483648
                   // @output 1234
                   // @output 1234
                   // @output 145678392
                   // @output 2147483647
}

Test-Case: output
Description: Test `abs` function with type Signed16.
Labels: lang.int

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = -1234;
    int:Signed16 a3 = 1234;
    int:Signed16 a4 = 15213;
    int:Signed16 a5 = 32767;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    int? b3 = a4.abs();
    testInt(b3);

    testInt(int:abs(a5));
}

function testInt(int i) {
    io:println(i); // @output 32768
                   // @output 1234
                   // @output 1234
                   // @output 15213
                   // @output 32767
}

Test-Case: output
Description: Test `abs` function with type Signed8.
Labels: lang.int

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -10;
    int:Signed8 a3 = 0;
    int:Signed8 a4 = 10;
    int:Signed8 a5 = 127;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    int? b3 = a4.abs();
    testInt(b3);

    testInt(int:abs(a5));
}

function testInt(int i) {
    io:println(i); // @output 128
                   // @output 10
                   // @output 0
                   // @output 10
                   // @output 127
}

Test-Case: output
Description: Test `abs` function with type Unsigned32.
Labels: lang.int

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 150;
    int:Unsigned32 a3 = 23526165;
    int:Unsigned32 a4 = 4294967295;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));
}

function testInt(int i) {
    io:println(i); // @output 0
                   // @output 150
                   // @output 23526165
                   // @output 4294967295
}

Test-Case: output
Description: Test `abs` function with type Unsigned16.
Labels: lang.int

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 150;
    int:Unsigned16 a3 = 15431;
    int:Unsigned16 a4 = 65535;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));
}

function testInt(int i) {
    io:println(i); // @output 0
                   // @output 150
                   // @output 15431
                   // @output 65535
}

Test-Case: output
Description: Test `abs` function with type Unsigned8.
Labels: lang.int

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 25;
    int:Unsigned8 a3 = 143;
    int:Unsigned8 a4 = 255;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));
}

function testInt(int i) {
    io:println(i); // @output 0
                   // @output 25
                   // @output 143
                   // @output 255
}

Test-Case: output
Description: Test `abs` function with type int.
Labels: lang.int

public function main() {
    int a1 = -9223372036854775807;
    int a2 = -736453762;
    int a3 = -120;
    int a4 = 120;
    int a5 = 736453762;
    int a6 = 9223372036854775807;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));

    a5 = a5.abs();
    testInt(a5);

    a6 = int:abs(a6);
    testInt(a6);
}

function testInt(int i) {
    io:println(i); // @output 9223372036854775807
                   // @output 736453762
                   // @output 120
                   // @output 120
                   // @output 736453762
                   // @output 9223372036854775807
}

Test-Case: output
Description: Test `abs` function with int literals.
Labels: lang.int

public function main() {
    int a1 = (-9223372036854775807).abs();
    testInt(a1);

    a1 = (-736453762).abs();
    testInt(a1);

    a1 = int:abs(-120);
    testInt(a1);

    int a2 = (120).abs();
    testInt(a2);

    a2 = (736453762).abs();
    testInt(a2);

    a2 = int:abs(9223372036854775807);
    testInt(a2);
}

function testInt(int i) {
    io:println(i); // @output 9223372036854775807
                   // @output 736453762
                   // @output 120
                   // @output 120
                   // @output 736453762
                   // @output 9223372036854775807
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-lang#32590
Labels: lang.int

public function main() {
    int a1 = -9223372036854775807 - 1;
    int b1 = a1.abs(); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-lang#32590
Labels: lang.int

public function main() {
    int a1 = -9223372036854775807 - 1;
    int b1 = int:abs(a1); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-lang#32590
Labels: lang.int

public function main() {
    int a1 = (-9223372036854775807 - 1).abs(); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Labels: lang.int

public function main() {
    int b1 = (9223372036854775807 + 1).abs(); // @panic int range overflow
}

Test-Case: output
Description: Test chained `abs` function.
Labels: lang.int

public function main() {
    int a1 = -736453762;

    int b1 = a1.abs().abs().abs();
    testInt(b1);

    testInt(int:abs(int:abs(a1).abs()));
}

function testInt(int i) {
    io:println(i); // @output 736453762
                   // @output 736453762
}

Test-Case: output
Description: Test assignability of `abs` function result with compatible types.
Labels: lang.int

public function main() {
    int a1 = -12536;

    int? b1 = a1.abs();
    io:println(b1); // @output 12536

    testAny(a1.abs());
}

function testAny(any i) {
    io:println(i); // @output 12536
}

Test-Case: error
Description: Test assigning the result of `abs` function to an incompatible type.
Labels: lang.int

public function main() {
    int a1 = -10;

    int:Signed8 b1 = a1.abs(); // @error expects a int:Signed8 value, but abs() returns an int

    string b2 = a1.abs(); // @error expects a string value, but abs() returns an int

    b2 = int:abs(-10); // @error expects a string value, but abs() returns an int
}

Test-Case: error
Description: Test passing invalid value to `abs` function.
Labels: lang.int

public function main() {
    float a1 = 10.5;
    int b1 = a1.abs(); // @error expects an int value to be operated on

    b1 = int:abs("ABC"); // @error expects an int value to be operated on
}

Test-Case: error
Description: Test missing required parameter in `abs` function call.
Labels: lang.int

public function main() {
    int a = int:abs(); // @error missing value to be operated on
}

Test-Case: output
Description: Test `sum` function with type Signed32 values.
Labels: lang.int

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -1234;
    int:Signed32 a3 = 1234;
    int:Signed32 a4 = 145678392;
    int:Signed32 a5 = 2147483647;

    int b1 = a1.sum();
    testInt(b1);

    testInt(int:sum());

    b1 = a1.sum(a1, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a5);
    testInt(b1);

    testInt(a5.sum(a2));

    testInt(int:sum(a5, a2));
}

function testInt(int i) {
    io:println(i); // @output -2147483648
                   // @output 0
                   // @output -4294968530
                   // @output 2293162039
                   // @output 2147482413
                   // @output 2147482413
}

Test-Case: output
Description: Test `sum` function with type Signed16 values.
Labels: lang.int

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = -1234;
    int:Signed16 a3 = 1234;
    int:Signed16 a4 = 15213;
    int:Signed16 a5 = 32767;

    int b1 = a1.sum();
    testInt(b1);

    b1 = a1.sum(a1, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a5);
    testInt(b1);

    testInt(a5.sum(a2));

    testInt(int:sum(a5, a2));
}

function testInt(int i) {
    io:println(i); // @output -32768
                   // @output -66770
                   // @output 47980
                   // @output 31533
                   // @output 31533
}

Test-Case: output
Description: Test `sum` function with type Signed8 values.
Labels: lang.int

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -10;
    int:Signed8 a3 = 0;
    int:Signed8 a4 = 10;
    int:Signed8 a5 = 127;

    int b1 = a1.sum();
    testInt(b1);

    b1 = a1.sum(a1, a4);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a5);
    testInt(b1);

    testInt(a5.sum(a2));

    testInt(int:sum(a5, a2));
}

function testInt(int i) {
    io:println(i); // @output -128
                   // @output -246
                   // @output 127
                   // @output 117
                   // @output 117
}

Test-Case: output
Description: Test `sum` function with type Unsigned32 values.
Labels: lang.int

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 150;
    int:Unsigned32 a3 = 23526165;
    int:Unsigned32 a4 = 4294967295;

    int b1 = a2.sum();
    testInt(b1);

    b1 = a1.sum(a1, a2, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a4);
    testInt(b1);

    testInt(a4.sum(a3));

    testInt(int:sum(a3, a4));
}

function testInt(int i) {
    io:println(i); // @output 150
                   // @output 300
                   // @output 8613460905
                   // @output 4318493460
                   // @output 4318493460
}

Test-Case: output
Description: Test `sum` function with type Unsigned16 values.
Labels: lang.int

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 150;
    int:Unsigned16 a3 = 15431;
    int:Unsigned16 a4 = 65535;

    int b1 = a2.sum();
    testInt(b1);

    b1 = a1.sum(a1, a2, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a4);
    testInt(b1);

    testInt(a4.sum(a3));

    testInt(int:sum(a3, a4));
}

function testInt(int i) {
    io:println(i); // @output 150
                   // @output 300
                   // @output 146651
                   // @output 80966
                   // @output 80966
}

Test-Case: output
Description: Test `sum` function with type Unsigned8 values.
Labels: lang.int

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 25;
    int:Unsigned8 a3 = 143;
    int:Unsigned8 a4 = 255;

    int b1 = a2.sum();
    testInt(b1);

    b1 = a1.sum(a1, a2, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a4);
    testInt(b1);

    testInt(a4.sum(a3));

    testInt(int:sum(a3, a4));
}

function testInt(int i) {
    io:println(i); // @output 25
                   // @output 50
                   // @output 678
                   // @output 398
                   // @output 398
}

Test-Case: output
Description: Test `sum` function with type int values.
Labels: lang.int

public function main() {
    int a1 = -9223372036854775807 - 1;
    int a2 = -736453762;
    int a3 = 120;
    int a4 = 736453762;
    int a5 = 9223372036854775807;

    int b1 = a1.sum();
    testInt(b1);

    b1 = a4.sum(a1, a4, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a4);
    testInt(b1);

    testInt(a5.sum(a1));

    testInt(int:sum(a5, a1));
}

function testInt(int i) {
    io:println(i); // @output -9223372036854775808
                   // @output -9223372036118322046
                   // @output 736453882
                   // @output -1
                   // @output -1
}

Test-Case: output
Description: Test `sum` function.
Labels: lang.int

public function main() {
    int:Signed32 a1 = 300;
    int:Signed16 a2 = 200;
    int:Signed8 a3 = 100;
    int:Unsigned32 a4 = 400;
    int:Unsigned16 a5 = 500;
    int:Unsigned8 a6 = 250;
    int a7 = 600;

    int b1 = a1.sum(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    testInt(b1);

    b1 = int:sum(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    testInt(b1);

    testInt(300.sum(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000));

    testInt(int:sum(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000));
}

function testInt(int i) {
    io:println(i); // @output 8350
                   // @output 8350
                   // @output 8350
                   // @output 8350
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-lang#32603
Labels: lang.int

public function main() {
    int a1 = -9223372036854775805;

    int a2 = a1.sum(-1, -2, -3); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-lang#32603
Labels: lang.int

public function main() {
    int a1 = -9223372036854775805;

    int a2 = int:sum(a1, -1, -2, -3); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-lang#32603
Labels: lang.int

public function main() {
    int a1 = 9223372036854775805;

    int a2 = a1.sum(5); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-lang#32603
Labels: lang.int

public function main() {
    int a1 = 9223372036854775805;

    int a2 = int:sum(a1, 5); // @panic int range overflow
}

Test-Case: output
Description: Test assignability of `sum` function result with compatible types.
Labels: lang.int

public function main() {
    int a1 = 10;

    testIntOrNil(a1.sum(20, 30, 40));

    any b1 = a1.sum(20, 30, 40);
    io:println(b1); // @output 100
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 100
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning the result of `sum` function to an incompatible type.
Labels: lang.int

public function main() {
    int a1 = 10;

    int:Signed8 b1 = a1.sum(10, 20); // @error expects a int:Signed8, but sum() returns an int

    float b2 = a1.sum(20, 30, 40); // @error expects a float, but sum() returns an int

    b2 = int:sum(10, 20); // @error expects a float, but sum() returns an int
}

Test-Case: error
Description: Test passing invalid value to `sum` function.
Labels: lang.int

public function main() {
    int a1 = 10;

    int b1 = a1.sum(10, 10.5); // @error expects int values to sum

    b1 = int:sum(10, "ABC"); // @error expects int values to sum
}

Test-Case: output
Description: Test `max` function with type Signed32 values.
Labels: lang.int

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -1234;
    int:Signed32 a3 = 1234;

    int b1 = a1.max();
    testInt(b1);

    b1 = a1.max(a1, a2);
    testInt(b1);

    b1 = int:max(a1, a2, a3);
    testInt(b1);

    testInt(a3.max(a1));

    testInt(int:max(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output -2147483648
                   // @output -1234
                   // @output 1234
                   // @output 1234
                   // @output 1234
}

Test-Case: output
Description: Test `max` function with type Signed16 values.
Labels: lang.int

public function main() {
    int:Signed16 a1 = -24536;
    int:Signed16 a2 = -123;
    int:Signed16 a3 = 1234;

    int b1 = a1.max();
    testInt(b1);

    b1 = a1.max(a1, a2);
    testInt(b1);

    b1 = int:max(a1, a2, a3);
    testInt(b1);

    testInt(a3.max(a1));

    testInt(int:max(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output -24536
                   // @output -123
                   // @output 1234
                   // @output 1234
                   // @output 1234
}

Test-Case: output
Description: Test `max` function with type Signed8 values.
Labels: lang.int

public function main() {
    int:Signed8 a1 = -120;
    int:Signed8 a2 = -10;
    int:Signed8 a3 = 100;

    int b1 = a1.max();
    testInt(b1);

    b1 = a1.max(a1, a2);
    testInt(b1);

    b1 = int:max(a1, a2, a3);
    testInt(b1);

    testInt(a3.max(a1));

    testInt(int:max(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output -120
                   // @output -10
                   // @output 100
                   // @output 100
                   // @output 100
}

Test-Case: output
Description: Test `max` function with type Unsigned32 values.
Labels: lang.int

public function main() {
    int:Unsigned32 a1 = 50;
    int:Unsigned32 a2 = 3425;
    int:Unsigned32 a3 = 243;

    int b1 = a1.max();
    testInt(b1);

    b1 = a1.max(a1, a2);
    testInt(b1);

    b1 = int:max(a1, a2, a3);
    testInt(b1);

    testInt(a3.max(a1));

    testInt(int:max(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output 50
                   // @output 3425
                   // @output 3425
                   // @output 243
                   // @output 243
}

Test-Case: output
Description: Test `max` function with type Unsigned16 values.
Labels: lang.int

public function main() {
    int:Unsigned16 a1 = 50;
    int:Unsigned16 a2 = 3425;
    int:Unsigned16 a3 = 243;

    int b1 = a1.max();
    testInt(b1);

    b1 = a1.max(a1, a2);
    testInt(b1);

    b1 = int:max(a1, a2, a3);
    testInt(b1);

    testInt(a3.max(a1));

    testInt(int:max(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output 50
                   // @output 3425
                   // @output 3425
                   // @output 243
                   // @output 243
}

Test-Case: output
Description: Test `max` function with type Unsigned8 values.
Labels: lang.int

public function main() {
    int:Unsigned8 a1 = 50;
    int:Unsigned8 a2 = 5;
    int:Unsigned8 a3 = 243;

    int b1 = a1.max();
    testInt(b1);

    b1 = a1.max(a1, a2);
    testInt(b1);

    b1 = int:max(a1, a2, a3);
    testInt(b1);

    testInt(a3.max(a1));

    testInt(int:max(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output 50
                   // @output 50
                   // @output 243
                   // @output 243
                   // @output 243
}

Test-Case: output
Description: Test `max` function with type int values.
Labels: lang.int

public function main() {
    int a1 = 243526171;
    int a2 = 9223372036854775807;
    int a3 = 84633;

    int b1 = a1.max();
    testInt(b1);

    b1 = a1.max(a1, a2);
    testInt(b1);

    b1 = int:max(a1, a2, a3);
    testInt(b1);

    testInt(a3.max(a1));

    testInt(int:max(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output 243526171
                   // @output 9223372036854775807
                   // @output 9223372036854775807
                   // @output 243526171
                   // @output 243526171
}

Test-Case: output
Description: Test `max` function with type int values.
Labels: lang.int

public function main() {
    int:Signed32 a1 = 300;
    int:Signed16 a2 = 200;
    int:Signed8 a3 = 100;
    int:Unsigned32 a4 = 400;
    int:Unsigned16 a5 = 500;
    int:Unsigned8 a6 = 250;
    int a7 = 600;

    int b1 = a1.max(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    testInt(b1);

    b1 = int:max(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    testInt(b1);

    testInt(300.max(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000));

    testInt(int:max(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000));
}

function testInt(int i) {
    io:println(i); // @output 3000
                   // @output 3000
                   // @output 3000
                   // @output 3000
}

Test-Case: output
Description: Test assignability of `max` function result with compatible types.
Labels: lang.int

public function main() {
    int a1 = -12536;

    int? b1 = a1.max(200, 200);
    io:println(b1); // @output 200

    testAny(a1.max(23, 50, 5));
}

function testAny(any i) {
    io:println(i); // @output 50
}

Test-Case: error
Description: Test assigning the result of `max` function to an incompatible type.
Labels: lang.int

import ballerina/io;public function main() {
    int a1 = -10;

    int:Signed8 b1 = a1.max(10); // @error expects a int:Signed8 value, but max() returns an int

    string b2 = a1.max(); // @error expects a string value, but max() returns an int

    b2 = int:max(-10); // @error expects a string value, but max() returns an int
}

Test-Case: error
Description: Test passing invalid value to `max` function.
Labels: lang.int

public function main() {
    int a1 = 10;
    int b1 = a1.max(10.5); // @error expects other values to be int

    b1 = int:max("ABC"); // @error expects first value to be int
}

Test-Case: error
Description: Test missing required parameter in `max` function call.
Labels: lang.int

public function main() {
    int a = int:max(); // @error missing first int value
}

Test-Case: output
Description: Test `min` function with type Signed32 values.
Labels: lang.int

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 456;
    int:Signed32 a3 = 1234;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a2));

    testInt(int:min(a2, a3));
}

function testInt(int i) {
    io:println(i); // @output -2147483648
                   // @output -2147483648
                   // @output -2147483648
                   // @output 456
                   // @output 456
}

Test-Case: output
Description: Test `min` function with type Signed16 values.
Labels: lang.int

public function main() {
    int:Signed16 a1 = -24536;
    int:Signed16 a2 = 453;
    int:Signed16 a3 = 1234;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a2));

    testInt(int:min(a2, a3));
}

function testInt(int i) {
    io:println(i); // @output -24536
                   // @output -24536
                   // @output -24536
                   // @output 453
                   // @output 453
}

Test-Case: output
Description: Test `min` function with type Signed8 values.
Labels: lang.int

public function main() {
    int:Signed8 a1 = -120;
    int:Signed8 a2 = 10;
    int:Signed8 a3 = 100;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a2));

    testInt(int:min(a2, a3));
}

function testInt(int i) {
    io:println(i); // @output -120
                   // @output -120
                   // @output -120
                   // @output 10
                   // @output 10
}

Test-Case: output
Description: Test `min` function with type Unsigned32 values.
Labels: lang.int

public function main() {
    int:Unsigned32 a1 = 50;
    int:Unsigned32 a2 = 3425;
    int:Unsigned32 a3 = 243;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a2));

    testInt(int:min(a2, a3));
}

function testInt(int i) {
    io:println(i); // @output 50
                   // @output 50
                   // @output 50
                   // @output 243
                   // @output 243
}

Test-Case: output
Description: Test `min` function with type Unsigned16 values.
Labels: lang.int

public function main() {
    int:Unsigned16 a1 = 50;
    int:Unsigned16 a2 = 3425;
    int:Unsigned16 a3 = 243;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a2));

    testInt(int:min(a2, a3));
}

function testInt(int i) {
    io:println(i); // @output 50
                   // @output 50
                   // @output 50
                   // @output 243
                   // @output 243
}

Test-Case: output
Description: Test `min` function with type Unsigned8 values.
Labels: lang.int

public function main() {
    int:Unsigned8 a1 = 50;
    int:Unsigned8 a2 = 5;
    int:Unsigned8 a3 = 243;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a1));

    testInt(int:min(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output 50
                   // @output 5
                   // @output 5
                   // @output 50
                   // @output 50
}

Test-Case: output
Description: Test `min` function with type int values.
Labels: lang.int

public function main() {
    int a1 = 243526171;
    int a2 = 9223372036854775807;
    int a3 = 84633;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a1));

    testInt(int:min(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output 243526171
                   // @output 243526171
                   // @output 84633
                   // @output 84633
                   // @output 84633
}

Test-Case: output
Description: Test `min` function with int values.
Labels: lang.int

public function main() {
    int:Signed32 a1 = 300;
    int:Signed16 a2 = 200;
    int:Signed8 a3 = 100;
    int:Unsigned32 a4 = 400;
    int:Unsigned16 a5 = 500;
    int:Unsigned8 a6 = 250;
    int a7 = 600;

    int b1 = a1.min(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    testInt(b1);

    b1 = int:min(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    testInt(b1);

    testInt(300.min(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000));

    testInt(int:min(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000));
}

function testInt(int i) {
    io:println(i); // @output 100
                   // @output 100
                   // @output 100
                   // @output 100
}

Test-Case: output
Description: Test assignability of `min` function result with compatible types.
Labels: lang.int

public function main() {
    int a1 = -12536;

    int? b1 = a1.min(786, 200);
    io:println(b1); // @output -12536

    testAny(a1.min(23, 50, 5));
}

function testAny(any i) {
    io:println(i); // @output -12536
}

Test-Case: error
Description: Test assigning the result of `min` function to an incompatible type.
Labels: lang.int

public function main() {
    int a1 = -10;

    int:Signed8 b1 = a1.min(10); // @error expects a int:Signed8 value, but min() returns an int

    string b2 = a1.min(); // @error expects a string value, but min() returns an int

    b2 = int:min(-10); // @error expects a string value, but min() returns an int
}

Test-Case: error
Description: Test passing invalid value to `min` function.
Labels: lang.int

public function main() {
    int a1 = 10;
    int b1 = a1.min(10.5); // @error expects other values to be int

    b1 = int:min("ABC"); // @error expects first value to be int
}

Test-Case: error
Description: Test `min` function on invalid type.
Labels: lang.int

public function main() {
    string a1 = "ABC";
    int b1 = a1.min(10); // @error min() is not defined for string
}

Test-Case: error
Description: Test missing required parameter in `min` function call.
Labels: lang.int

public function main() {
    int a = int:min(); // @error missing first int value
}

Test-Case: output
Description: Test `fromString` function.
Labels: lang.int, lang.string

public function main() {
    string a1 = "-9223372036854775808";
    string a2 = "-3546372";
    string a3 = "3546372";
    string a4 = "+3546372";
    string a5 = "9223372036854775807";

    int|error b1 = int:fromString(a1);
    testResult(b1);

    testResult(int:fromString(a2));

    b1 = int:fromString(a3);
    testResult(b1);

    testResult(int:fromString(a4));

    b1 = int:fromString(a5);
    testResult(b1);
}

function testResult(int|error i) {
    if i is int {
        io:println(i); // @output -9223372036854775808
                       // @output -3546372
                       // @output 3546372
                       // @output 3546372
                       // @output 9223372036854775807
    } else {
        io:println(i);
    }
}

Test-Case: output
Description: Test `fromString` function with string literals.
Labels: lang.int, string

public function main() {
    int|error b1 = int:fromString("-9223372036854775808");
    testResult(b1);

    testResult(int:fromString("-3546372"));

    b1 = int:fromString("3546372");
    testResult(b1);

    testResult(int:fromString("+3546372"));

    b1 = int:fromString("9223372036854775807");
    testResult(b1);
}

function testResult(int|error i) {
    if i is int {
        io:println(i); // @output -9223372036854775808
                       // @output -3546372
                       // @output 3546372
                       // @output 3546372
                       // @output 9223372036854775807
    } else {
        io:println(i);
    }
}

Test-Case: output
Description: Test `fromString` function with string template expression.
Labels: lang.int, string-template-expr

public function main() {
    string a1 = string `-9223372036854775808`;
    string a2 = string `-3546372`;
    string a3 = string `3546372`;
    string a4 = string `+3546372`;
    string a5 = string `9223372036854775807`;

    int|error b1 = int:fromString(string `-9223372036854775808`);
    testResult(b1);

    testResult(int:fromString(string `-3546372`));

    b1 = int:fromString(string `3546372`);
    testResult(b1);

    testResult(int:fromString(string `+3546372`));

    b1 = int:fromString(string `9223372036854775807`);
    testResult(b1);
}

function testResult(int|error i) {
    if i is int {
        io:println(i); // @output -9223372036854775808
                       // @output -3546372
                       // @output 3546372
                       // @output 3546372
                       // @output 9223372036854775807
    } else {
        io:println(i);
    }
}

Test-Case: output
Description: Test `fromString` function with string template with interpolation.
Labels: lang.int, string-template-expr

public function main() {
    string a1 = string `3546372`;
    string a2 = "3546372";
    int a3 = 3546372;

    int|error b1 = int:fromString(string `-3546372${a1}`);
    testResult(b1);

    testResult(int:fromString(string `-3546372${a2}`));

    b1 = int:fromString(string `-3546372${a3}`);
    testResult(b1);

    b1 = int:fromString(string `${a1}${a2}`);
    testResult(b1);

    testResult(int:fromString(string `${a1}${a3}`));

    testResult(int:fromString(string `123${a2}${a3}`));
}

function testResult(int|error i) {
    if i is int {
        io:println(i); // @output -35463723546372
                       // @output -35463723546372
                       // @output -35463723546372
                       // @output 35463723546372
                       // @output 35463723546372
                       // @output 12335463723546372
    } else {
        io:println(i);
    }
}

Test-Case: output
Description: Test `fromString` function with string subtypes.
Labels: lang.int, module-const-decl, module-type-defn, string

const A = "2536";
const B = "35463";

type StringType1 "10"|"20"|"30";

type StringType2 string:Char;

type StringType3 A|B;

public function main() {
    string:Char a1 = "9";
    string|string:Char a2 = "1234535";
    StringType1 a3 = "10";
    StringType2 a4 = "8";
    StringType3 a5 = "35463";

    int|error b1 = int:fromString(a1);
    testResult(b1);

    testResult(int:fromString(a2));

    b1 = int:fromString(a3);
    testResult(b1);

    testResult(int:fromString(A));

    testResult(int:fromString(a4));

    testResult(int:fromString(a5));
}

function testResult(int|error i) {
    if i is int {
        io:println(i); // @output 0
                       // @output 1234535
                       // @output 10
                       // @output 2536
                       // @output 8
                       // @output 35463
    } else {
        io:println(i);
    }
}

Test-Case: output
Description: Test `fromString` function with string values from various expressions.
Labels: lang.int, string

public function main() {
    int a1 = 3546372;
    int a2 = 5;
    string a3 = "10";

    int|error b1 = int:fromString(a1.toString());
    testResult(b1);

    testResult(int:fromString(3546372.toString()));

    b1 = int:fromString(getString() + a1.toString() + string `${a2}` + "2" + a3);
    testResult(b1);
}

function getString() returns string {
    return "12536";
}

function testResult(int|error i) {
    if i is int {
        io:println(i); // @output 3546372
                       // @output 3546372
                       // @output 1253635463725210
    } else {
        io:println(i);
    }
}

Test-Case: output
Description: Test assignability of `fromString` function result.
Labels: lang.int, string

type Type int|error;

public function main() {
    string a1 = "12343";

    testResult(int:fromString(a1));

    Type b1 = int:fromString(a1);
    testResult(b1);

    var b2 = int:fromString(a1);
    testResult(b2);
}

function testResult(any|error i) {
    if i is any {
        io:println(i); // @output 12343
                       // @output 12343
                       // @output 12343
    } else {
        io:println(i);
    }
}

Test-Case: output
Description: Test `fromString` function with invalid strings.
Labels: lang.int, string

public function main() {
    string a1 = "10ABC";
    float a2 = 10;

    int|error b1 = int:fromString(a1);
    testResult(b1);

    b1 = int:fromString("20ABC");
    testResult(b1);

    testResult(int:fromString(string `30ABC`));

    testResult(int:fromString(getString()));

    b1 = int:fromString(string `${a2}`);
    testResult(b1);

    int|error b2 = int:fromString("9223372036854775808");
    testResult(b2);

    b2 = int:fromString("-9223372036854775809");
    testResult(b2);
}

function getString() returns string {
    return "12536.26";
}

function testResult(int|error i) {
    if i is int {
        io:println(i);
    } else {
        io:println(i); // @output error("{ballerina/lang.int}NumberParsingError",message="'string' value '10ABC' cannot be converted to 'int'")
                       // @output error("{ballerina/lang.int}NumberParsingError",message="'string' value '20ABC' cannot be converted to 'int'")
                       // @output error("{ballerina/lang.int}NumberParsingError",message="'string' value '30ABC' cannot be converted to 'int'")
                       // @output error("{ballerina/lang.int}NumberParsingError",message="'string' value '12536.26' cannot be converted to 'int'")
                       // @output error("{ballerina/lang.int}NumberParsingError",message="'string' value '10.0' cannot be converted to 'int'")
                       // @output error("{ballerina/lang.int}NumberParsingError",message="'string' value '9223372036854775808' cannot be converted to 'int'")
                       // @output error("{ballerina/lang.int}NumberParsingError",message="'string' value '-9223372036854775809' cannot be converted to 'int'")
    }
}

Test-Case: error
Description: Test passing invalid value to `fromString` function.
Labels: lang.int, string

public function main() {
    float a1 = 10.5;
    string|int a2 = "ABC";

    int|error b1 = int:fromString(a1); // @error float is not a subtype of string

    b1 = int:fromString(a2); // @error (string|int) is not a subtype of string

    b1 = int:fromString(12d); // @error decimal is not a subtype of string
}

Test-Case: error
Description: Test assigning the result of `fromString` function to an incompatible type.
Labels: lang.int, string

public function main() {
    int b1 = int:fromString("100"); // @error expects an int, but fromString() returns (int|error)

    int:Signed32|error b2 = int:fromString("100"); // @error expects a (int:Signed32|error), but fromString() returns (int|error)
}

Test-Case: error
Description: Test incorrect `fromString` function call.
Labels: lang.int

public function main() {
    string a1 = "1234";
    any a2 = "1234";

    int|error b1 = a1.fromString(); // @error fromString() is not defined for string

    int|error b2 = a2.fromString(); // @error fromString() is not defined for any
}

Test-Case: error
Description: Test missing required parameter in `fromString` function call.
Labels: lang.int

public function main() {
    int|error b1 = int:fromString(); // @error missing string argument
}

Test-Case: error
Description: Test passing too many arguments to `fromString`.
Labels: lang.int

public function main() {
    string a1 = "1234";
    int|error b1 = int:fromString(a1, a2); // @error too many arguments
}

Test-Case: output
Description: Test `toHexString` function with type Signed32 values.
Labels: lang.int

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 10;
    int:Signed32 a3 = 3245;
    int:Signed32 a4 = 2147483647;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output ffffffff80000000
                   // @output a
                   // @output cad
                   // @output 7fffffff
                   // @output 7fffffff
}

Test-Case: output
Description: Test `toHexString` function with type Signed16 values.
Labels: lang.int

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 10;
    int:Signed16 a3 = 1234;
    int:Signed16 a4 = 32767;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output ffffffffffff8000
                   // @output a
                   // @output 4d2
                   // @output 7fff
                   // @output 7fff
}

Test-Case: output
Description: Test `toHexString` function with type Signed8 values.
Labels: lang.int

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -20;
    int:Signed8 a3 = 45;
    int:Signed8 a4 = 127;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output ffffffffffffff80
                   // @output ffffffffffffffec
                   // @output 2d
                   // @output 7f
                   // @output 7f
}

Test-Case: output
Description: Test `toHexString` function with type Unsigned32 values.
Labels: lang.int

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 125;
    int:Unsigned32 a3 = 36272;
    int:Unsigned32 a4 = 4294967295;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output 0
                   // @output 7d
                   // @output 8db0
                   // @output ffffffff
                   // @output ffffffff
}

Test-Case: output
Description: Test `toHexString` function with type Unsigned16 values.
Labels: lang.int

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 125;
    int:Unsigned16 a3 = 2321;
    int:Unsigned16 a4 = 65535;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output 0
                   // @output 7d
                   // @output 911
                   // @output ffff
                   // @output ffff
}

Test-Case: output
Description: Test `toHexString` function with type Unsigned8 values.
Labels: lang.int

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 10;
    int:Unsigned8 a3 = 120;
    int:Unsigned8 a4 = 255;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output 0
                   // @output a
                   // @output 78
                   // @output ff
                   // @output ff
}

Test-Case: output
Description: Test `toHexString` function with type int values.
Labels: lang.int

public function main() {
    int a1 = -9223372036854775807 - 1;
    int a2 = 125;
    int a3 = 84633;
    int a4 = 9223372036854775807;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output 8000000000000000
                   // @output 7d
                   // @output 14a99
                   // @output 7fffffffffffffff
                   // @output 7fffffffffffffff
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Labels: lang.int, module-const-decl, module-type-defn, string

const A = 10;
const B = 20;

type IntType1 10|20|30;

type IntType3 A|B;

public function main() {
    A a1 = 10;
    IntType1 a2 = 30;
    IntType3 a3 = 20;

    testString(int:toHexString(a1));

    string b1 = int:toHexString(a2);
    testString(b1);

    testString(B.toHexString());

    testString(int:toHexString(a3));
}

function testString(string i) {
    io:println(i); // @output a
                   // @output 1e
                   // @output 14
                   // @output 14
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: lang.int, module-type-defn, string

type IntType int:Signed8|int:Unsigned32;

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    IntType a2 = 4563;

    string b1 = a1.toHexString();
    b1 = a2.toHexString();
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: lang.int, module-type-defn, string

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    string b1 = int:toHexString(a1);
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: lang.int, module-type-defn, string

type IntType int:Signed8|int:Unsigned32;

public function main() {
    IntType a1 = 4563;
    string b1 = int:toHexString(a1);
}

Test-Case: output
Description: Test assignability of `toHexString` function result with compatible types.
Labels: lang.int

public function main() {
    int a1 = 2345;

    string? b1 = a1.toHexString();
    io:println(b1); // @output 929

    testAny(int:toHexString(a1));
}

function testAny(any i) {
    io:println(i); // @output 929
}

Test-Case: error
Description: Test assigning the result of `toHexString` function to an incompatible type.
Labels: lang.int

public function main() {
    int a1 = 10;

    string:Char b1 = a1.toHexString(); // @error expects a string:Char, but toHexString() returns a string

    int b2 = int:toHexString(a1); // @error expects a int, but toHexString() returns a string

    b2 = a1.toHexString(); // @error expects a int, but toHexString() returns a string
}

Test-Case: error
Description: Test passing invalid value to `toHexString` function.
Labels: lang.int

public function main() {
    int|string a1 = 10;
    string b2 = int:toHexString(a1); // @error expects an int argument
}

Test-Case: error
Description: Test `toHexString` function on invalid type.
Labels: lang.int

public function main() {
    int|string a1 = 10;
    string b2 = a1.toHexString(); // @error toHexString() is not defined for (int|string)
}

Test-Case: error
Description: Test missing required parameter in `toHexString` function call.
Labels: lang.int

public function main() {
    string b2 = int:toHexString(); // @error missing int argument
}

Test-Case: error
Description: Test passing too many arguments to `toHexString`.
Labels: lang.int

public function main() {
    int a1 = 1234;

    string b1 = a1.toHexString(a1); // @error too many arguments
    b1 = int:toHexString(a1, a1); // @error too many arguments
}

Test-Case: output
Description: Test `fromHexString` function.
Labels: lang.int

public function main() {
    string a1 = "7fffffff";
    string a2 = "cad";
    string a3 = "7fff";
    string a4 = "ffffffff";
    string a5 = "911";
    string a6 = "14a99";
    string a7 = "7fffffffffffffff";

    int|error b1 = int:fromHexString(a1);
    testResult(b1);

    testResult(int:fromHexString(a2));

    b1 = int:fromHexString(a3);
    testResult(b1);

    testResult(int:fromHexString(a4));

    testResult(int:fromHexString(a5));

    testResult(int:fromHexString(a6));

    testResult(int:fromHexString(a7));
}

function testResult(int|error i) {
    if i is int {
        io:println(i); // @output 2147483647
                       // @output 3245
                       // @output 32767
                       // @output 4294967295
                       // @output 2321
                       // @output 84633
                       // @output 9223372036854775807
    } else {
        io:println(i);
    }
}

Test-Case: output
Description: Test `fromHexString` function.
Fail-Issue: ballerina-lang#32627
Labels: lang.int, string

public function main() {
    string a1 = "ffffffff80000000";
    string a2 = "ffffffffffff8000";
    string a3 = "ffffffffffffffec";
    string a4 = "8000000000000000";

    int|error b1 = int:fromHexString(a1);
    testResult(b1);

    testResult(int:fromHexString(a2));

    b1 = int:fromHexString(a3);
    testResult(b1);

    testResult(int:fromHexString(a4));
}

function testResult(int|error i) {
    if i is int {
        io:println(i); // @output -2147483648
                       // @output -32768
                       // @output -20
                       // @output -9223372036854775808
    } else {
        io:println(i);
    }
}

Test-Case: output
Description: Test `fromHexString` function with string literals.
Labels: lang.int, string

public function main() {
    int|error b1 = int:fromHexString("7fffffff");
    testResult(b1);

    testResult(int:fromHexString("7fff"));

    b1 = int:fromHexString("911");
    testResult(b1);

    testResult(int:fromHexString("7fffffffffffffff"));
}

function testResult(int|error i) {
    if i is int {
        io:println(i); // @output 2147483647
                       // @output 32767
                       // @output 2321
                       // @output 9223372036854775807
    } else {
        io:println(i);
    }
}

Test-Case: output
Description: Test `fromHexString` function with string literals.
Fail-Issue: ballerina-lang#32627
Labels: lang.int, string

public function main() {
    int|error b1 = int:fromHexString("ffffffff80000000");
    testResult(b1);

    testResult(int:fromHexString("ffffffffffff8000"));

    b1 = int:fromHexString("ffffffffffffffec");
    testResult(b1);

    testResult(int:fromHexString("8000000000000000"));
}

function testResult(int|error i) {
    if i is int {
        io:println(i); // @output -2147483648
                       // @output -32768
                       // @output -20
                       // @output -9223372036854775808
    } else {
        io:println(i);
    }
}
