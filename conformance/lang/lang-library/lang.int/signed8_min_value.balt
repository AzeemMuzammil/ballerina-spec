Test-Case: output
Description: Test minimum value of Signed8 built-in subtype of int.
Labels: int:SIGNED8_MIN_VALUE, DecimalNumber, if-else-stmt, int, is-expr, optional-type, string, unary-minus

function init() {
    int:SIGNED8_MIN_VALUE a = -128;
    testIntOrNil(a); // @output -128

    testIntOrNil(int:SIGNED8_MIN_VALUE); // @output -128

    int b = int:SIGNED8_MIN_VALUE;
    testIntOrNil(b); // @output -128
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i);
    } else {
        io:println("nil");
    }
}

Test-Case: output
Description: Test SIGNED8_MIN_VALUE belonging to a type.
Labels: int:SIGNED8_MIN_VALUE, int, int:Signed8, int:Signed16, int:Signed32, is-expr

function init() {
    io:println(int:SIGNED8_MIN_VALUE is int); // @output true
    io:println(int:SIGNED8_MIN_VALUE is int:Signed8); // @output true
    io:println(int:SIGNED8_MIN_VALUE is int:Signed16); // @output true
    io:println(int:SIGNED8_MIN_VALUE is int:Signed32); // @output true
}

Test-Case: output
Description: Test assignability of SIGNED8_MIN_VALUE with var.
Labels: int:SIGNED8_MIN_VALUE, is-expr, var

function init() {
    var a = int:SIGNED8_MIN_VALUE;
    io:println(a); // @output -128
    io:println(a is int); // @output true
}

Test-Case: output
Description: Test declaring module level variables with SIGNED8_MIN_VALUE.
Labels: int:SIGNED8_MIN_VALUE, int, module-const-decl

const int a = int:SIGNED8_MIN_VALUE;

int b = int:SIGNED8_MIN_VALUE;

function init() {
    io:println(a); // @output -128
    io:println(b); // @output -128
}

Test-Case: output
Description: Test defining types with SIGNED8_MIN_VALUE.
Labels: int:SIGNED8_MIN_VALUE, DecimalNumber, int:Unsigned16, module-const-decl, module-type-defn, unary-minus,
        union-type

type Const1 int:SIGNED8_MIN_VALUE;

function init() {
    Const1 a1 = -128;
    io:println(a1); // @output -128

    int:SIGNED8_MIN_VALUE|int:Unsigned16 a2 = 130;
    io:println(a2); // @output 130
}

Test-Case: output
Description: Test equality with SIGNED8_MIN_VALUE.
Labels: int:SIGNED8_MIN_VALUE, DecimalNumber, equality, int, int:Signed8, unary-minus

function init() {
    io:println(int:SIGNED8_MIN_VALUE == -128); // @output true

    int a = -128;
    io:println(a == int:SIGNED8_MIN_VALUE); // @output true

    int:Signed8 b = -128;
    io:println(b == int:SIGNED8_MIN_VALUE); // @output true
}

Test-Case: output
Description: Test SIGNED8_MIN_VALUE as expression in return statement.
Labels: int:SIGNED8_MIN_VALUE, return-stmt

function init() {
    io:println(getInt()); // @output -128
}

function getInt() returns int {
    return int:SIGNED8_MIN_VALUE;
}

Test-Case: output
Description: Test SIGNED8_MIN_VALUE as expression in list constructor.
Labels: int:SIGNED8_MIN_VALUE, array-type, int, list-constructor-expr

function init() {
    int[] arr = [int:SIGNED8_MIN_VALUE, int:SIGNED8_MIN_VALUE];
    io:println(arr); // @output [-128,-128]
}

Test-Case: output
Description: Test SIGNED8_MIN_VALUE as expression in method call expression.
Labels: int:SIGNED8_MIN_VALUE, value:toString, method-call-expr

function init() {
    io:println(int:SIGNED8_MIN_VALUE.toString()); // @output -128
}

Test-Case: output
Description: Test SIGNED8_MIN_VALUE as expression in map constructor.
Labels: int:SIGNED8_MIN_VALUE, int, mapping-constructor-expr, map-type, string

function init() {
    map<int> intMap = {"One": int:SIGNED8_MIN_VALUE, "Two": int:SIGNED8_MIN_VALUE};
    io:println(intMap); // @output {"One":-128,"Two":-128}
}

Test-Case: output
Description: Test SIGNED8_MIN_VALUE as expression in additive expression.
Labels: int:SIGNED8_MIN_VALUE, additive-expr, int

function init() {
    int a = int:SIGNED8_MIN_VALUE + int:SIGNED8_MIN_VALUE;
    io:println(a); // @output -256
}

Test-Case: output
Description: Test SIGNED8_MIN_VALUE as expression in if else statement.
Labels: int:SIGNED8_MIN_VALUE, DecimalNumber, if-else-stmt, relational-expr

function init() {
    compare(); // @output true
}

function compare() {
    if int:SIGNED8_MIN_VALUE < 20 {
        io:println(int:SIGNED8_MIN_VALUE < 20);
    } else {
        io:println();
    }
}

Test-Case: error
Description: Test assigning values to subtypes of SIGNED8_MAX_VALUE.
Fail-Issue: ballerina-platform/ballerina-lang#32804
Labels: int:SIGNED8_MIN_VALUE, DecimalNumber, module-const-decl, module-type-defn

const int A = int:SIGNED8_MIN_VALUE;

type Const1 int:SIGNED8_MIN_VALUE;

type Const2 A|Const1;

function errorFunction() {
    Const1 _ = 23; // @error int is not a subtype of -128

    Const2 _ = 23; // @error int is not a subtype of -128
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED8_MIN_VALUE type variable.
Labels: int:SIGNED8_MIN_VALUE, DecimalNumber

function errorFunction() {
    int:SIGNED8_MIN_VALUE _ = 10; // @error int is not a subtype of -128
}

Test-Case: error
Description: Test assigning int:SIGNED8_MIN_VALUE to an incompatible type.
Labels: int:SIGNED8_MIN_VALUE, , int:Signed8, string

function errorFunction() {
    int:Signed8 _ = int:SIGNED8_MIN_VALUE; // @error int is not a subtype of int:Signed8
    string _ = int:SIGNED8_MIN_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED8_MIN_VALUE constant value.
Labels: int:SIGNED8_MIN_VALUE, DecimalNumber

function errorFunction() {
    int:SIGNED8_MIN_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED8_MIN_VALUE.
Labels: DecimalNumber, unary-minus

function errorFunction() {
    SIGNED8_MIN_VALUE _ = -100; // @error unknown type
}
