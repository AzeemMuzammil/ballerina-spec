Test-Case: output
Description: Test maximum value of int type.
Labels: int:MAX_VALUE, is-expr, optional-type, string

public function main() {
    int:MAX_VALUE a = 9223372036854775807;

    int b = int:MAX_VALUE;
    io:println(b); // @output 9223372036854775807

    testIntOrNil(a);
    testIntOrNil(int:MAX_VALUE);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 9223372036854775807
                       // @output 9223372036854775807
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning int:MAX_VALUE to an incompatible type.
Labels: int:MAX_VALUE, int:Unsigned32

public function main() {
    int:Unsigned32 a = int:MAX_VALUE; // @error int is not a subtype of int:Unsigned32
    string b = int:MAX_VALUE; // @error int is not a subtype of string

}

Test-Case: error
Description: Test assigning too large value for int max value.
Fail-Issue: ballerina-lang#32574
Labels: int:MAX_VALUE

public function main() {
    int:MAX_VALUE a = 9223372036854775808; // @error too large value
}

Test-Case: error
Description: Test assigning invalid value for int max value.
Labels: int:MAX_VALUE

public function main() {
    int:MAX_VALUE a = 9223372036854775806; // @error int is not a subtype of 9223372036854775807
}

Test-Case: error
Description: Test updating int:MAX_VALUE constant value.
Labels: int:MAX_VALUE

public function main() {
    int:MAX_VALUE = 10; // @error cannot update constant

}

Test-Case: error
Description: Test missing int module-prefix with int MAX_VALUE.
Labels:

public function main() {
    MAX_VALUE a = 9223372036854775807; // @error unknown type
}

Test-Case: output
Description: Test minimum value of int type.
Labels: additive-expr, int:MIN_VALUE, is-expr, optional-type, string

public function main() {
    int:MIN_VALUE a = -9223372036854775807 - 1;

    int b = int:MIN_VALUE;
    io:println(b); // @output -9223372036854775808

    testIntOrNil(a);
    testIntOrNil(int:MIN_VALUE);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -9223372036854775808
                       // @output -9223372036854775808
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning int:MIN_VALUE to an incompatible type.
Labels: int:MIN_VALUE, int:Unsigned32

public function main() {
    int:Unsigned32 a = int:MIN_VALUE; // @error int is not a subtype of int:Unsigned32
    string b = int:MIN_VALUE; // @error int is not a subtype of string
}

Test-Case: panic
Description: Test assigning -9223372036854775808 for MIN_VALUE.
Fail-Issue: ballerina-lang#32577
Labels: int:MIN_VALUE

public function main() {
    int:MIN_VALUE a = -9223372036854775808; // @panic number overflow
}

Test-Case: error
Description: Test assigning too small value for int min value.
Labels: int:MIN_VALUE

public function main() {
    int:MIN_VALUE a = -9223372036854775809; // @error too small value
}

Test-Case: error
Description: Test assigning invalid value for int min value.
Fail-Issue: ballerina-lang#32513
Labels: int:MIN_VALUE

public function main() {
    int:MIN_VALUE a = 10; // @error int is not a subtype of -9223372036854775808
}

Test-Case: error
Description: Test updating int:MIN_VALUE constant value.
Labels: int:MIN_VALUE

public function main() {
    int:MIN_VALUE = 10; // @error cannot update constant

}

Test-Case: error
Description: Test missing int module-prefix with int MIN_VALUE.
Labels: additive-expr

public function main() {
    MIN_VALUE a = -9223372036854775807 - 1; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Signed32 built-in subtype of int.
Labels: int:SIGNED32_MAX_VALUE, is-expr, optional-type, string

public function main() {
    int:SIGNED32_MAX_VALUE a = 2147483647;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED32_MAX_VALUE);

    int b = int:SIGNED32_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 2147483647
                       // @output 2147483647
                       // @output 2147483647
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED32_MAX_VALUE type variable.
Labels: int:SIGNED32_MAX_VALUE

public function main() {
    int:SIGNED32_MAX_VALUE a = 10; // @error int is not a subtype of 2147483647
}

Test-Case: error
Description: Test assigning int:SIGNED32_MAX_VALUE to an incompatible type.
Labels: int:Signed32, int:SIGNED32_MAX_VALUE

public function main() {
    int:Signed32 a = int:SIGNED32_MAX_VALUE; // @error int is not a subtype of int:Signed32
    string b = int:SIGNED32_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED32_MAX_VALUE constant value.
Labels: int:SIGNED32_MAX_VALUE

public function main() {
    int:SIGNED32_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED32_MAX_VALUE.
Labels:

public function main() {
    SIGNED32_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test minimum value of Signed32 built-in subtype of int.
Labels: int:SIGNED32_MIN_VALUE, is-expr, optional-type, string

public function main() {
    int:SIGNED32_MIN_VALUE a = -2147483648;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED32_MIN_VALUE);

    int b = int:SIGNED32_MIN_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -2147483648
                       // @output -2147483648
                       // @output -2147483648
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED32_MIN_VALUE type variable.
Labels: int:SIGNED32_MIN_VALUE

public function main() {
    int:SIGNED32_MIN_VALUE a = 10; // @error int is not a subtype of -2147483648
}

Test-Case: error
Description: Test assigning int:SIGNED32_MIN_VALUE with an incompatible type.
Labels: int:Signed32, int:SIGNED32_MIN_VALUE

public function main() {
    int:Signed32 a = int:SIGNED32_MIN_VALUE; // @error int is not a subtype of int:Signed32
    string b = int:SIGNED32_MIN_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED32_MIN_VALUE constant value.
Labels: int:SIGNED32_MIN_VALUE

public function main() {
    int:SIGNED32_MIN_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED32_MIN_VALUE.
Labels:

public function main() {
    SIGNED32_MIN_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Signed16 built-in subtype of int.
Labels: int:SIGNED16_MAX_VALUE, is-expr, optional-type, string

public function main() {
    int:SIGNED16_MAX_VALUE a = 32767;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED16_MAX_VALUE);

    int b = int:SIGNED16_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 32767
                       // @output 32767
                       // @output 32767
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED16_MAX_VALUE type variable.
Labels: int:SIGNED16_MAX_VALUE

public function main() {
    int:SIGNED16_MAX_VALUE a = 10; // @error int is not a subtype of 32767
}

Test-Case: error
Description: Test assigning int:SIGNED16_MAX_VALUE with an incompatible type.
Labels: int:Signed16, int:SIGNED16_MAX_VALUE

public function main() {
    int:Signed16 a = int:SIGNED16_MAX_VALUE; // @error int is not a subtype of int:Signed16
    string b = int:SIGNED16_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED16_MAX_VALUE constant value.
Labels: int:SIGNED16_MAX_VALUE

public function main() {
    int:SIGNED16_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED16_MAX_VALUE.
Labels:

public function main() {
    SIGNED16_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test minimum value of Signed16 built-in subtype of int.
Labels: int:SIGNED16_MIN_VALUE, is-expr, optional-type, string

public function main() {
    int:SIGNED16_MIN_VALUE a = -32768;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED16_MIN_VALUE);

    int b = int:SIGNED16_MIN_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -32768
                       // @output -32768
                       // @output -32768
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED16_MIN_VALUE type variable.
Labels: int:SIGNED16_MIN_VALUE

public function main() {
    int:SIGNED16_MIN_VALUE a = 10; // @error int is not a subtype of -32768
}

Test-Case: error
Description: Test assigning int:SIGNED16_MIN_VALUE with an incompatible type.
Labels: int:SIGNED16_MIN_VALUE, int:Signed16, string

public function main() {
    int:Signed16 a = int:SIGNED16_MIN_VALUE; // @error int is not a subtype of int:Signed16
    string b = int:SIGNED16_MIN_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED16_MIN_VALUE constant value.
Labels: int:SIGNED16_MIN_VALUE

public function main() {
    int:SIGNED16_MIN_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED16_MIN_VALUE.
Labels:

public function main() {
    SIGNED16_MIN_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Signed8 built-in subtype of int.
Labels: int:SIGNED8_MAX_VALUE, is-expr, optional-type, string

public function main() {
    int:SIGNED8_MAX_VALUE a = 127;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED8_MAX_VALUE);

    int b = int:SIGNED8_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 127
                       // @output 127
                       // @output 127
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED8_MAX_VALUE type variable.
Labels: int:SIGNED8_MAX_VALUE

public function main() {
    int:SIGNED8_MAX_VALUE a = 10; // @error int is not a subtype of 127
}

Test-Case: error
Description: Test assigning int:SIGNED8_MAX_VALUE with an incompatible type.
Labels: int:Signed8, int:SIGNED8_MAX_VALUE, string

public function main() {
    int:Signed8 a = int:SIGNED8_MAX_VALUE; // @error int is not a subtype of int:Signed8
    string b = int:SIGNED8_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED8_MAX_VALUE constant value.
Labels: int:SIGNED8_MAX_VALUE

public function main() {
    int:SIGNED8_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED8_MAX_VALUE.
Labels:

public function main() {
    SIGNED8_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test minimum value of Signed8 built-in subtype of int.
Labels: int:SIGNED8_MIN_VALUE, is-expr, optional-type, string

public function main() {
    int:SIGNED8_MIN_VALUE a = -128;

    testIntOrNil(a);
    testIntOrNil(int:SIGNED8_MIN_VALUE);

    int b = int:SIGNED8_MIN_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -128
                       // @output -128
                       // @output -128
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:SIGNED8_MIN_VALUE type variable.
Labels: int:SIGNED8_MIN_VALUE

public function main() {
    int:SIGNED8_MIN_VALUE a = 10; // @error int is not a subtype of -128
}

Test-Case: error
Description: Test assigning int:SIGNED8_MIN_VALUE with an incompatible type.
Labels: int:Signed8, int:SIGNED8_MIN_VALUE, string

public function main() {
    int:Signed8 a = int:SIGNED8_MIN_VALUE; // @error int is not a subtype of int:Signed8
    string b = int:SIGNED8_MIN_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:SIGNED8_MIN_VALUE constant value.
Labels: int:SIGNED8_MIN_VALUE

public function main() {
    int:SIGNED8_MIN_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED8_MIN_VALUE.
Labels:

public function main() {
    SIGNED8_MIN_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Unsigned32 built-in subtype of int.
Labels: int:UNSIGNED32_MAX_VALUE, is-expr, optional-type, string

public function main() {
    int:UNSIGNED32_MAX_VALUE a = 4294967295;

    testIntOrNil(a);
    testIntOrNil(int:UNSIGNED32_MAX_VALUE);

    int b = int:UNSIGNED32_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 4294967295
                       // @output 4294967295
                       // @output 4294967295
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:UNSIGNED32_MAX_VALUE type variable.
Labels: int:UNSIGNED32_MAX_VALUE

public function main() {
    int:UNSIGNED32_MAX_VALUE a = 10; // @error int is not a subtype of 4294967295
}

Test-Case: error
Description: Test assigning int:UNSIGNED32_MAX_VALUE with an incompatible type.
Labels: int:Unsigned32, int:UNSIGNED32_MAX_VALUE, string

public function main() {
    int:Unsigned32 a = int:UNSIGNED32_MAX_VALUE; // @error int is not a subtype of int:Unsigned32
    string b = int:UNSIGNED32_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:UNSIGNED32_MAX_VALUE constant value.
Labels:int:UNSIGNED32_MAX_VALUE

public function main() {
    int:UNSIGNED32_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:UNSIGNED32_MAX_VALUE.
Labels:

public function main() {
    UNSIGNED32_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Unsigned16 built-in subtype of int.
Labels: int:UNSIGNED16_MAX_VALUE, is-expr, optional-type, string

public function main() {
    int:UNSIGNED16_MAX_VALUE a = 65535;

    testIntOrNil(a);
    testIntOrNil(int:UNSIGNED16_MAX_VALUE);

    int b = int:UNSIGNED16_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 65535
                       // @output 65535
                       // @output 65535
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:UNSIGNED16_MAX_VALUE type variable.
Labels: int:UNSIGNED16_MAX_VALUE

public function main() {
    int:UNSIGNED16_MAX_VALUE a = 10; // @error int is not a subtype of 65535
}

Test-Case: error
Description: Test assigning int:UNSIGNED16_MAX_VALUE with an incompatible type.
Labels: int:Unsigned16, int:UNSIGNED16_MAX_VALUE, string

public function main() {
    int:Unsigned16 a = int:UNSIGNED16_MAX_VALUE; // @error int is not a subtype of int:Unsigned16
    string b = int:UNSIGNED16_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:UNSIGNED16_MAX_VALUE constant value.
Labels: int:UNSIGNED16_MAX_VALUE

public function main() {
    int:UNSIGNED16_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:UNSIGNED16_MAX_VALUE.
Labels:

public function main() {
    UNSIGNED16_MAX_VALUE a = -100; // @error unknown type
}

Test-Case: output
Description: Test maximum value of Unsigned8 built-in subtype of int.
Labels: int:UNSIGNED8_MAX_VALUE, is-expr, optional-type, string

public function main() {
    int:UNSIGNED8_MAX_VALUE a = 255;

    testIntOrNil(a);
    testIntOrNil(int:UNSIGNED8_MAX_VALUE);

    int b = int:UNSIGNED8_MAX_VALUE;
    testIntOrNil(b);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 255
                       // @output 255
                       // @output 255
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning invalid value for int:UNSIGNED8_MAX_VALUE type variable.
Labels: int:UNSIGNED8_MAX_VALUE

public function main() {
    int:UNSIGNED8_MAX_VALUE a = 10; // @error int is not a subtype of 255
}

Test-Case: error
Description: Test assigning int:UNSIGNED8_MAX_VALUE with an incompatible type.
Labels: int:UNSIGNED8_MAX_VALUE

public function main() {
    int:Unsigned8 a = int:UNSIGNED8_MAX_VALUE; // @error int is not a subtype of int:Unsigned8
    string b = int:UNSIGNED8_MAX_VALUE; // @error int is not a subtype of string
}

Test-Case: error
Description: Test updating int:UNSIGNED8_MAX_VALUE constant value.
Labels: int:UNSIGNED8_MAX_VALUE

public function main() {
    int:UNSIGNED8_MAX_VALUE = 10; // @error cannot update constant
}

Test-Case: error
Description: Test missing int module-prefix with int:SIGNED8_MAX_VALUE.
Labels: int:int:UNSIGNED8_MAX_VALUE

public function main() {
    int:UNSIGNED8_MAX_VALUE a = -100; // @error unknown type
}
