Test-Case: output
Description: Test Signed32 built-in subtype of int.
Labels: int:Signed32

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 145678392;
    int:Signed32 a3 = 2147483647;

    testSigned32Int(a1);
    testSigned32Int(a2);
    testSigned32Int(a3);
}

function testSigned32Int(int:Signed32 i) {
    io:println(i); // @output -2147483648
                   // @output 145678392
                   // @output 2147483647
}

Test-Case: output
Description: Test assignability of type Signed32.
Labels: any, int:Signed32, optional-type, string

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 145678392;
    int:Signed32 a3 = 2147483647;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -2147483648
                       // @output 145678392
                       // @output 2147483647
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output -2147483648
                   // @output 145678392
                   // @output 2147483647
}

Test-Case: output
Description: Test int:Signed32 value belonging to a type.
Labels: int:Signed32

public function main() {
    int:Signed32 a1 = 1234521672;

    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of int:Signed32 values.
Labels: int:Signed32

public function main() {
    int:Signed32 a1 = 127;
    int:Signed32 a2 = 127;

    io:println(a1 == a2); // @output true

    int b1 = 127;
    io:println(a1 == b1); // @output true

    int:Signed32 a3 = -127;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test assignability of type Signed32 with incompatible types.
Labels: int:Signed8, int:Signed32, string

public function main() {
    int:Signed32 a1 = 21474836488; // @error int is not a subtype of int:Signed32

    int:Signed32 a2 = 100;
    testSigned8Int(a2); // @error int:Signed32 is not a subtype of int:Signed8

    int:Signed32 a3 = "A"; // @error string is not a subtype of int:Signed32

    string b1 = a2; // @error int:Signed32 is not a subtype of string
}

function testSigned8Int(int:Signed8 i) {
    io:println(i);
}

Test-Case: output
Description: Test Signed16 built-in subtype of int.
Labels: int:Signed16

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 15213;
    int:Signed16 a3 = 32767;

    testSigned16Int(a1);
    testSigned16Int(a2);
    testSigned16Int(a3);
}

function testSigned16Int(int:Signed16 i) {
    io:println(i); // @output -32768
                   // @output 15213
                   // @output 32767
}

Test-Case: output
Description: Test assignability with type Signed16.
Labels: any, int:Signed16, int:Signed32, optional-type, string

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 15213;
    int:Signed16 a3 = 32767;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Signed32 b1 = a3;
    testIntOrNil(b1);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -32768
                       // @output 15213
                       // @output 32767
                       // @output 32767
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output -32768
                   // @output 15213
                   // @output 32767
}

Test-Case: output
Description: Test type Signed16 value belonging to a type.
Labels: int:Signed16, int:Signed32

public function main() {
    int:Signed16 a1 = 23546;

    io:println(a1 is int:Signed32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of type Signed16 values.
Labels: int:Signed16, int:Signed32

public function main() {
    int:Signed16 a1 = 32767;
    int:Signed16 a2 = 32767;

    io:println(a1 == a2); // @output true

    int:Signed32 b1 = 32767;
    io:println(a1 == b1); // @output true

    int b2 = 32767;
    io:println(a2 == b2); // @output true

    int:Signed16 a3 = -32767;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test type Signed16 value assignability with incompatible types.
Labels: int:Signed8, int:Signed16, string

public function main() {
    int:Signed16 a1 = 32768; // @error int is not a subtype of int:Signed16

    int:Signed16 a2 = 100;
    testSigned8Int(a2); // @error int:Signed16 is not a subtype of int:Signed8

    int:Signed16 a3 = "A"; // @error string is not a subtype of int:Signed16

    string b1 = a2; // @error int:Signed16 is not a subtype of string
}

function testSigned8Int(int:Signed8 i) {
    io:println(i);
}

Test-Case: error
Description: Test assigning an incompatible int value to type Signed16.
Fail-Issue: ballerina-lang#32508
Labels: int:Signed16

public function main() {
    int:Signed16 a = 21474803712; // @error int is not a subtype of int:Signed16
    int:Signed16 b = 9223372036854775807; // @error int is not a subtype of int:Signed16
}

Test-Case: output
Description: Test Signed8 built-in subtype of int.
Labels: int:Signed8

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = 0;
    int:Signed8 a3 = 127;

    testSigned8Int(a1);
    testSigned8Int(a2);
    testSigned8Int(a3);
}

function testSigned8Int(int:Signed8 i) {
    io:println(i); // @output -128
                   // @output 0
                   // @output 127
}

Test-Case: output
Description: Test assignability with type Signed8.
Labels: any, int:Signed8, int:Signed16, int:Signed32, optional-type, string

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = 0;
    int:Signed8 a3 = 127;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Signed16 b1 = a2;
    testIntOrNil(b1);

    int:Signed32 b2 = a3;
    testIntOrNil(b2);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output -128
                       // @output 0
                       // @output 127
                       // @output 0
                       // @output 127
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output -128
                   // @output 0
                   // @output 127
}

Test-Case: output
Description: Test type Signed8 value belonging to a type.
Labels: int:Signed8, int:Signed32

public function main() {
    int:Signed8 a1 = 100;

    io:println(a1 is int:Signed32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of type Signed8 values.
Labels: int:Signed8, int:Signed16

public function main() {
    int:Signed8 a1 = 125;
    int:Signed8 a2 = 125;

    io:println(a1 == a2); // @output true

    int:Signed16 b1 = 125;
    io:println(a1 == b1); // @output true

    int:Signed32 b2 = 125;
    io:println(a1 == b2); // @output true

    int b3 = 125;
    io:println(a2 == b3); // @output true

    int:Signed8 a3 = -125;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test type Signed8 value assignability with incompatible types.
Labels: int:Signed8, int:Unsigned8, int:Unsigned32, string

public function main() {
    int:Signed8 a1 = 256; // @error int is not a subtype of int:Signed8

    int:Signed8 a2 = 100;
    testUnsigned32Int(a2); // @error int:Signed8 is not a subtype of int:Unsigned32

    int:Unsigned8 a3 = "A"; // @error string is not a subtype of int:Signed8

    string b1 = a2; // @error int:Signed8 is not a subtype of string
}

function testUnsigned32Int(int:Unsigned32 i) {
    io:println(i);
}

Test-Case: error
Description: Test assigning an incompatible int value to type Signed8.
Fail-Issue: ballerina-lang#32508
Labels: int:Signed8

public function main() {
    int:Signed8 a = -9223372036854775681; // @error int is not a subtype of int:Signed8
    int:Signed8 b = 9223372036854775807; // @error int is not a subtype of int:Signed8
}

Test-Case: error
Description: Test missing int module-prefix with built-in subtypes of int.
Labels:

public function main() {
    Signed8 a = 10; // @error unknown type
    Signed16 b = 10; // @error unknown type
    Signed32 c = 10; // @error unknown type
}

Test-Case: output
Description: Test Unsigned32 built-in subtype of int.
Labels: int:Unsigned32

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 23526165;
    int:Unsigned32 a3 = 4294967295;

    testUnsigned32Int(a1);
    testUnsigned32Int(a2);
    testUnsigned32Int(a3);
}

function testUnsigned32Int(int:Unsigned32 i) {
    io:println(i); // @output 0
                   // @output 23526165
                   // @output 4294967295
}

Test-Case: output
Description: Test assignability with type Unsigned32.
Labels: any, int:Unsigned32, optional-type, string

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 23526165;
    int:Unsigned32 a3 = 4294967295;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 0
                       // @output 23526165
                       // @output 4294967295
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output 0
                   // @output 23526165
                   // @output 4294967295
}

Test-Case: output
Description: Test type Unsigned32 value belonging to a type.
Labels: int:Unsigned32, is-expr

public function main() {
    int:Unsigned32 a1 = 130;

    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of type Unsigned32 values.
Labels: int:Unsigned32

public function main() {
    int:Unsigned32 a1 = 127;
    int:Unsigned32 a2 = 127;

    io:println(a1 == a2); // @output true

    int b1 = a1;
    io:println(a1 == b1); // @output true

    int:Unsigned32 a3 = 120;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test type Unsigned32 value assignability with incompatible types.
Labels: int:Unsigned8, int:Unsigned32, string

public function main() {
    int:Unsigned32 a1 = -1; // @error int is not a subtype of int:Unsigned32

    int:Unsigned32 a2 = 130;
    testUnsigned8Int(a2); // @error int:Unsigned32 is not a subtype of int:Unsigned8

    int:Unsigned32 a3 = "A"; // @error string is not a subtype of int:Unsigned32

    string b1 = a2; // @error int:Unsigned32 is not a subtype of string
}

function testUnsigned8Int(int:Unsigned8 i) {
    io:println(i);
}

Test-Case: output
Description: Test Unsigned16 built-in subtype of int.
Labels: int:Unsigned16

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 15431;
    int:Unsigned16 a3 = 65535;

    testUnsigned16Int(a1);
    testUnsigned16Int(a2);
    testUnsigned16Int(a3);
}

function testUnsigned16Int(int:Unsigned16 i) {
    io:println(i); // @output 0
                   // @output 15431
                   // @output 65535
}

Test-Case: output
Description: Test assignability with type Unsigned16.
Labels: any, int:Unsigned16, int:Unsigned32, optional-type, string

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 15431;
    int:Unsigned16 a3 = 65535;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Unsigned32 b1 = a3;

    testIntOrNil(b1);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 0
                       // @output 15431
                       // @output 65535
                       // @output 65535
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output 0
                   // @output 15431
                   // @output 65535
}

Test-Case: output
Description: Test type Unsigned16 value belonging to a type.
Labels: int:Unsigned16, int:Unsigned32, is-expr

public function main() {
    int:Unsigned16 a1 = 130;

    io:println(a1 is int:Unsigned32); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of type Unsigned16 values.
Labels: int:Unsigned16, int:Unsigned32

public function main() {
    int:Unsigned16 a1 = 127;
    int:Unsigned16 a2 = 127;

    io:println(a1 == a2); // @output true

    int:Unsigned32 b1 = 127;
    io:println(a1 == b1); // @output true

    int b2 = 127;
    io:println(a2 == b2); // @output true

    int:Unsigned16 a3 = 120;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test type Unsigned16 value assignability with incompatible types.
Labels: int:Unsigned8, int:Unsigned16, string

public function main() {
    int:Unsigned16 a1 = -1; // @error int is not a subtype of int:Unsigned16

    int:Unsigned16 a2 = 130;
    testUnsigned8Int(a2); // @error int:Unsigned16 is not a subtype of int:Unsigned8

    int:Unsigned16 a3 = "A"; // @error string is not a subtype of int:Unsigned16

    string b1 = a2; // @error int:Unsigned16 is not a subtype of string
}

function testUnsigned8Int(int:Unsigned8 i) {
    io:println(i);
}

Test-Case: error
Description: Test assigning an incompatible int value to type Unsigned16.
Fail-Issue: ballerina-lang#32508
Labels: int:Unsigned16

public function main() {
    int:Unsigned16 a = -21474770945; // @error int is not a subtype of int:Unsigned16
    int:Unsigned16 b = -21474836480; // @error int is not a subtype of int:Unsigned16
}

Test-Case: output
Description: Test Unsigned8 built-in subtype of int.
Labels: int:Unsigned8

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 130;
    int:Unsigned8 a3 = 255;

    testUnsigned8Int(a1);
    testUnsigned8Int(a2);
    testUnsigned8Int(a3);
}

function testUnsigned8Int(int:Unsigned8 i) {
    io:println(i); // @output 0
                   // @output 130
                   // @output 255
}

Test-Case: output
Description: Test assignability with type Unsigned8.
Labels: any, int:Unsigned8, int:Unsigned16, int:Unsigned32, optional-type, string

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 130;
    int:Unsigned8 a3 = 255;

    testIntOrNil(a1);
    testIntOrNil(a2);
    testIntOrNil(a3);

    int:Unsigned16 b1 = a2;
    int:Unsigned32 b2 = a3;

    testIntOrNil(b1);
    testIntOrNil(b2);

    testAny(a1);
    testAny(a2);
    testAny(a3);
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 0
                       // @output 130
                       // @output 255
                       // @output 130
                       // @output 255
    } else {
        io:println("nil");
    }
}

function testAny(any i) {
    io:println(i); // @output 0
                   // @output 130
                   // @output 255
}

Test-Case: output
Description: Test type Unsigned8 value belonging to a type.
Labels: int:Unsigned8, int:Unsigned16, int:Unsigned32, is-expr

public function main() {
    int:Unsigned8 a1 = 130;

    io:println(a1 is int:Unsigned32); // @output true
    io:println(a1 is int:Unsigned16); // @output true
    io:println(a1 is int); // @output true
}

Test-Case: output
Description: Test equality of type Unsigned8 values.
Labels: int:Unsigned8

public function main() {
    int:Unsigned8 a1 = 127;
    int:Unsigned8 a2 = 127;

    io:println(a1 == a2); // @output true

    int:Unsigned32 b1 = 127;
    io:println(a1 == b1); // @output true

    int:Unsigned16 b2 = 127;
    io:println(a1 == b1); // @output true

    int b3 = 127;
    io:println(a1 == b3); // @output true

    int:Unsigned8 a3 = 120;
    io:println(a1 != a3); // @output true
}

Test-Case: error
Description: Test type Unsigned8 value assignability with incompatible types.
Labels: int:Signed8, int:Unsigned8, string

public function main() {
    int:Unsigned8 a1 = 256; // @error int is not a subtype of int:Unsigned8

    int:Unsigned8 a2 = 130;
    testSigned8Int(a2); // @error int:Unsigned8 is not a subtype of int:Signed8

    int:Unsigned8 a3 = "A"; // @error string is not a subtype of int:Unsigned8

    string b1 = a2; // @error int:Unsigned8 is not a subtype of string
}

function testSigned8Int(int:Signed8 i) {
    io:println(i);
}

Test-Case: error
Description: Test assigning an incompatible int value to type Unsigned8.
Fail-Issue: ballerina-lang#32508
Labels: int:Unsigned8

public function main() {
    int:Unsigned8 a = -9223372036854775553; // @error int is not a subtype of int:Unsigned8
    int:Unsigned8 b = -9223372036854775808; // @error int is not a subtype of int:Unsigned8
}

Test-Case: output
Description: Test union of builtin subtypes of int.
Labels: int:Unsigned8, int:Unsigned32, module-type-defn

type IntType int:Signed8|int:Unsigned32;

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;

    io:println(a1); // @output 235262

    int:Signed8 x = -127;
    int:Signed8|int:Unsigned32 a2 = x;

    io:println(a2); // @output -127

    IntType a3 = 235262;

    io:println(a3); // @output 235262

    IntType a4 = x;

    io:println(a4); // @output -127
}

Test-Case: output
Description: Test assigning valid values to union of builtin subtypes of int.
Fail-Issue: ballerina-lang#32686
Labels: int:Unsigned8, int:Unsigned32, module-type-defn

type IntType int:Signed8|int:Unsigned32;

public function main() {
    int:Signed8|int:Unsigned32 a = -127;
    IntType b = -127;
}

Test-Case: output
Description: Test assigning invalid values to union of builtin subtypes of int.
Labels: int:Unsigned8, int:Unsigned32, module-type-defn

type IntType int:Signed8|int:Unsigned32;
public function main() {
    int:Signed8|int:Unsigned32 a = 4294967295 + 1;  // @error int is not a subtype of (int:Signed8|int:Unsigned32)

    IntType c = 4294967295 + 1;  // @error int is not a subtype of IntType
}

Test-Case: output
Description: Test assigning invalid values to union of builtin subtypes of int.
Fail-Issue: ballerina-lang#32687
Labels: int:Unsigned8, int:Unsigned32, module-type-defn

type IntType int:Signed8|int:Unsigned32;

public function main() {
    int:Signed8|int:Unsigned32 a = 4294967295 + 1;  // @error int is not a subtype of (int:Signed8|int:Unsigned32)

    int:Signed8|int:Unsigned32 b = 4294967296;  // @error int is not a subtype of (int:Signed8|int:Unsigned32)

    IntType c = 4294967295 + 1;  // @error int is not a subtype of IntType

    IntType d = 4294967296;  // @error int is not a subtype of IntType
}

Test-Case: error
Description: Test assigning too large value to a builtin subtype of int.
Fail-Issue: ballerina-lang#32574
Labels: int:Signed8

public function main() {
    int:Signed8 x = 9223372036854775808; // @error too large value
}

Test-Case: error
Description: Test assigning too small value to a builtin subtype of int.
Fail-Issue: ballerina-lang#32574
Labels: int:Signed8

public function main() {
    int:Signed16 x = -9223372036854775809; // @error too small value
}
