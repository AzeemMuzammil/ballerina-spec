Test-Case: output
Description: Test `sum` function with type Signed32 values.
Labels: int:Signed32, int:sum

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -1234;
    int:Signed32 a3 = 1234;
    int:Signed32 a4 = 145678392;
    int:Signed32 a5 = 2147483647;

    int b1 = a1.sum();
    testInt(b1);

    testInt(int:sum());

    b1 = a1.sum(a1, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a5);
    testInt(b1);

    testInt(a5.sum(a2));

    testInt(int:sum(a5, a2));
}

function testInt(int i) {
    io:println(i); // @output -2147483648
                   // @output 0
                   // @output -4294968530
                   // @output 2293162039
                   // @output 2147482413
                   // @output 2147482413
}

Test-Case: output
Description: Test `sum` function with type Signed16 values.
Labels: int:Signed16, int:sum

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = -1234;
    int:Signed16 a3 = 1234;
    int:Signed16 a4 = 15213;
    int:Signed16 a5 = 32767;

    int b1 = a1.sum();
    testInt(b1);

    b1 = a1.sum(a1, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a5);
    testInt(b1);

    testInt(a5.sum(a2));

    testInt(int:sum(a5, a2));
}

function testInt(int i) {
    io:println(i); // @output -32768
                   // @output -66770
                   // @output 47980
                   // @output 31533
                   // @output 31533
}

Test-Case: output
Description: Test `sum` function with type Signed8 values.
Labels: int:Signed8, int:sum

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -10;
    int:Signed8 a3 = 0;
    int:Signed8 a4 = 10;
    int:Signed8 a5 = 127;

    int b1 = a1.sum();
    testInt(b1);

    b1 = a1.sum(a1, a4);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a5);
    testInt(b1);

    testInt(a5.sum(a2));

    testInt(int:sum(a5, a2));
}

function testInt(int i) {
    io:println(i); // @output -128
                   // @output -246
                   // @output 127
                   // @output 117
                   // @output 117
}

Test-Case: output
Description: Test `sum` function with type Unsigned32 values.
Labels: int:sum, int:Unsigned32

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 150;
    int:Unsigned32 a3 = 23526165;
    int:Unsigned32 a4 = 4294967295;

    int b1 = a2.sum();
    testInt(b1);

    b1 = a1.sum(a1, a2, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a4);
    testInt(b1);

    testInt(a4.sum(a3));

    testInt(int:sum(a3, a4));
}

function testInt(int i) {
    io:println(i); // @output 150
                   // @output 300
                   // @output 8613460905
                   // @output 4318493460
                   // @output 4318493460
}

Test-Case: output
Description: Test `sum` function with type Unsigned16 values.
Labels: int:sum, int:Unsigned16

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 150;
    int:Unsigned16 a3 = 15431;
    int:Unsigned16 a4 = 65535;

    int b1 = a2.sum();
    testInt(b1);

    b1 = a1.sum(a1, a2, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a4);
    testInt(b1);

    testInt(a4.sum(a3));

    testInt(int:sum(a3, a4));
}

function testInt(int i) {
    io:println(i); // @output 150
                   // @output 300
                   // @output 146651
                   // @output 80966
                   // @output 80966
}

Test-Case: output
Description: Test `sum` function with type Unsigned8 values.
Labels: int:sum, int:Unsigned8

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 25;
    int:Unsigned8 a3 = 143;
    int:Unsigned8 a4 = 255;

    int b1 = a2.sum();
    testInt(b1);

    b1 = a1.sum(a1, a2, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a4);
    testInt(b1);

    testInt(a4.sum(a3));

    testInt(int:sum(a3, a4));
}

function testInt(int i) {
    io:println(i); // @output 25
                   // @output 50
                   // @output 678
                   // @output 398
                   // @output 398
}

Test-Case: output
Description: Test `sum` function with type int values.
Labels: additive-expr, int:sum

public function main() {
    int a1 = -9223372036854775807 - 1;
    int a2 = -736453762;
    int a3 = 120;
    int a4 = 736453762;
    int a5 = 9223372036854775807;

    int b1 = a1.sum();
    testInt(b1);

    b1 = a4.sum(a1, a4, a2);
    testInt(b1);

    b1 = int:sum(a2, a3, a4, a4);
    testInt(b1);

    testInt(a5.sum(a1));

    testInt(int:sum(a5, a1));
}

function testInt(int i) {
    io:println(i); // @output -9223372036854775808
                   // @output -9223372036118322046
                   // @output 736453882
                   // @output -1
                   // @output -1
}

Test-Case: output
Description: Test `sum` function with values of different builtin subtypes of int.
Labels: int:Signed8, int:Signed16, int:Signed32, int:sum, int:Unsigned8, int:Unsigned16, int:Unsigned32

public function main() {
    int:Signed32 a1 = 300;
    int:Signed16 a2 = 200;
    int:Signed8 a3 = 100;
    int:Unsigned32 a4 = 400;
    int:Unsigned16 a5 = 500;
    int:Unsigned8 a6 = 250;
    int a7 = 600;

    int b1 = a1.sum(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    testInt(b1);

    b1 = int:sum(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    testInt(b1);

    testInt(300.sum(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000));
}

function testInt(int i) {
    io:println(i); // @output 8350
                   // @output 8350
                   // @output 8350
}

Test-Case: output
Description: Test `sum` function with int subtypes.
Labels: int:sum, module-const-decl, module-type-defn, type-reference, union-type

const A = 10;
const B = 20;

type IntType1 10|20|30;

type IntType2 A|B;

type IntType3 int:Signed8|int:Unsigned32;

public function main() {
    A a1 = 10;
    IntType1 a2 = 30;
    IntType2 a3 = 20;
    int:Signed8|int:Unsigned32 a4 = 235262;
    IntType3 a5 = 126373;

    int b1 = int:sum(a1, a2, a3);
    testInt(b1);

    b1 = a2.sum(a2, a3);
    testInt(b1);

    testInt(B.sum(a1, a3, a4, a5));

    testInt(a3.sum(A, a1, a5));
}

function testInt(int i) {
    io:println(i); // @output 60
                   // @output 80
                   // @output 361685
                   // @output 126413
}

Test-Case: output
Description: Test `sum` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:Signed8, int:sum, int:Unsigned32, module-type-defn, type-reference

type IntType int:Signed8|int:Unsigned32;

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    IntType a2 = 4563;

    int b1 = a1.sum();
    b1 = a2.sum();
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-lang#32603
Labels: int:sum

public function main() {
    int a1 = -9223372036854775805;

    int a2 = a1.sum(-1, -2, -3); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-lang#32603
Labels: int:sum

public function main() {
    int a1 = -9223372036854775805;

    int a2 = int:sum(a1, -1, -2, -3); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-lang#32603
Labels: int:sum

public function main() {
    int a1 = 9223372036854775805;

    int a2 = a1.sum(5); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `sum` function.
Fail-Issue: ballerina-lang#32603
Labels: int:sum

public function main() {
    int a1 = 9223372036854775805;

    int a2 = int:sum(a1, 5); // @panic int range overflow
}

Test-Case: output
Description: Test assignability of `sum` function result with compatible types.
Labels: any, int:sum, optional-type, string

public function main() {
    int a1 = 10;

    testIntOrNil(a1.sum(20, 30, 40));

    any b1 = a1.sum(20, 30, 40);
    io:println(b1); // @output 100
}

function testIntOrNil(int? i) {
    if i is int {
        io:println(i); // @output 100
    } else {
        io:println("nil");
    }
}

Test-Case: error
Description: Test assigning the result of `sum` function to an incompatible type.
Labels: float, int:Signed8, int:sum

public function main() {
    int a1 = 10;

    int:Signed8 b1 = a1.sum(10, 20); // @error expects a int:Signed8, but sum() returns an int

    float b2 = a1.sum(20, 30, 40); // @error expects a float, but sum() returns an int

    b2 = int:sum(10, 20); // @error expects a float, but sum() returns an int
}

Test-Case: output
Description: Test `sum` function result belonging to a type.
Labels: int:sum, is-expr

public function main() {
    int a1 = 50;

    io:println(a1.sum(100) is int); // @output true

    io:println(int:sum(a1, 200) is int); // @output true

    var b1 = a1.sum(200);
    io:println(b1 is int); // @output true
}

Test-Case: output
Description: Test equality with `sum` function result.
Labels: int:sum

public function main() {
    int a1 = 100;
    int a2 = 200;
    int a3 = -50;

    int b1 = a1.sum(a2, a3);
    int b2 = a2.sum(a1, a3);

    io:println(b1 == b2); // @output true

    b1 = int:sum(a1, a2, a3);
    b2 = int:sum(a2, a1, a3);

    io:println(b1 == b2); // @output true

    io:println(a1.sum(a2, a3) == a2.sum(a1, a3)); // @output true

    io:println(int:sum(a1, a2, a3) == int:sum(a2, a1, a3)); // @output true

    io:println(a1.sum(a3) != a3.sum(a2)); // @output true

    io:println(int:sum(a2, a3) != int:sum(a3, a1)); // @output true
}

Test-Case: output
Description: Test chained `sum` function.
Labels: int:abs, int:sum

public function main() {
    int a1 = -100;

    int b1 = a1.sum(-200).abs().sum(300);
    testInt(b1);

    testInt(int:sum(int:sum(a1, -200).abs().sum(400), 300));
}

function testInt(int i) {
    io:println(i); // @output 600
                   // @output 1000
}

Test-Case: error
Description: Test passing invalid value to `sum` function.
Labels: int:sum

public function main() {
    int a1 = 10;

    int b1 = a1.sum(10, 10.5); // @error expects int values to sum

    b1 = int:sum(10, "ABC"); // @error expects int values to sum
}
