Test-Case: output
Description: Test `abs` function with type Signed32.
Labels: int:abs, int:Signed32

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -1234;
    int:Signed32 a3 = 1234;
    int:Signed32 a4 = 145678392;
    int:Signed32 a5 = 2147483647;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    int b3 = a4.abs();
    testInt(b3);

    testInt(int:abs(a5));
}

function testInt(int i) {
    io:println(i); // @output 2147483648
                   // @output 1234
                   // @output 1234
                   // @output 145678392
                   // @output 2147483647
}

Test-Case: output
Description: Test `abs` function with type Signed16.
Labels: int:abs, int:Signed16

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = -1234;
    int:Signed16 a3 = 1234;
    int:Signed16 a4 = 15213;
    int:Signed16 a5 = 32767;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    int b3 = a4.abs();
    testInt(b3);

    testInt(int:abs(a5));
}

function testInt(int i) {
    io:println(i); // @output 32768
                   // @output 1234
                   // @output 1234
                   // @output 15213
                   // @output 32767
}

Test-Case: output
Description: Test `abs` function with type Signed8.
Labels: int:abs, int:Signed8

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -10;
    int:Signed8 a3 = 0;
    int:Signed8 a4 = 10;
    int:Signed8 a5 = 127;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    int b3 = a4.abs();
    testInt(b3);

    testInt(int:abs(a5));
}

function testInt(int i) {
    io:println(i); // @output 128
                   // @output 10
                   // @output 0
                   // @output 10
                   // @output 127
}

Test-Case: output
Description: Test `abs` function with type Unsigned32.
Labels: int:abs, int:Unsigned32

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 150;
    int:Unsigned32 a3 = 23526165;
    int:Unsigned32 a4 = 4294967295;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));
}

function testInt(int i) {
    io:println(i); // @output 0
                   // @output 150
                   // @output 23526165
                   // @output 4294967295
}

Test-Case: output
Description: Test `abs` function with type Unsigned16.
Labels: int:abs, int:Unsigned16

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 150;
    int:Unsigned16 a3 = 15431;
    int:Unsigned16 a4 = 65535;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));
}

function testInt(int i) {
    io:println(i); // @output 0
                   // @output 150
                   // @output 15431
                   // @output 65535
}

Test-Case: output
Description: Test `abs` function with type Unsigned8.
Labels: int:abs, int:Unsigned8

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 25;
    int:Unsigned8 a3 = 143;
    int:Unsigned8 a4 = 255;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));
}

function testInt(int i) {
    io:println(i); // @output 0
                   // @output 25
                   // @output 143
                   // @output 255
}

Test-Case: output
Description: Test `abs` function with type int.
Labels: int:abs

public function main() {
    int a1 = -9223372036854775807;
    int a2 = -736453762;
    int a3 = -120;
    int a4 = 120;
    int a5 = 736453762;
    int a6 = 9223372036854775807;

    int b1 = a1.abs();
    testInt(b1);

    testInt(a2.abs());

    int b2 = int:abs(a3);
    testInt(b2);

    testInt(int:abs(a4));

    a5 = a5.abs();
    testInt(a5);

    a6 = int:abs(a6);
    testInt(a6);
}

function testInt(int i) {
    io:println(i); // @output 9223372036854775807
                   // @output 736453762
                   // @output 120
                   // @output 120
                   // @output 736453762
                   // @output 9223372036854775807
}

Test-Case: output
Description: Test `abs` function with int literals.
Labels: int:abs

public function main() {
    int a1 = (-9223372036854775807).abs();
    testInt(a1);

    a1 = (-736453762).abs();
    testInt(a1);

    a1 = int:abs(-120);
    testInt(a1);

    int a2 = (120).abs();
    testInt(a2);

    a2 = (736453762).abs();
    testInt(a2);

    a2 = int:abs(9223372036854775807);
    testInt(a2);
}

function testInt(int i) {
    io:println(i); // @output 9223372036854775807
                   // @output 736453762
                   // @output 120
                   // @output 120
                   // @output 736453762
                   // @output 9223372036854775807
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-lang#32590
Labels: int:abs, additive-expr

public function main() {
    int a1 = -9223372036854775807 - 1;
    int b1 = a1.abs(); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-lang#32590
Labels: int:abs, additive-expr

public function main() {
    int a1 = -9223372036854775807 - 1;
    int b1 = int:abs(a1); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-lang#32590
Labels: int:abs, additive-expr

public function main() {
    int a1 = (-9223372036854775807 - 1).abs(); // @panic int range overflow
}

Test-Case: output
Description: Test `abs` function with int subtypes.
Labels: int:abs, module-const-decl, module-type-defn, type-reference, union-type

const A = -10;
const B = -20;

type IntType1 -10|-20|-30;

type IntType2 A|B;

public function main() {
    A a1 = -10;
    IntType1 a2 = -30;
    IntType2 a3 = -20;

    int b1 = int:abs(a1);
    testInt(b1);

    b1 = a2.abs();
    testInt(b1);

    testInt(B.abs());

    testInt(a3.abs());
}

function testInt(int i) {
    io:println(i); // @output 10
                   // @output 30
                   // @output 20
                   // @output 20
}

Test-Case: output
Description: Test `abs` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:abs, int:Signed8, int:Unsigned32, module-type-defn, type-reference

type IntType int:Signed8|int:Unsigned32;

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    IntType a2 = 4563;

    int b1 = a1.abs();
    b1 = a2.abs();
}

Test-Case: output
Description: Test `abs` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:abs, int:Signed8, int:Unsigned32

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    int b1 = int:abs(a1);
}

Test-Case: output
Description: Test `abs` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:abs, int:Signed8, int:Unsigned32, module-type-defn, type-reference

type IntType int:Signed8|int:Unsigned32;

public function main() {
    IntType a1 = 4563;
    int b1 = int:abs(a1);
}

Test-Case: output
Description: Test assignability of `abs` function result with compatible types.
Labels: any, int:abs, optional-type, string, union-type, var

public function main() {
    int a1 = -12536;

    int? b1 = a1.abs();
    io:println(b1); // @output 12536

    int|string b2 = int:abs(a1);
    io:println(b2); // @output 12536

    var b3 = a1.abs();
    io:println(b3); // @output 12536

    testAny(a1.abs());
}

function testAny(any i) {
    io:println(i); // @output 12536
}

Test-Case: error
Description: Test assigning the result of `abs` function to an incompatible type.
Labels: int:abs, int:Signed8, string

public function main() {
    int a1 = -10;

    int:Signed8 b1 = a1.abs(); // @error expects a int:Signed8 value, but abs() returns an int

    string b2 = a1.abs(); // @error expects a string value, but abs() returns an int

    b2 = int:abs(-10); // @error expects a string value, but abs() returns an int
}

Test-Case: output
Description: Test `abs` function result belonging to a type.
Labels: int:abs, is-expr

public function main() {
    int a1 = -736453762;

    io:println(a1.abs() is int); // @output true

    io:println(int:abs(a1) is int); // @output true

    var b1 = a1.abs();
    io:println(b1 is int); // @output true
}

Test-Case: output
Description: Test equality with `abs` function result.
Labels: int:abs

public function main() {
    int a1 = -736453762;
    int a2 = 736453762;
    int a3 = 4352;

    int b1 = a1.abs();
    int b2 = a2.abs();

    io:println(b1 == b2); // @output true

    b1 = int:abs(a1);
    b2 = int:abs(a2);

    io:println(b1 == b2); // @output true

    io:println(a1.abs() == a2.abs()); // @output true

    io:println(int:abs(a1) == int:abs(a2)); // @output true

    io:println(a1.abs() != a3.abs()); // @output true

    io:println(int:abs(a2) != int:abs(a3)); // @output true
}

Test-Case: output
Description: Test chained `abs` function.
Labels: int:abs

public function main() {
    int a1 = -736453762;

    int b1 = a1.abs().abs().abs();
    testInt(b1);

    testInt(int:abs(int:abs(a1).abs()));
}

function testInt(int i) {
    io:println(i); // @output 736453762
                   // @output 736453762
}

Test-Case: error
Description: Test passing invalid value to `abs` function.
Labels: float, int:abs, string

public function main() {
    float a1 = 10.5;
    int b1 = a1.abs(); // @error expects an int value to be operated on

    b1 = int:abs("ABC"); // @error expects an int value to be operated on
}

Test-Case: error
Description: Test missing required parameter in `abs` function call.
Labels: int:abs

public function main() {
    int a = int:abs(); // @error missing value to be operated on
}
