Test-Case: output
Description: Test `max` function with type Signed32 values.
Labels: int:max, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed32, method-call-expr, unary-minus

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -1234;
    int:Signed32 a3 = 1234;
    int:Signed32 a4 = 0xffecda;
    int:Signed32 a5 = -0x123fAbCD;

    int b1 = a1.max();
    testInt(b1); // @output -2147483648

    b1 = a1.max(a1, a2);
    testInt(b1); // @output -1234

    b1 = int:max(a1, a2, a3);
    testInt(b1); // @output 1234

    testInt(a4.max(a1, a5)); // @output 16772314

    testInt(int:max(a1, a3, a4)); // @output 16772314
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` function with type Signed16 values.
Labels: int:max, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed16, method-call-expr, unary-minus

public function main() {
    int:Signed16 a1 = -24536;
    int:Signed16 a2 = -123;
    int:Signed16 a3 = 1234;
    int:Signed16 a4 = 0xacd;
    int:Signed16 a5 = -0x4FEa;

    int b1 = a1.max();
    testInt(b1); // @output -24536

    b1 = a1.max(a1, a2);
    testInt(b1); // @output -123

    b1 = int:max(a1, a2, a3);
    testInt(b1); // @output 1234

    testInt(a4.max(a1)); // @output 2765

    testInt(int:max(a1, a3)); // @output 1234

    testInt(int:max(a1, a5, a4)); // @output 2765
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` function with type Signed8 values.
Labels: int:max, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed8, method-call-expr, unary-minus

public function main() {
    int:Signed8 a1 = -120;
    int:Signed8 a2 = -10;
    int:Signed8 a3 = 100;
    int:Signed8 a4 = 0x7d;
    int:Signed8 a5 = -0x7a;

    int b1 = a1.max();
    testInt(b1); // @output -120

    b1 = a1.max(a1, a2);
    testInt(b1); // @output -10

    b1 = int:max(a1, a2, a3);
    testInt(b1); // @output 100

    testInt(a4.max(a1, a3)); // @output 125

    testInt(int:max(a1, a5)); // @output -120
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` function with type Unsigned32 values.
Labels: int:max, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Unsigned32, method-call-expr

public function main() {
    int:Unsigned32 a1 = 50;
    int:Unsigned32 a2 = 3425;
    int:Unsigned32 a3 = 0xabc12DE;

    int b1 = a1.max();
    testInt(b1); // @output 50

    b1 = a1.max(a1, a2);
    testInt(b1); // @output 3425

    b1 = int:max(a1, a2, a3);
    testInt(b1); // @output 180097758

    testInt(a3.max(a1)); // @output 180097758

    testInt(int:max(a1, a3)); // @output 180097758
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` function with type Unsigned16 values.
Labels: int:max, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Unsigned16, method-call-expr

public function main() {
    int:Unsigned16 a1 = 50;
    int:Unsigned16 a2 = 3425;
    int:Unsigned16 a3 = 0xfAe1;

    int b1 = a1.max();
    testInt(b1); // @output 50

    b1 = a1.max(a1, a2);
    testInt(b1); // @output 3425

    b1 = int:max(a1, a2, a3);
    testInt(b1); // @output 64225

    testInt(a3.max(a1)); // @output 64225

    testInt(int:max(a1, a3)); // @output 64225
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` function with type Unsigned8 values.
Labels: int:max, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Unsigned8, method-call-expr

public function main() {
    int:Unsigned8 a1 = 50;
    int:Unsigned8 a2 = 5;
    int:Unsigned8 a3 = 0xa2;

    int b1 = a1.max();
    testInt(b1); // @output 50

    b1 = a1.max(a1, a2);
    testInt(b1); // @output 50

    b1 = int:max(a1, a2, a3);
    testInt(b1); // @output 162

    testInt(a3.max(a1)); // @output 162

    testInt(int:max(a1, a3)); // @output 162
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` function with type byte values.
Labels: int:max, byte, DecimalNumber, function-call-expr, HexIntLiteral, int, method-call-expr

public function main() {
    byte a1 = 50;
    byte a2 = 5;
    byte a3 = 0xa2;

    int b1 = a1.max();
    testInt(b1); // @output 50

    b1 = a1.max(a1, a2);
    testInt(b1); // @output 50

    b1 = int:max(a1, a2, a3);
    testInt(b1); // @output 162

    testInt(a3.max(a1)); // @output 162

    testInt(int:max(a1, a3)); // @output 162
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` function with type int values.
Labels: int:max, DecimalNumber, function-call-expr, HexIntLiteral, int, method-call-expr, unary-minus

public function main() {
    int a1 = 243526171;
    int a2 = 9223372036854775807;
    int a3 = 0xabcDE12AC5;
    int a4 = -0xabcDE12AC5;

    int b1 = a1.max();
    testInt(b1); // @output 243526171

    b1 = a1.max(a1, a2);
    testInt(b1); // @output 9223372036854775807

    b1 = int:max(a1, a2, a3);
    testInt(b1); // @output 9223372036854775807

    testInt(a3.max(a1)); // @output 737893493445

    testInt(int:max(a1, a3, a4)); // @output 737893493445
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` function with values of different builtin subtypes of int.
Labels: int:max, byte, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed8, int:Signed16,
        int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32

public function main() {
    int:Signed32 a1 = 300;
    int:Signed16 a2 = 200;
    int:Signed8 a3 = 100;
    int:Unsigned32 a4 = 400;
    int:Unsigned16 a5 = 500;
    int:Unsigned8 a6 = 250;
    byte a7 = 0xde;
    int a8 = 600;

    int b1 = a1.max(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000); // @output 3000
    testInt(b1);

    b1 = int:max(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000); // @output 3000
    testInt(b1);

    testInt(300.max(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000, a8)); // @output 3000
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` function with user-defined subtypes of int.
Labels: int:max, DecimalNumber, function-call-expr, int, method-cal-expr, module-const-decl,
        module-type-defn, union-type, singleton-type

const A = 10;
const B = 20;

type IntType1 10|20|30;

type IntType2 A|B;

type IntType3 int:Signed8|int:Unsigned32;

public function main() {
    A a1 = 10;
    IntType1 a2 = 30;
    IntType2 a3 = 20;
    int:Signed8|int:Unsigned32 a4 = 352;
    IntType3 a5 = 232;

    int b1 = int:max(a1, a2, a3);
    testInt(b1); // @output 30

    b1 = a2.max(a2, a3);
    testInt(b1); // @output 30

    testInt(B.max(a1, a3, a4, a5)); // @output 352

    testInt(a3.max(A, a1, a5)); // @output 232
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` function with user-defined subtypes of int.
Fail-Issue: ballerina-platform/ballerina-lang#32620
Labels: int:max, DecimalNumber, int, int:Signed8, int:Unsigned32, method-call-expr, module-type-defn, union-type

type IntType int:Signed8|int:Unsigned32;

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    IntType a2 = 4563;

    int b1 = a1.max();
    b1 = a2.max();
}

Test-Case: output
Description: Test `min` function with user-defined subtypes of int.
Fail-Issue: ballerina-platform/ballerina-lang#32620
Labels: int:max, DecimalNumber, function-call-expr, int:Signed8, int:Unsigned32, module-const-decl,
        module-type-defn, singleton-type, union-type

const A = 10;
const B = 20;

type IntType1 4|20|30;

type IntType2 A|B;

type IntType3 int:Signed8|int:Unsigned32;

type IntType4 IntType1|IntType2|IntType3;

public function main() {
    IntType3 a = 12;
    io:println(int:max(a, 30, 25)); // @output 30
}

Test-Case: output
Description: Test assignability of `max` function result with compatible types.
Labels: int:max, DecimalNumber, any, int, method-call-expr, optional-type, unary-minus

public function main() {
    int a1 = -12536;

    int? b1 = a1.max(200, 200);
    io:println(b1); // @output 200

    testAny(a1.max(23, 50, 5)); // @output 50
}

function testAny(any i) {
    io:println(i);
}

Test-Case: output
Description: Test assignability of `max` function result with var.
Labels: int:max, DecimalNumber, int, is-expr, method-call-expr, var, unary-minus

public function main() {
    int a1 = -50;

    var b1 = a1.max(10, 20);
    io:println(b1); // @output 20
    io:println(b1 is int); // @output true
}

Test-Case: output
Description: Test `max` function result belonging to a type.
Labels: int:max, DecimalNumber, byte, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16,
        int:Unsigned32, function-call-expr, int, is-expr, method-call-expr

public function main() {
    int a1 = 50;

    io:println(a1.max(100) is int); // @output true

    io:println(int:max(a1, 200) is int); // @output true

    io:println(int:max(a1, 60) is int:Signed32); // @output true
    io:println(int:max(a1, 60) is int:Signed16); // @output true
    io:println(int:max(a1, 60) is int:Signed8); // @output true

    io:println(int:max(a1, 60) is int:Unsigned32); // @output true
    io:println(int:max(a1, 60) is int:Unsigned16); // @output true
    io:println(int:max(a1, 60) is int:Unsigned8); // @output true
    io:println(int:max(a1, 60) is byte); // @output true
}

Test-Case: output
Description: Test equality with `max` function result.
Labels: int:max, byte, DecimalNumber, function-call-expr, int, int:Signed32, method-call-expr, unary-minus

public function main() {
    int a1 = 100;
    byte a2 = 200;
    int:Signed32 a3 = -50;

    int b1 = a1.max(a2, a3);
    int b2 = a2.max(a1, a3);

    io:println(b1 == b2); // @output true

    b1 = int:max(a1, a2, a3);
    b2 = int:max(a2, a1, a3);

    io:println(b1 == b2); // @output true

    io:println(a1.max(a2, a3) == a2.max(a1, a3)); // @output true

    io:println(int:max(a1, a2, a3) == int:max(a2, a1, a3)); // @output true

    io:println(a1.max(a3) != a3.max(a2)); // @output true

    io:println(int:max(a2, a3) != int:max(a3, a1)); // @output true
}

Test-Case: output
Description: Test chained `max` function.
Labels: int:max, DecimalNumber, function-call-expr, int, int:abs, int:sum, method-call-expr, unary-minus

public function main() {
    int a1 = -100;

    int b1 = a1.max(-200).abs().sum(300, 400).max(12, 1234);
    testInt(b1); // @output 1234

    testInt(int:max(int:max(a1, -200).abs().max(400), 300).sum(123).max(12, 500)); // @output 523
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `max` method call as expression in return statement.
Labels: int:max, DecimalNumber, int, method-call-expr

public function main() {
    io:println(getMax(10, 20)); // @output 20
}

function getMax(int i, int j) returns int {
    return i.max(j);
}

Test-Case: output
Description: Test `max` method call as expression in list constructor.
Labels: int:max, array-type, DecimalNumber, function-call-expr, HexIntLiteral, int, list-constructor-expr,
        method-call-expr, unary-minus

public function main() {
    int[] arr = [23.max(5), int:max(-12, 2), (0xacd).max(0x3, 12)];
    io:println(arr); // @output [23,2,2765]
}

Test-Case: output
Description: Test `max` method call as expression in method call expression.
Labels: int:max, DecimalNumber, function-call-expr, value:toString, unary-minus

public function main() {
    io:println(int:max(-90, 100).toString()); // @output 100
}

Test-Case: output
Description: Test `max` method call as expression in map constructor.
Labels: function-call-expr, int:max, mapping-constructor-expr, map-type, method-call-expr, string, unary-minus

public function main() {
    map<int> intMap = {"One": 23.max(5), "Two": int:max(-30, 0xf)};
    io:println(intMap); // @output {"One":23,"Two":15}
}

Test-Case: output
Description: Test `max` method call as expression in additive expression.
Labels: int:max, DecimalNumber, additive-expr, function-call-expr, int, method-call-expr, unary-minus

public function main() {
    int a = int:max(-30, 120) + 100.max(12);
    io:println(a); // @output 220
}

Test-Case: output
Description: Test `max` method call as expression in if else statement.
Labels: int:max, DecimalNumber, function-call-expr, if-else-stmt, int, method-call-expr, relational-expr

public function main() {
    compare(5, 2); // @output true
    compare(100, 30); // @output true
    compare(50, 60); // @output true
}

function compare(int i, int j) {
    if int:max(i, j) < 30 {
        io:println(int:max(i) < 30);
    } else if (i.max(j) < 40) {
        io:println(i.max(j) < 40);
    } else {
        io:println(i.max(j) > 40);
    }
}
