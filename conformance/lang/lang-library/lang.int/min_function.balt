Test-Case: output
Description: Test `min` function with type Signed32 values.
Labels: int:min, int:Signed32

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 456;
    int:Signed32 a3 = 1234;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a2));

    testInt(int:min(a2, a3));
}

function testInt(int i) {
    io:println(i); // @output -2147483648
                   // @output -2147483648
                   // @output -2147483648
                   // @output 456
                   // @output 456
}

Test-Case: output
Description: Test `min` function with type Signed16 values.
Labels: int:min, int:Signed16

public function main() {
    int:Signed16 a1 = -24536;
    int:Signed16 a2 = 453;
    int:Signed16 a3 = 1234;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a2));

    testInt(int:min(a2, a3));
}

function testInt(int i) {
    io:println(i); // @output -24536
                   // @output -24536
                   // @output -24536
                   // @output 453
                   // @output 453
}

Test-Case: output
Description: Test `min` function with type Signed8 values.
Labels: int:min, int:Signed8

public function main() {
    int:Signed8 a1 = -120;
    int:Signed8 a2 = 10;
    int:Signed8 a3 = 100;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a2));

    testInt(int:min(a2, a3));
}

function testInt(int i) {
    io:println(i); // @output -120
                   // @output -120
                   // @output -120
                   // @output 10
                   // @output 10
}

Test-Case: output
Description: Test `min` function with type Unsigned32 values.
Labels: int:min, int:Unsigned32

public function main() {
    int:Unsigned32 a1 = 50;
    int:Unsigned32 a2 = 3425;
    int:Unsigned32 a3 = 243;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a2));

    testInt(int:min(a2, a3));
}

function testInt(int i) {
    io:println(i); // @output 50
                   // @output 50
                   // @output 50
                   // @output 243
                   // @output 243
}

Test-Case: output
Description: Test `min` function with type Unsigned16 values.
Labels: int:min, int:Unsigned16

public function main() {
    int:Unsigned16 a1 = 50;
    int:Unsigned16 a2 = 3425;
    int:Unsigned16 a3 = 243;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a2));

    testInt(int:min(a2, a3));
}

function testInt(int i) {
    io:println(i); // @output 50
                   // @output 50
                   // @output 50
                   // @output 243
                   // @output 243
}

Test-Case: output
Description: Test `min` function with type Unsigned8 values.
Labels: int:min, int:Unsigned8

public function main() {
    int:Unsigned8 a1 = 50;
    int:Unsigned8 a2 = 5;
    int:Unsigned8 a3 = 243;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a1));

    testInt(int:min(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output 50
                   // @output 5
                   // @output 5
                   // @output 50
                   // @output 50
}

Test-Case: output
Description: Test `min` function with type int values.
Labels: int:min

public function main() {
    int a1 = 243526171;
    int a2 = 9223372036854775807;
    int a3 = 84633;

    int b1 = a1.min();
    testInt(b1);

    b1 = a1.min(a1, a2);
    testInt(b1);

    b1 = int:min(a1, a2, a3);
    testInt(b1);

    testInt(a3.min(a1));

    testInt(int:min(a1, a3));
}

function testInt(int i) {
    io:println(i); // @output 243526171
                   // @output 243526171
                   // @output 84633
                   // @output 84633
                   // @output 84633
}

Test-Case: output
Description: Test `min` function with values of different builtin subtypes of int.
Labels: int:min

public function main() {
    int:Signed32 a1 = 300;
    int:Signed16 a2 = 200;
    int:Signed8 a3 = 100;
    int:Unsigned32 a4 = 400;
    int:Unsigned16 a5 = 500;
    int:Unsigned8 a6 = 250;
    int a7 = 600;

    int b1 = a1.min(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    testInt(b1);

    b1 = int:min(a1, a2, 1000, a3, a4, a5, 3000, a6, a7, 2000);
    testInt(b1);

    testInt(300.min(a2, 1000, a3, a4, a5, 3000, a6, a7, 2000));
}

function testInt(int i) {
    io:println(i); // @output 100
                   // @output 100
                   // @output 100
}

Test-Case: output
Description: Test `min` function with int subtypes.
Labels: int:min, module-const-decl, module-type-defn, type-reference, union-type

const A = 10;
const B = 20;

type IntType1 4|20|30;

type IntType2 A|B;

type IntType3 int:Signed8|int:Unsigned32;

public function main() {
    A a1 = 10;
    IntType1 a2 = 4;
    IntType2 a3 = 20;
    int:Signed8|int:Unsigned32 a4 = 12;
    IntType3 a5 = 5;

    int b1 = int:min(a1, a2, a3);
    testInt(b1);

    b1 = a2.min(a2, a3);
    testInt(b1);

    testInt(B.min(a1, a3, a4, a5));

    testInt(a3.min(A, a1, a5));
}

function testInt(int i) {
    io:println(i); // @output 4
                   // @output 4
                   // @output 5
                   // @output 5
}

Test-Case: output
Description: Test `min` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:min, int:Signed8, int:Unsigned32, module-type-defn, type-reference

type IntType int:Signed8|int:Unsigned32;

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    IntType a2 = 4563;

    int b1 = a1.min();
    b1 = a2.min();
}

Test-Case: output
Description: Test assignability of `min` function result with compatible types.
Labels: any, int:min, optional-type

public function main() {
    int a1 = -12536;

    int? b1 = a1.min(786, 200);
    io:println(b1); // @output -12536

    testAny(a1.min(23, 50, 5));
}

function testAny(any i) {
    io:println(i); // @output -12536
}

Test-Case: error
Description: Test assigning the result of `min` function to an incompatible type.
Labels: int:min, int:Signed8, string

public function main() {
    int a1 = -10;

    int:Signed8 b1 = a1.min(10); // @error expects a int:Signed8 value, but min() returns an int

    string b2 = a1.min(); // @error expects a string value, but min() returns an int

    b2 = int:min(-10); // @error expects a string value, but min() returns an int
}

Test-Case: output
Description: Test `min` function result belonging to a type.
Labels: int:min, is-expr

public function main() {
    int a1 = 50;

    io:println(a1.min(100) is int); // @output true

    io:println(int:min(a1, 200) is int); // @output true

    var b1 = a1.min(200);
    io:println(b1 is int); // @output true
}

Test-Case: output
Description: Test equality with `min` function result.
Labels: int:min

public function main() {
    int a1 = 100;
    int a2 = 200;
    int a3 = -50;

    int b1 = a1.min(a2, a3);
    int b2 = a2.min(a1, a3);

    io:println(b1 == b2); // @output true

    b1 = int:min(a1, a2, a3);
    b2 = int:min(a2, a1, a3);

    io:println(b1 == b2); // @output true

    io:println(a1.min(a2, a3) == a2.min(a1, a3)); // @output true

    io:println(int:min(a1, a2, a3) == int:min(a2, a1, a3)); // @output true

    io:println(a1.min(a3) != a3.min(a2)); // @output false

    io:println(int:min(a2, a3) != int:min(a3, a1)); // @output false
}

Test-Case: output
Description: Test chained `min` function.
Labels: int:abs, int:max, int:min, int:sum

public function main() {
    int a1 = -100;

    int b1 = a1.min(-200).abs().sum(300, 400).max(5, 200).min(12, 1234);
    testInt(b1);

    testInt(int:min(int:min(a1, -200).abs().min(400), 300).max(12, 300).sum(123).min(12, 500));
}

function testInt(int i) {
    io:println(i); // @output 12
                   // @output 12
}

Test-Case: error
Description: Test passing invalid value to `min` function.
Labels: int:min, string

public function main() {
    int a1 = 10;
    int b1 = a1.min(10.5); // @error expects other values to be int

    b1 = int:min("ABC"); // @error expects first value to be int
}

Test-Case: error
Description: Test `min` function on invalid type.
Labels: int:min, string

public function main() {
    string a1 = "ABC";
    int b1 = a1.min(10); // @error min() is not defined for string
}

Test-Case: error
Description: Test missing required parameter in `min` function call.
Labels: int:min

public function main() {
    int a = int:min(); // @error missing first int value
}
