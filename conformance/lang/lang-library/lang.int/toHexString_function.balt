Test-Case: output
Description: Test `toHexString` function with type Signed32 values.
Labels: int:toHexString, int:Signed32, string

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 10;
    int:Signed32 a3 = 3245;
    int:Signed32 a4 = 2147483647;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output ffffffff80000000
                   // @output a
                   // @output cad
                   // @output 7fffffff
                   // @output 7fffffff
}

Test-Case: output
Description: Test `toHexString` function with type Signed16 values.
Labels: int:toHexString, int:Signed16, string

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 10;
    int:Signed16 a3 = 1234;
    int:Signed16 a4 = 32767;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output ffffffffffff8000
                   // @output a
                   // @output 4d2
                   // @output 7fff
                   // @output 7fff
}

Test-Case: output
Description: Test `toHexString` function with type Signed8 values.
Labels: int:toHexString, int:Signed8, string

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -20;
    int:Signed8 a3 = 45;
    int:Signed8 a4 = 127;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output ffffffffffffff80
                   // @output ffffffffffffffec
                   // @output 2d
                   // @output 7f
                   // @output 7f
}

Test-Case: output
Description: Test `toHexString` function with type Unsigned32 values.
Labels: int:toHexString, int:Unsigned32, string

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 125;
    int:Unsigned32 a3 = 36272;
    int:Unsigned32 a4 = 4294967295;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output 0
                   // @output 7d
                   // @output 8db0
                   // @output ffffffff
                   // @output ffffffff
}

Test-Case: output
Description: Test `toHexString` function with type Unsigned16 values.
Labels: int:toHexString, int:Unsigned16, string

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 125;
    int:Unsigned16 a3 = 2321;
    int:Unsigned16 a4 = 65535;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output 0
                   // @output 7d
                   // @output 911
                   // @output ffff
                   // @output ffff
}

Test-Case: output
Description: Test `toHexString` function with type Unsigned8 values.
Labels: int:toHexString, int:Unsigned8, string

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 10;
    int:Unsigned8 a3 = 120;
    int:Unsigned8 a4 = 255;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));
}

function testString(string i) {
    io:println(i); // @output 0
                   // @output a
                   // @output 78
                   // @output ff
                   // @output ff
}

Test-Case: output
Description: Test `toHexString` function with type int values.
Labels: int:toHexString, string

public function main() {
    int a1 = -9223372036854775807 - 1;
    int a2 = 125;
    int a3 = 0x4abcdef12;
    int a4 = 9223372036854775807;
    int a5 = 0x4ABCDEF12;
    int a6 = +1231238231;

    string b1 = a1.toHexString();
    testString(b1);

    b1 = a2.toHexString();
    testString(b1);

    b1 = int:toHexString(a3);
    testString(b1);

    testString(a4.toHexString());

    testString(int:toHexString(a4));

    testString(a5.toHexString());

    testString(int:toHexString(a6));
}

function testString(string i) {
    io:println(i); // @output 8000000000000000
                   // @output 7d
                   // @output 4abcdef12
                   // @output 7fffffffffffffff
                   // @output 7fffffffffffffff
                   // @output 4abcdef12
                   // @output 49633457
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Labels: int:toHexString, module-const-decl, module-type-defn, string, type-reference

const A = 10;
const B = 20;

type IntType1 10|20|30;

type IntType3 A|B;

public function main() {
    A a1 = 10;
    IntType1 a2 = 30;
    IntType3 a3 = 20;

    testString(int:toHexString(a1));

    string b1 = int:toHexString(a2);
    testString(b1);

    testString(B.toHexString());

    testString(int:toHexString(a3));
}

function testString(string i) {
    io:println(i); // @output a
                   // @output 1e
                   // @output 14
                   // @output 14
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:Signed8, int:Unsigned32, int:toHexString, module-type-defn, string, type-reference

type IntType int:Signed8|int:Unsigned32;

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    IntType a2 = 4563;

    string b1 = a1.toHexString();
    b1 = a2.toHexString();
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:Signed8, int:Unsigned32, int:toHexString, string

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    string b1 = int:toHexString(a1);
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:toHexString, module-type-defn, string, type-reference

type IntType int:Signed8|int:Unsigned32;

public function main() {
    IntType a1 = 4563;
    string b1 = int:toHexString(a1);
}

Test-Case: output
Description: Test assignability of `toHexString` function result with compatible types.
Labels: any, int:toHexString, string, optional-type

public function main() {
    int a1 = 2345;

    string? b1 = a1.toHexString();
    io:println(b1); // @output 929

    testAny(int:toHexString(a1));
}

function testAny(any i) {
    io:println(i); // @output 929
}

Test-Case: error
Description: Test assigning the result of `toHexString` function to an incompatible type.
Labels: int:toHexString, string:Char

public function main() {
    int a1 = 10;

    string:Char b1 = a1.toHexString(); // @error expects a string:Char, but toHexString() returns a string

    int b2 = int:toHexString(a1); // @error expects an int, but toHexString() returns a string

    b2 = a1.toHexString(); // @error expects an int, but toHexString() returns a string
}

Test-Case: output
Description: Test `toHexString` function result belonging to a type.
Labels: int:toHexString, is-expr, var

public function main() {
    int a1 = -1234;

    io:println(int:toHexString(a1) is string); // @output true

    var b1 = int:toHexString(a1);
    io:println(b1 is string); // @output true
}

Test-Case: output
Description: Test equality with `toHexString` function result.
Labels: int:Signed32, int:toHexString, string

public function main() {
    int a1 = 15;
    int a2 = 0xf;
    int:Signed32 a3 = 0xf;
    string a4 = "f";

    io:println(int:toHexString(a1) == int:toHexString(a2)); // @output true

    io:println(int:toHexString(a2) == int:toHexString(a3)); // @output true

    io:println(int:toHexString(a1) == a4); // @output true
}

Test-Case: error
Description: Test passing invalid value to `toHexString` function.
Labels: int:toHexString, string, union-type

public function main() {
    int|string a1 = 10;
    string b2 = int:toHexString(a1); // @error expects an int argument
}

Test-Case: error
Description: Test `toHexString` function on invalid type.
Labels: int:toHexString, string, union-type

public function main() {
    int|string a1 = 10;
    string b2 = a1.toHexString(); // @error toHexString() is not defined for (int|string)
}

Test-Case: error
Description: Test missing required parameter in `toHexString` function call.
Labels: int:toHexString, string

public function main() {
    string b2 = int:toHexString(); // @error missing int argument
}

Test-Case: error
Description: Test passing too many arguments to `toHexString`.
Labels: int:toHexString, string

public function main() {
    int a1 = 1234;

    string b1 = a1.toHexString(a1); // @error too many arguments
    b1 = int:toHexString(a1, a1); // @error too many arguments
}
