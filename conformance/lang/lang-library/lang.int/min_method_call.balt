Test-Case: error
Description: Test assigning the result of `min` function to an incompatible type.
Labels: int:min, DecimalNumber, function-call-expr, function-call-expr, int:Signed8, method-call-expr, string,
        unary-minus

function errorFunction(int a) {
    int:Signed8 _ = a.min(10); // @error expects a int:Signed8 value, but min() returns an int

    string _ = a.min(); // @error expects a string value, but min() returns an int

    string _ = int:min(-10); // @error expects a string value, but min() returns an int
}

Test-Case: error
Description: Test passing invalid value to `min` function.
Labels: int:min, DecimalNumber, float, function-call-expr, int, method-call-expr, string

function errorFunction(int a) {
    int _ = a.min(10.5); // @error expects other values to be int

    int _ = int:min("ABC"); // @error expects first value to be int
}

Test-Case: error
Description: Test `min` function on invalid type.
Labels: int:min, DecimalNumber, method-call-expr, int, string

function errorFunction(string a) {
    int _ = a.min(10); // @error min() is not defined for string
}

Test-Case: error
Description: Test missing required parameter in `min` function call.
Labels: int:min, function-call-expr, int

function errorFunction() {
    int _ = int:min(); // @error missing first int value
}
