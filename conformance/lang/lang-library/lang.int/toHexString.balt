Test-Case: output
Description: Test `toHexString` function with type Signed32 values.
Labels: int:toHexString, int:Signed32, string

public function main() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = 10;
    int:Signed32 a3 = 2147483647;
    int:Signed32 a4 = 0xffecda;
    int:Signed32 a5 = -0x123fAbCD;

    string b1 = a1.toHexString();
    testString(b1); // @output ffffffff80000000

    b1 = a2.toHexString();
    testString(b1); // @output a

    b1 = int:toHexString(a3);
    testString(b1); // @output 7fffffff

    testString(a4.toHexString()); // @output ffecda

    testString(int:toHexString(a5)); // @output ffffffffedc05433
}

function testString(string i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function with type Signed16 values.
Labels: int:toHexString, int:Signed16, string

public function main() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = 10;
    int:Signed16 a3 = 32767;
    int:Signed16 a4 = 0xacd;
    int:Signed16 a5 = -0x4FEa;

    string b1 = a1.toHexString();
    testString(b1); // @output ffffffffffff8000

    b1 = a2.toHexString();
    testString(b1); // @output a

    b1 = int:toHexString(a3);
    testString(b1); // @output 7fff

    testString(a4.toHexString()); // @output acd

    testString(int:toHexString(a5)); // @output ffffffffffffb016
}

function testString(string i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function with type Signed8 values.
Labels: int:toHexString, int:Signed8, string

public function main() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -20;
    int:Signed8 a3 = 127;
    int:Signed8 a4 = 0x7d;
    int:Signed8 a5 = -0x7a;

    string b1 = a1.toHexString();
    testString(b1); // @output ffffffffffffff80

    b1 = a2.toHexString();
    testString(b1); // @output ffffffffffffffec

    b1 = int:toHexString(a3);
    testString(b1); // @output 7f

    testString(a4.toHexString()); // @output 7d

    testString(int:toHexString(a5)); // @output ffffffffffffff86
}

function testString(string i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function with type Unsigned32 values.
Labels: int:toHexString, int:Unsigned32, string

public function main() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 125;
    int:Unsigned32 a3 = 36272;
    int:Unsigned32 a4 = 4294967295;
    int:Unsigned32 a5 = 0xabc12DE;

    string b1 = a1.toHexString();
    testString(b1); // @output 0

    b1 = a2.toHexString();
    testString(b1); // @output 7d

    b1 = int:toHexString(a3);
    testString(b1); // @output 8db0

    testString(a4.toHexString()); // @output ffffffff

    testString(int:toHexString(a5)); // @output abc12de
}

function testString(string i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function with type Unsigned16 values.
Labels: int:toHexString, int:Unsigned16, string

public function main() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 125;
    int:Unsigned16 a3 = 2321;
    int:Unsigned16 a4 = 65535;
    int:Unsigned16 a5 = 0xfAe1;

    string b1 = a1.toHexString();
    testString(b1); // @output 0

    b1 = a2.toHexString();
    testString(b1); // @output 7d

    b1 = int:toHexString(a3);
    testString(b1); // @output 911

    testString(a4.toHexString()); // @output ffff

    testString(int:toHexString(a5)); // @output fae1
}

function testString(string i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function with type Unsigned8 values.
Labels: int:toHexString, int:Unsigned8, string

public function main() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 10;
    int:Unsigned8 a3 = 120;
    int:Unsigned8 a4 = 255;
    int:Unsigned8 a5 = 0xa2;

    string b1 = a1.toHexString();
    testString(b1); // @output 0

    b1 = a2.toHexString();
    testString(b1); // @output a

    b1 = int:toHexString(a3);
    testString(b1); // @output 78

    testString(a4.toHexString()); // @output ff

    testString(int:toHexString(a5)); // @output a2
}

function testString(string i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function with byte values.
Labels: int:toHexString, int:Unsigned8, string

public function main() {
    byte a1 = 0;
    byte a2 = 10;
    byte a3 = 120;
    byte a4 = 255;
    byte a5 = 0xa2;

    string b1 = a1.toHexString();
    testString(b1); // @output 0

    b1 = a2.toHexString();
    testString(b1); // @output a

    b1 = int:toHexString(a3);
    testString(b1); // @output 78

    testString(a4.toHexString()); // @output ff

    testString(int:toHexString(a5)); // @output a2
}

function testString(string i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function with type int values.
Labels: int:toHexString, string

public function main() {
    int a1 = -9223372036854775807 - 1;
    int a2 = 125;
    int a3 = 0x4abcdef12;
    int a4 = 9223372036854775807;
    int a5 = 0x4ABCDEF12;
    int a6 = +1231238231;

    string b1 = a1.toHexString();
    testString(b1); // @output 8000000000000000

    b1 = a2.toHexString();
    testString(b1); // @output 7d

    b1 = int:toHexString(a3);
    testString(b1); // @output 4abcdef12

    testString(a4.toHexString()); // @output 7fffffffffffffff

    testString(int:toHexString(a4)); // @output 7fffffffffffffff

    testString(a5.toHexString()); // @output 4abcdef12

    testString(int:toHexString(a6)); // @output 49633457
}

function testString(string i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Labels: int:toHexString, module-const-decl, module-type-defn, string, type-reference

const A = 10;
const B = 20;

type IntType1 10|20|30;

type IntType2 A|B;

type IntType3 IntType1|IntType2;

public function main() {
    A a1 = 10;
    IntType1 a2 = 30;
    IntType2 a3 = 20;
    IntType3 a4 = 10;

    testString(int:toHexString(a1)); // @output a

    string b1 = int:toHexString(a2);
    testString(b1); // @output 1e

    testString(B.toHexString()); // @output 14

    testString(int:toHexString(a3)); // @output 14

    testString(a4.toHexString()); // @output a
}

function testString(string i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:Signed8, int:Unsigned32, int:toHexString, module-type-defn, string, type-reference

type IntType int:Signed8|int:Unsigned32;

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    IntType a2 = 4563;

    string b1 = a1.toHexString();
    b1 = a2.toHexString();
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:Signed8, int:Unsigned32, int:toHexString, string

public function main() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    string b1 = int:toHexString(a1);
}

Test-Case: output
Description: Test `toHexString` function with int subtypes.
Fail-Issue: ballerina-lang#32620
Labels: int:toHexString, module-type-defn, string, type-reference

type IntType int:Signed8|int:Unsigned32;

public function main() {
    IntType a1 = 4563;
    string b1 = int:toHexString(a1);
}

Test-Case: output
Description: Test assignability of `toHexString` function result with compatible types.
Labels: any, int:toHexString, string, optional-type

public function main() {
    int a1 = 2345;

    string? b1 = a1.toHexString();
    io:println(b1); // @output 929

    testAny(int:toHexString(a1)); // @output 929
}

function testAny(any i) {
    io:println(i);
}

Test-Case: output
Description: Test `toHexString` function result belonging to a type.
Labels: int:toHexString, is-expr, var

public function main() {
    int a1 = -1234;

    io:println(int:toHexString(a1) is string); // @output true

    var b1 = int:toHexString(a1);
    io:println(b1 is string); // @output true
}

Test-Case: output
Description: Test equality with `toHexString` function result.
Labels: int:Signed32, int:toHexString, string

public function main() {
    int a1 = 15;
    int a2 = 0xf;
    int:Signed32 a3 = 0xf;
    string a4 = "f";

    io:println(int:toHexString(a1) == int:toHexString(a2)); // @output true

    io:println(int:toHexString(a2) == int:toHexString(a3)); // @output true

    io:println(int:toHexString(a1) == a4); // @output true
}

Test-Case: output
Description: Test `toHexString` method call as expression in return statement.
Labels: int:toHexString

public function main() {
    io:println(getString(34526)); // @output 86de
}

function getString(int i) returns string {
    return i.toHexString();
}

Test-Case: output
Description: Test `toHexString` method call as expression in list constructor.
Labels: array-type, int:toHexString, list-constructor-expr

public function main() {
    string[] arr = [23.toHexString(), int:toHexString(3452), (0xacd).toHexString()];
    io:println(arr); // @output ["17","d7c","acd"]
}

Test-Case: output
Description: Test `toHexString` method call as expression in method call expression.
Labels: int:toHexString, value:toString()

public function main() {
    io:println(int:toHexString(100).toString()); // @output 64
}

Test-Case: output
Description: Test `toHexString` method call as expression in map constructor.
Labels: int:toHexString, mapping-constructor-expr, map-type, string

public function main() {
    map<string> intMap = {"One": 23.toHexString(), "Two": int:toHexString(0xf)};
    io:println(intMap); // @output {"One":"17","Two":"f"}
}

Test-Case: output
Description: Test `toHexString` method call as expression in additive expression.
Labels: additive-expr, int:toHexString

public function main() {
    string a = int:toHexString(120) + 100.toHexString();
    io:println(a); // @output 7864
}

Test-Case: output
Description: Test `toHexString` method call as expression in if else statement.
Labels: int:toHexString, relational-expr

public function main() {
    compare(25); // @output true
    compare(40); // @output true
    compare(60); // @output true
}

function compare(int i) {
    if int:toHexString(i) < "1e" {
        io:println(int:toHexString(i) < "1e");
    } else if i.toHexString() < "32" {
        io:println(i.toHexString() < "32");
    } else {
        io:println(i.toHexString() > "32");
    }
}
