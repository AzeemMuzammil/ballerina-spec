Test-Case: error
Description: Test assigning the result of `abs` function to an incompatible type.
Labels: int:abs, function-call-expr, DecimalNumber, int, int:Signed8, string, method-call-expr, unary-minus

function errorFunction(int a) {
    int:Signed8 _ = a.abs(); // @error expects a int:Signed8 value, but abs() returns an int

    string _ = a.abs(); // @error expects a string value, but abs() returns an int

    string _ = int:abs(-10); // @error expects a string value, but abs() returns an int
}

Test-Case: error
Description: Test passing invalid value to `abs` function.
Labels: int:abs, float, function-call-expr, int, string, method-call-expr

function errorFunction(float a) {
    int b1 = a.abs(); // @error expects an int value to be operated on

    b1 = int:abs("ABC"); // @error expects an int value to be operated on

    b1 = 10.23.abs(); // @error expects an int value to be operated on

    b1 = "ABC".abs(); // @error abs() is not defined for string
}

Test-Case: error
Description: Test missing required parameter in `abs` function call.
Labels: int:abs, function-call-expr, int

function errorFunction() {
    int _ = int:abs(); // @error missing value to be operated on
}
