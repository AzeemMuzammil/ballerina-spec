Test-Case: error
Description: Test passing invalid value to `fromHexString` function.
Labels: int:fromHexString, error, float, function-call-expr, int, string, union-type

function errorFunction(float a, string|int b) {
    int|error b1 = int:fromHexString(a); // @error float is not a subtype of string

    b1 = int:fromHexString(b); // @error (string|int) is not a subtype of string

    b1 = int:fromHexString(12d); // @error decimal is not a subtype of string
}

Test-Case: error
Description: Test assigning the result of `fromHexString` function to an incompatible type.
Labels: int:fromHexString, error, function-call-expr, int, int:Signed32, string, union-type

function errorFunction() {
    int _ = int:fromHexString("100"); // @error expects an int, but fromHexString() returns (int|error)

    int:Signed32|error _ = int:fromHexString("100"); // @error expects a (int:Signed32|error), but fromHexString() returns (int|error)
}

Test-Case: error
Description: Test incorrect `fromHexString` function call.
Labels: int:fromHexString, any, error, function-call-expr, string, union-type

function errorFunction(string a, any b) {
    int|error _ = a.fromHexString(); // @error fromHexString() is not defined for string

    int|error _ = b.fromHexString(); // @error fromHexString() is not defined for any
}

Test-Case: error
Description: Test missing required parameter in `fromHexString` function call.
Labels: int:fromHexString, error, function-call-expr, union-type

function errorFunction() {
    int|error _ = int:fromHexString(); // @error missing string argument
}

Test-Case: error
Description: Test passing too many arguments to `fromHexString`.
Labels: int:fromHexString, error, function-call-expr, int, string, union-type

function errorFunction(string a) {
    int|error _ = int:fromHexString(a, a); // @error too many arguments
}
