Test-Case: error
Description: Test passing invalid value to `fromHexString` function.
Labels: error, float, function-call-expr, int:fromHexString, string, union-type

public function main() {
    float a1 = 10.5;
    string|int a2 = "ABC";

    int|error b1 = int:fromHexString(a1); // @error float is not a subtype of string

    b1 = int:fromHexString(a2); // @error (string|int) is not a subtype of string

    b1 = int:fromHexString(12d); // @error decimal is not a subtype of string
}

Test-Case: error
Description: Test assigning the result of `fromHexString` function to an incompatible type.
Labels: error, function-call-expr, int:fromHexString, int:Signed32, string, union-type

public function main() {
    int b1 = int:fromHexString("100"); // @error expects an int, but fromHexString() returns (int|error)

    int:Signed32|error b2 = int:fromHexString("100"); // @error expects a (int:Signed32|error), but fromHexString() returns (int|error)
}

Test-Case: error
Description: Test incorrect `fromHexString` function call.
Labels: any, error, function-call-expr, int:fromHexString, string, union-type

public function main() {
    string a1 = "1234";
    any a2 = "1234";

    int|error b1 = a1.fromHexString(); // @error fromHexString() is not defined for string

    int|error b2 = a2.fromHexString(); // @error fromHexString() is not defined for any
}

Test-Case: error
Description: Test missing required parameter in `fromHexString` function call.
Labels: error, function-call-expr, int:fromHexString, union-type

public function main() {
    int|error b1 = int:fromHexString(); // @error missing string argument
}

Test-Case: error
Description: Test passing too many arguments to `fromHexString`.
Labels: error, function-call-expr, int:fromHexString, string, union-type

public function main() {
    string a1 = "1234";
    int|error b1 = int:fromHexString(a1, a2); // @error too many arguments
}
