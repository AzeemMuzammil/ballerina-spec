Test-Case: output
Description: Test `abs` function with type Signed32.
Labels: int:abs, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed32, method-call-expr, unary-minus

function init() {
    int:Signed32 a1 = -2147483648;
    int:Signed32 a2 = -1234;
    int:Signed32 a3 = 1234;
    int:Signed32 a4 = 2147483647;
    int:Signed32 a5 = 0xffecda;
    int:Signed32 a6 = -0x123fAbCD;

    int b1 = a1.abs();
    testInt(b1); // @output 2147483648

    testInt(a2.abs()); // @output 1234

    int b2 = int:abs(a3);
    testInt(b2); // @output 1234

    int b3 = a4.abs();
    testInt(b3); // @output 2147483647

    testInt(a5.abs()); // @output 16772314

    testInt(int:abs(a6)); // @output 306162637
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `abs` function with type Signed16.
Labels: int:abs, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed16, method-call-expr, unary-minus

function init() {
    int:Signed16 a1 = -32768;
    int:Signed16 a2 = -1234;
    int:Signed16 a3 = 1234;
    int:Signed16 a4 = 32767;
    int:Signed16 a5 = 0xacd;
    int:Signed16 a6 = -0x4FEa;

    int b1 = a1.abs();
    testInt(b1); // @output 32768

    testInt(a2.abs()); // @output 1234

    int b2 = int:abs(a3);
    testInt(b2); // @output 1234

    int b3 = a4.abs();
    testInt(b3); // @output 32767

    testInt(int:abs(a5)); // @output 2765

    testInt(a6.abs()); // @output 20458
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `abs` function with type Signed8.
Labels: int:abs, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Signed8, method-call-expr, unary-minus

function init() {
    int:Signed8 a1 = -128;
    int:Signed8 a2 = -10;
    int:Signed8 a3 = 8;
    int:Signed8 a4 = 127;
    int:Signed8 a5 = 0x7d;
    int:Signed8 a6 = -0x7a;

    int b1 = a1.abs();
    testInt(b1); // @output 128

    testInt(a2.abs()); // @output 10

    int b2 = int:abs(a3);
    testInt(b2); // @output 8

    int b3 = a4.abs();
    testInt(b3); // @output 127

    testInt(int:abs(a5)); // @output 125

    testInt(a6.abs()); // @output 122
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `abs` function with type Unsigned32.
Labels: int:abs, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Unsigned32, method-call-expr

function init() {
    int:Unsigned32 a1 = 0;
    int:Unsigned32 a2 = 150;
    int:Unsigned32 a3 = 23526165;
    int:Unsigned32 a4 = 4294967295;
    int:Unsigned32 a5 = 0xabc12DE;

    int b1 = a1.abs();
    testInt(b1); // @output 0

    testInt(a2.abs()); // @output 150

    int b2 = int:abs(a3);
    testInt(b2); // @output 23526165

    testInt(int:abs(a4)); // @output 4294967295

    testInt(a5.abs()); // @output 180097758
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `abs` function with type Unsigned16.
Labels: int:abs, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Unsigned16, method-call-expr

function init() {
    int:Unsigned16 a1 = 0;
    int:Unsigned16 a2 = 150;
    int:Unsigned16 a3 = 15431;
    int:Unsigned16 a4 = 65535;
    int:Unsigned16 a5 = 0xfAe1;

    int b1 = a1.abs();
    testInt(b1); // @output 0

    testInt(a2.abs()); // @output 150

    int b2 = int:abs(a3);
    testInt(b2); // @output 15431

    testInt(int:abs(a4)); // @output 65535

    testInt(a5.abs()); // @output 64225
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `abs` function with type Unsigned8.
Labels: int:abs, DecimalNumber, function-call-expr, HexIntLiteral, int, int:Unsigned8, method-call-expr

function init() {
    int:Unsigned8 a1 = 0;
    int:Unsigned8 a2 = 25;
    int:Unsigned8 a3 = 143;
    int:Unsigned8 a4 = 255;
    int:Unsigned8 a5 = 0xa2;

    int b1 = a1.abs();
    testInt(b1); // @output 0

    testInt(a2.abs()); // @output 25

    int b2 = int:abs(a3);
    testInt(b2); // @output 143

    testInt(int:abs(a4)); // @output 255

    testInt(a5.abs()); // @output 162
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `abs` function with type byte.
Labels: int:abs, byte, DecimalNumber, function-call-expr, HexIntLiteral, int, method-call-expr

function init() {
    byte a1 = 0;
    byte a2 = 25;
    byte a3 = 143;
    byte a4 = 255;
    byte a5 = 0xa2;

    int b1 = a1.abs();
    testInt(b1); // @output 0

    testInt(a2.abs()); // @output 25

    int b2 = int:abs(a3);
    testInt(b2); // @output 143

    testInt(int:abs(a4)); // @output 255

    testInt(a5.abs()); // @output 162
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `abs` function with type int.
Labels: int:abs, DecimalNumber, function-call-expr, HexIntLiteral, int, method-call-expr, unary-minus

function init() {
    int a1 = -9223372036854775807;
    int a2 = -736453762;
    int a3 = -120;
    int a4 = 120;
    int a5 = 736453762;
    int a6 = 9223372036854775807;
    int a7 = 0xabcDE12AC5;
    int a8 = -0xabcDE12AC5;

    int b1 = a1.abs();
    testInt(b1); // @output 9223372036854775807

    testInt(a2.abs()); // @output 736453762

    int b2 = int:abs(a3);
    testInt(b2); // @output 120

    testInt(int:abs(a4)); // @output 120

    a5 = a5.abs();
    testInt(a5); // @output 736453762

    a6 = int:abs(a6);
    testInt(a6); // @output 9223372036854775807

    testInt(a7.abs()); // @output 737893493445

    testInt(int:abs(a8)); // @output 737893493445
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `abs` function with int literals.
Labels: int:abs, DecimalNumber, function-call-expr, HexIntLiteral, int, method-call-expr, unary-minus

function init() {
    int a1 = (-9223372036854775807).abs();
    testInt(a1); // @output 9223372036854775807

    a1 = (-736453762).abs();
    testInt(a1); // @output 736453762

    a1 = int:abs(-120);
    testInt(a1); // @output 120

    int a2 = (120).abs();
    testInt(a2); // @output 120

    a2 = (736453762).abs();
    testInt(a2); // @output 736453762

    a2 = int:abs(9223372036854775807);
    testInt(a2); // @output 9223372036854775807

    testInt((0xfAe1).abs()); // @output 64225

    testInt(int:abs(-0x4FEa)); // @output 20458
}

function testInt(int i) {
    io:println(i);
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-platform/ballerina-lang#32590
Labels: int:abs, additive-expr, DecimalNumber, int, method-call-expr, unary-minus

function init() {
    int a1 = -9223372036854775807 - 1;
    int b1 = a1.abs(); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-platform/ballerina-lang#32590
Labels: int:abs, additive-expr, DecimalNumber, function-call-expr, int, unary-minus

function init() {
    int a1 = -9223372036854775807 - 1;
    int b1 = int:abs(a1); // @panic int range overflow
}

Test-Case: panic
Description: Test int range overflow with `abs` function.
Fail-Issue: ballerina-platform/ballerina-lang#32590
Labels: int:abs, additive-expr, DecimalNumber, int, method-call-expr, unary-minus

function init() {
    int a1 = (-9223372036854775807 - 1).abs(); // @panic int range overflow
}

Test-Case: output
Description: Test `abs` function with user-defined subtypes of int.
Labels: int:abs, DecimalNumber, function-call-expr, int, method-call-expr, module-const-decl, module-type-defn,
        union-type, unary-minus, singleton-type

const A = -10;
const B = -20;

type IntType1 -10|-20|-30;

type IntType2 A|B;

type IntType3 IntType1|IntType2;

function init() {
    A a1 = -10;
    IntType1 a2 = -30;
    IntType2 a3 = -20;
    IntType3 a4 = -10;

    int b1 = int:abs(a1);
    testInt(b1); // @output 10

    b1 = a2.abs();
    testInt(b1); // @output 30

    testInt(B.abs()); // @output 20

    testInt(a3.abs()); // @output 20

    testInt(int:abs(a4)); // @output 10
}

function testInt(int i) {
    io:println(i);
}

Test-Case: output
Description: Test `abs` function with user-defined subtypes of int.
Fail-Issue: ballerina-platform/ballerina-lang#32620
Labels: int:abs, DecimalNumber, int, int:Signed8, int:Unsigned32, module-type-defn, type-reference, method-call-expr

type IntType int:Signed8|int:Unsigned32;

function init() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    IntType a2 = 4563;

    int b1 = a1.abs();
    b1 = a2.abs();
}

Test-Case: output
Description: Test `abs` function with int subtypes.
Fail-Issue: ballerina-platform/ballerina-lang#32620
Labels: int:abs, DecimalNumber, function-call-expr, int, int:Signed8, int:Unsigned32

function init() {
    int:Signed8|int:Unsigned32 a1 = 235262;
    int b1 = int:abs(a1);
}

Test-Case: output
Description: Test `abs` function with user-defined subtypes of int.
Fail-Issue: ballerina-platform/ballerina-lang#32620
Labels: int:abs, DecimalNumber, function-call-expr, int, int:Signed8, int:Unsigned32, module-type-defn, union-type

type IntType int:Signed8|int:Unsigned32;

function init() {
    IntType a1 = 4563;
    int b1 = int:abs(a1);
}

Test-Case: output
Description: Test assignability of `abs` function result with compatible types.
Labels: int:abs, any, DecimalNumber, function-call-expr, int, method-call-expr, optional-type, string,
        union-type, unary-minus

function init() {
    int a1 = -12536;

    int? b1 = a1.abs();
    io:println(b1); // @output 12536

    int|string b2 = int:abs(a1);
    io:println(b2); // @output 12536

    testAny(a1.abs());
}

function testAny(any i) {
    io:println(i); // @output 12536
}

Test-Case: output
Description: Test assignability of `abs` function result with var.
Labels: int:abs, DecimalNumber, int, is-expr, method-call-expr, unary-minus, var

function init() {
    int a1 = -12536;

    var b1 = a1.abs();
    io:println(b1); // @output 12536
    io:println(b1 is int); // @output true
}

Test-Case: output
Description: Test `abs` function result belonging to a type.
Labels: int:abs, byte, DecimalNumber, function-call-expr, int, int:Signed8, int:Signed16, int:Signed32,
        int:Unsigned8, int:Unsigned16, int:Unsigned32, is-expr, method-call-expr, unary-minus

function init() {
    int a1 = -736453762;

    io:println(a1.abs() is int); // @output true

    io:println(int:abs(a1) is int); // @output true

    io:println(-25.abs() is int:Signed8); // @output true

    io:println(-25.abs() is int:Signed16); // @output true

    io:println(int:abs(a1) is int:Signed32); // @output true

    io:println(int:abs(-25) is int:Unsigned8); // @output true

    io:println((-25).abs() is byte); // @output true

    io:println((0xfe).abs() is int:Unsigned16); // @output true

    io:println(a1.abs() is int:Unsigned32); // @output true
}

Test-Case: output
Description: Test equality with `abs` function result.
Labels: int:abs, byte, DecimalNumber, equality, function-call-expr, int, method-call-expr, unary-minus

function init() {
    int a1 = -25;
    byte a2 = 25;
    int a3 = 11100;
    int:Signed32 a4 = 0x2B5c;
    int:Signed16 a5 = -0x2B5c;

    int b1 = a1.abs();
    int b2 = a2.abs();

    io:println(b1 == b2); // @output true

    b1 = int:abs(a1);
    b2 = int:abs(a2);

    io:println(b1 == b2); // @output true

    io:println(a1.abs() == a2.abs()); // @output true

    io:println(int:abs(a1) == int:abs(a2)); // @output true

    io:println(int:abs(a3) == a5.abs()); // @output true

    io:println(a4.abs() == int:abs(a5)); // @output true

    io:println(a1.abs() != a3.abs()); // @output true

    io:println(int:abs(a2) != int:abs(a3)); // @output true
}

Test-Case: output
Description: Test chained `abs` function.
Labels: int:abs, DecimalNumber, function-call-expr, int method-call-expr, unary-minus

function init() {
    int a1 = -736453762;

    int b1 = a1.abs().abs().abs();
    io:println(b1); // @output 736453762

    io:println(int:abs(int:abs(a1).abs())); // @output 736453762

    io:println(int:abs(-0x123Acd).abs()); // @output 1194701
}

Test-Case: output
Description: Test `abs` method call as expression in return statement.
Labels: int:abs, DecimalNumber, function-call-expr, int, method-call-expr, unary-minus

function init() {
    io:println(getAbs(-1234)); // @output 1234
}

function getAbs(int i) returns int {
    return i.abs();
}

Test-Case: output
Description: Test `abs` method call as expression in list constructor.
Labels: int:abs, array-type, DecimalNumber, function-call-expr, HexIntLiteral, int, list-constructor-expr, unary-minus

function init() {
    int[] arr = [23.abs(), int:abs(-12), (0xacd).abs()];
    io:println(arr); // @output [23,12,2765]
}

Test-Case: output
Description: Test `abs` method call as expression in method call expression.
Labels: int:abs, DecimalNumber, function-call-expr, value:toString(), unary-minus

function init() {
    io:println(int:abs(-90).toString()); // @output 90
}

Test-Case: output
Description: Test `abs` method call as expression in map constructor.
Labels: int:abs, DecimalNumber, function-call-expr, mapping-constructor-expr, map-type, string,
        method-call-expr, unary-minus

function init() {
    map<int> intMap = {"One": 23.abs(), "Two": int:abs(-30)};
    io:println(intMap); // @output {"One":23,"Two":30}
}

Test-Case: output
Description: Test `abs` method call as expression in additive expression.
Labels: int:abs, additive-expr, DecimalNumber, method-call-expr, unary-minus

function init() {
    int a = int:abs(-30) + 100.abs();
    io:println(a); // @output 3000
}

Test-Case: output
Description: Test `abs` method call as expression in if else statement.
Labels: int:abs, DecimalNumber, function-call-expr, method-call-expr, relational-expr, unary-minus

function init() {
    compare(-20); // @output true
    compare(-30); // @output true
    compare(-50); // @output true
}

function compare(int i) {
    if int:abs(i) < 30 {
        io:println(int:abs(i) < 30);
    } else if (i.abs() < 40) {
        io:println(i.abs() < 40);
    } else {
        io:println(i.abs() > 40);
    }
}
