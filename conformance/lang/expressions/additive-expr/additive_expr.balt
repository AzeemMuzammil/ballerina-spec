Test-Case: error
Description: Test additive expression with static type of operands belonging to different basic types
             resulting in an error.
Labels: additive-expr, decimal, float, int

public function main(int a, float b, decimal c) {
    int _ = a + b; // @error + is not allowed with operands of different basic types
    int _ = a - b; // @error - is not allowed with operands of different basic types
    int _ = a + c; // @error + is not allowed with operands of different basic types
    int _ = a - c; // @error - is not allowed with operands of different basic types

    float _ = b + a; // @error + is not allowed with operands of different basic types
    float _ = b - a; // @error - is not allowed with operands of different basic types
    float _ = b + c; // @error + is not allowed with operands of different basic types
    float _ = b - c; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static type of operands belonging to different basic types
             resulting in an error.
Fail-Issue: ballerina-lang#32940
Labels: additive-expr, decimal, float, int
// incompatible types: expected 'decimal', found 'int'
// incompatible types: expected 'decimal', found 'float'

public function main(int a, float b, decimal c) {
    decimal _ = c + a; // @error + is not allowed with operands of different basic types
    decimal _ = c - a; // @error - is not allowed with operands of different basic types
    decimal _ = c + b; // @error + is not allowed with operands of different basic types
    decimal _ = c - b; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static type of operands belonging to different nillable
             basic types resulting in an error.
Labels: additive-expr, decimal, float, int, numeric-nil-lifting, optional-type

public function main(int? a, float? b, decimal? c) {
    int? _ = a + b; // @error + is not allowed with operands of different basic types
    int? _ = a - b; // @error - is not allowed with operands of different basic types
    int? _ = a + c; // @error + is not allowed with operands of different basic types
    int? _ = a - c; // @error - is not allowed with operands of different basic types

    float? _ = b + a; // @error + is not allowed with operands of different basic types
    float? _ = b - a; // @error - is not allowed with operands of different basic types
    float? _ = b + c; // @error + is not allowed with operands of different basic types
    float? _ = b - c; // @error - is not allowed with operands of different basic types

    decimal? _ = c + a; // @error + is not allowed with operands of different basic types
    decimal? _ = c - a; // @error - is not allowed with operands of different basic types
    decimal? _ = c + b; // @error + is not allowed with operands of different basic types
    decimal? _ = c - b; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static type of operands belonging to different nillable and
             non-nillable basic types resulting in an error.
Labels: additive-expr, decimal, float, int, numeric-nil-lifting, optional-type

public function main(int a, float b, int? c, float? d, decimal? e) {
    int _ = a + d; // @error + is not allowed with operands of different basic types
    int _ = a - d; // @error - is not allowed with operands of different basic types
    int _ = a + e; // @error + is not allowed with operands of different basic types
    int _ = a - e; // @error - is not allowed with operands of different basic types

    float _ = b + c; // @error + is not allowed with operands of different basic types
    float _ = b - c; // @error - is not allowed with operands of different basic types
    float _ = b + e; // @error + is not allowed with operands of different basic types
    float _ = b - e; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static type of operands belonging to different nillable and
             non-nillable basic types resulting in an error.
Fail-Issue: ballerina-lang#32940
Labels: additive-expr, decimal, float, int, numeric-nil-lifting, optional-type
// incompatible types: expected 'decimal', found 'int?'
// incompatible types: expected 'decimal', found 'float?'

public function main(decimal a, int? b, float? c) {
    decimal _ = a + b; // @error + is not allowed with operands of different basic types
    decimal _ = a - b; // @error - is not allowed with operands of different basic types
    decimal _ = a + c; // @error + is not allowed with operands of different basic types
    decimal _ = a - c; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static type of operands belonging to numeric and non-numeric basic types
             resulting in an error.
Labels: additive-expr, decimal, float, int, optional-type, numeric-nil-lifting, string

public function main(int a, float b, int? c, float? d, decimal? e, string f, string? g) {
    int _ = a + f; // @error + is not allowed with operands of different basic types
    int _ = a - f; // @error - is not allowed with operands of different basic types
    int _ = a + g; // @error + is not allowed with operands of different basic types
    int _ = a - g; // @error - is not allowed with operands of different basic types

    float _ = b + f; // @error + is not allowed with operands of different basic types
    float _ = b - f; // @error - is not allowed with operands of different basic types
    float _ = b + g; // @error + is not allowed with operands of different basic types
    float _ = b - g; // @error - is not allowed with operands of different basic types

    int? _ = c + f; // @error + is not allowed with operands of different basic types
    int? _ = c - f; // @error - is not allowed with operands of different basic types
    int? _ = c + g; // @error + is not allowed with operands of different basic types
    int? _ = c - g; // @error - is not allowed with operands of different basic types

    float? _ = d + f; // @error + is not allowed with operands of different basic types
    float? _ = d - f; // @error - is not allowed with operands of different basic types
    float? _ = d + g; // @error + is not allowed with operands of different basic types
    float? _ = d - g; // @error - is not allowed with operands of different basic types

    decimal? _ = e + f; // @error + is not allowed with operands of different basic types
    decimal? _ = e - f; // @error - is not allowed with operands of different basic types
    decimal? _ = e + g; // @error + is not allowed with operands of different basic types
    decimal? _ = e - g; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static type of operands belonging to numeric and non-numeric basic types
             resulting in an error.
Fail-Issue: ballerina-lang#32940
Labels: additive-expr, decimal, optional-type, string
// incompatible types: expected 'decimal', found 'string'
// incompatible types: expected 'decimal', found 'string?'

public function main(decimal a, string b, string? c) {
    decimal _ = a + b; // @error + is not allowed with operands of different basic types
    decimal _ = a - b; // @error - is not allowed with operands of different basic types
    decimal _ = a + c; // @error + is not allowed with operands of different basic types
    decimal _ = a - c; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test additive expression with static type of operands belonging to different basic types resulting in an error
             when the static type of at least one operand is a subtype of a numeric type.
Labels: additive-expr, byte, decimal, float, floating-point-literal, int, int-literal, int:Signed8,
        int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, module-type-defn,
        numeric-literal, numeric-nil-lifting, optional-type, singleton-type, union-type

type Ints 1|2;
type Floats 2.0|3.0|4.0;
type Decimals 1d|4.12d;

public function main(int:Signed8 a, int:Signed16 b, int:Signed32 c, int:Unsigned8 d, int:Unsigned16 e,
                     int:Unsigned32 f, byte g, Ints h, Floats i, Decimals j, int:Unsigned8? k,
                     Ints? l, Floats? m, Decimals? n) {
    int:Signed8 _ = a + i; // @error + is not allowed with operands of different basic types
    int _ = a - j; // @error - is not allowed with operands of different basic types
    int _ = a + m; // @error + is not allowed with operands of different basic types
    int _ = a - n; // @error - is not allowed with operands of different basic types

    int:Signed16 v = b + i; // @error + is not allowed with operands of different basic types
    int _ = b - j; // @error - is not allowed with operands of different basic types
    int _ = b + m; // @error + is not allowed with operands of different basic types
    int _ = b - n; // @error - is not allowed with operands of different basic types

    int:Signed32 _ = c + i; // @error + is not allowed with operands of different basic types
    int _ = c - j; // @error - is not allowed with operands of different basic types
    int _ = c + m; // @error + is not allowed with operands of different basic types
    int _ = c - n; // @error - is not allowed with operands of different basic types

    int:Unsigned8 _ = d + i; // @error + is not allowed with operands of different basic types
    int _ = d - j; // @error - is not allowed with operands of different basic types
    int _ = d + m; // @error + is not allowed with operands of different basic types
    int _ = d - n; // @error - is not allowed with operands of different basic types

    int:Unsigned16 _ = e + i; // @error + is not allowed with operands of different basic types
    int _ = e - j; // @error - is not allowed with operands of different basic types
    int _ = e + m; // @error + is not allowed with operands of different basic types
    int _ = e - n; // @error - is not allowed with operands of different basic types

    int:Unsigned32 _ = f + i; // @error + is not allowed with operands of different basic types
    int _ = f - j; // @error - is not allowed with operands of different basic types
    int _ = f + m; // @error + is not allowed with operands of different basic types
    int _ = f - n; // @error - is not allowed with operands of different basic types

    byte _ = g + i; // @error + is not allowed with operands of different basic types
    int _ = g - j; // @error - is not allowed with operands of different basic types
    int _ = g + m; // @error + is not allowed with operands of different basic types
    int _ = g - n; // @error - is not allowed with operands of different basic types

    Ints _ = h + i; // @error + is not allowed with operands of different basic types
    int _ = h - j; // @error - is not allowed with operands of different basic types
    int _ = h + m; // @error + is not allowed with operands of different basic types
    int _ = h - n; // @error - is not allowed with operands of different basic types

    Floats _ = i + j; // @error + is not allowed with operands of different basic types
    float _ = i - k; // @error - is not allowed with operands of different basic types
    float _ = i + l; // @error + is not allowed with operands of different basic types
    float _ = i - n; // @error - is not allowed with operands of different basic types

    Decimals a37 = j + k; // @error + is not allowed with operands of different basic types
    decimal? a38 = j - l; // @error - is not allowed with operands of different basic types
    decimal? a39 = j + m; // @error + is not allowed with operands of different basic types
    decimal? a40 = j - k; // @error - is not allowed with operands of different basic types
}

Test-Case: error
Description: Test assigning the result of integer addition to an incompatible type.
Labels: additive-expr, DecimalNumber, decimal, float, function-call-expr, int, var

public function main(int a, int b) {
    float _ = a + b; // @error static type of additive-expr with int operands is int

    var a1 = 1 - a;
    decimal _ = a1; // @error static type of additive-expr with int operands is int

    float _ = a - b; // @error static type of additive-expr with int operands is int

    var a2 = getInt(12 - 2) + b;
    float _ = a2; // @error static type of additive-expr with int operands is int
}

function getInt(int i) returns int {
    return i + 1;
}

Test-Case: error
Description: Test assigning the result of float addition to an incompatible type.
Labels: additive-expr, DecimalFloatingPointNumber, decimal, float, function-call-expr, int, var

public function main(float a, float b) {
    int _ = 1.0f + 2.0f; // @error static type of additive-expr with decimal operands is float

    var a1 = 2.0 + 2.1;
    int _ = a1; // @error static type of additive-expr with float operands is float

    var a2 = a - b;
    int _ = a2; // @error static type of additive-expr with float operands is float

    var a3 = a + b;
    decimal _ = a3; // @error static type of additive-expr with float operands is float

    var a4 = a - (getFloat(getFloat(2.0 - b)));
    decimal _ = a4; // @error static type of additive-expr with float operands is float
}

function getFloat(float f) returns float {
    return f - 1f;
}

Test-Case: error
Description: Test assigning the result of decimal addition to an incompatible type.
Labels: additive-expr, DecimalFloatingPointNumber, decimal, float, function-call-expr, int, var

public function main(decimal a, decimal b) {
    float _ = 1d + 2d; // @error static type of additive-expr with decimal operands is decimal
    int _ = 1d - 2d; // @error static type of additive-expr with decimal operands is decimal

    var a1 = a + b;
    float _ = a1; // @error static type of additive-expr with decimal operands is decimal

    var a2 = a - b;
    int _ = a2; // @error static type of additive-expr with decimal operands is decimal

    var a3 = 1d - a;
    float _ = a3; // @error static type of additive-expr with decimal operands is decimal

    var a4 = getDecimal((20d - 2d)) + a;
    int _ = a3; // @error static type of additive-expr with decimal operands is decimal
}

function getDecimal(decimal d) returns decimal {
    return d - 2d;
}

Test-Case: error
Description: Test assigning the result of integer addition with int? to an incompatible type.
Labels: additive-expr, DecimalNumber, function-call-expr, int, numeric-nil-lifting, optional-type

public function main(int a, int? b) {
    int _ = a + b; // @error static type of additive-expr with at least one int? operand is int?
    int _ = getOptionalInt(1 - 2) + b; // @error static type of additive-expr with at least one int? operand is int?
    int _ = b - getOptionalInt(1 + 2); // @error static type of additive-expr with at least one int? operand is int?
    int _ = b + getInt(1); // @error static type of additive-expr with at least one int? operand is int?
}

function getInt(int i) returns int {
    return i - 1;
}

function getOptionalInt(int? i) returns int? {
    return i + 1;
}

Test-Case: error
Description: Test assigning the result of float addition with float? to an incompatible type.
Labels: additive-expr, DecimalFloatingPointNumber, float, function-call-expr, numeric-nil-lifting, optional-type

public function main(float c, float? d) {
    float _ = d + c; // @error static type of additive-expr with at least one float? operand is float?
    float _ = getFloat(2.0) + d; // @error static type of additive-expr with at least one float? operand is float?
    float _ = d + getOptionalFloat(1.0 - 2f); // @error static type of additive-expr with at least one float? operand is float?
    float _ = c - getOptionalFloat(1); // @error static type of additive-expr with at least one float? operand is float?
}

function getFloat(float f) returns float {
    return f + 1f;
}

function getOptionalFloat(float? f) returns float? {
    return f - 1f;
}

Test-Case: error
Description: Test assigning the result of decimal addition with decimal? to an incompatible type.
Fail-Issue: ballerina-lang#32940
Labels: additive-expr, decimal, DecimalFloatingPointNumber, function-call-expr, numeric-nil-lifting, optional-type

public function main(decimal e, decimal? f) {
    decimal _ = e + f; // @error static type of additive-expr with at least one decimal? operand is decimal?
    decimal _ = getOptionalDecimal(1d - 2.0d) + e; // @error static type of additive-expr with at least one decimal? operand is decimal?
    decimal _ = f - getOptionalDecimal(()); // @error static type of additive-expr with at least one decimal? operand is decimal?
    decimal _ = getOptionalDecimal(3) + getDecimal(1); // @error static type of additive-expr with at least one decimal? operand is decimal?
}

function getDecimal(decimal d) returns decimal {
    return d - 2d;
}

function getOptionalDecimal(decimal? d) returns decimal? {
    return d + 2d;
}

Test-Case: error
Description: Test assigning the result of integer addition to a subtype of int.
Labels: additive-expr, byte, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8,
        int:Unsigned16, int:Unsigned32, module-type-defn

type Ints 1|2;

public function main(int:Signed8 a, int:Signed16 b, int:Signed32 c, int:Unsigned8 d, int:Unsigned16 e,
                     int:Unsigned32 f, byte g, Ints h) {

    int:Signed8 _ = a + a; // @error static type of additive-expr with operands of int subtypes is int
    int:Signed8 _ = a - a; // @error static type of additive-expr with operands of int subtypes is int

    int:Signed16 _ = b + b; // @error static type of additive-expr with operands of int subtypes is int
    int:Signed16 _ = b - b; // @error static type of additive-expr with operands of int subtypes is int

    int:Signed32 _ = c + b; // @error static type of additive-expr with operands of int subtypes is int
    int:Signed32 _ = c - c; // @error static type of additive-expr with operands of int subtypes is int

    int:Unsigned8 _ = d + d; // @error static type of additive-expr with operands of int subtypes is int
    int:Unsigned8 _ = d - d; // @error static type of additive-expr with operands of int subtypes is int

    byte _ = b + g; // @error static type of additive-expr with operands of int subtypes is int
    byte _ = b - g; // @error static type of additive-expr with operands of int subtypes is int

    int:Unsigned16 _ = e + e; // @error static type of additive-expr with operands of int subtypes is int
    int:Unsigned16 _ = e - e; // @error static type of additive-expr with operands of int subtypes is int

    int:Unsigned32 _ = f + g; // @error static type of additive-expr with operands of int subtypes is int
    int:Unsigned32 _ = f - f; // @error static type of additive-expr with operands of int subtypes is int

    Ints _ = a + h; // @error static type of additive-expr with operands of int subtypes is int
    Ints _ = d - h; // @error static type of additive-expr with operands of int subtypes is int
}

Test-Case: error
Description: Test assigning the result of addition of nillable integers to a subtype of int?.
Labels: additive-expr, byte, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8,
        int:Unsigned16, int:Unsigned32, module-type-defn, optional-type

type Ints 1|2;

public function main(int:Signed8? a, int:Signed16? b, int:Signed32? c, int:Unsigned8? d, int:Unsigned16? e,
                     int:Unsigned32? f, byte? g, Ints? h) {

    int:Signed8? _ = a + a; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Signed8? _ = a - a; // @error static type of additive-expr with at least one operand of subtype of int? is int?

    int:Signed16? _ = b + b; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Signed16? _ = b - b; // @error static type of additive-expr with at least one operand of subtype of int? is int?

    int:Signed32? _ = c + b; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Signed32? _ = c - c; // @error static type of additive-expr with at least one operand of subtype of int? is int?

    int:Unsigned8? _ = d + d; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Unsigned8? _ = d - d; // @error static type of additive-expr with at least one operand of subtype of int? is int?

    byte? _ = b + g; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    byte? _ = b - g; // @error static type of additive-expr with at least one operand of subtype of int? is int?

    int:Unsigned16? _ = e + e; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Unsigned16? _ = e - e; // @error static type of additive-expr with at least one operand of subtype of int? is int?

    int:Unsigned32? _ = f + g; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    int:Unsigned32? _ = f - f; // @error static type of additive-expr with at least one operand of subtype of int? is int?

    Ints? _ = a + h; // @error static type of additive-expr with at least one operand of subtype of int? is int?
    Ints? _ = d - h; // @error static type of additive-expr with at least one operand of subtype of int? is int?
}

Test-Case: error
Description: Test assigning the result of float addition to a subtype of float.
Labels: additive-expr, DecimalFloatingPointNumber, float, module-type-defn

type Floats 10.0|20f;

public function main(Floats a, float b) {
    Floats _ = a + b; // @error static type of additive-expr with operands of float subtypes is float
    Floats _ = a - b; // @error static type of additive-expr with operands of float subtypes is float
    Floats _ = a + a; // @error static type of additive-expr with operands of float subtypes is float
    Floats _ = b - b; // @error static type of additive-expr with operands of float subtypes is float
}

Test-Case: error
Description: Test assigning the result of addition of nillable floats to a subtype of float?.
Labels: additive-expr, DecimalFloatingPointNumber, float, module-type-defn, numeric-nil-lifting, optional-type

type Floats 10.0|20f;

public function main(Floats? a, float? b) {
    Floats? _ = a + b; // @error static type of additive-expr with at least one operand of subtype of float? is float?
    Floats? _ = a - b; // @error static type of additive-expr with at least one operand of subtype of float? is float?
    Floats? _ = a + a; // @error static type of additive-expr with at least one operand of subtype of float? is float?
    Floats? _ = b - b; // @error static type of additive-expr with at least one operand of subtype of float? is float?
}

Test-Case: error
Description: Test assigning the result of decimal addition to a subtype of decimal.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, module-type-defn

type Decimals 10.0d|20d;

public function main(Decimals a, decimal b) {
    Decimals _ = a + b; // @error static type of additive-expr with operands of decimal subtypes is decimal
    Decimals _ = a - b; // @error static type of additive-expr with operands of decimal subtypes is decimal
    Decimals _ = a + a; // @error static type of additive-expr with operands of decimal subtypes is decimal
    Decimals _ = b - b; // @error static type of additive-expr with operands of decimal subtypes is decimal
}

Test-Case: error
Description: Test assigning the result of addition of nillable decimals to a subtype of decimal?.
Labels: additive-expr, decimal, DecimalFloatingPointNumber, module-type-defn, numeric-nil-lifting, optional-type

type Decimals 10.0d|20d;

public function main(Decimals? a, decimal? b) {
    Decimals? _ = a + b; // @error static type of additive-expr with at least one operand of subtype of decimal? is decimal?
    Decimals? _ = a - b; // @error static type of additive-expr with at least one operand of subtype of decimal? is decimal?
    Decimals? _ = a + a; // @error static type of additive-expr with at least one operand of subtype of decimal? is decimal?
    Decimals? _ = b - b; // @error static type of additive-expr with at least one operand of subtype of decimal? is decimal?
}

Test-Case: parser-error
Description: Test syntax errors in additive expression
Label: additive-expr

public function main() {
    int _ = 12 + ; // @error missing RHS operand
}
