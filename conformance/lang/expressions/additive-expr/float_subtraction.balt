Test-Case: output
Description: Test float subtraction with positive floats.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatTypeSuffix, unary-plus

function init() {
    float a1 = +0.0f;
    float a2 = 4.9E-324;
    float a3 = 124;
    float a4 = 75647.096547382f;
    float a5 = +4657382.1234;
    float a6 = 1.7976931348623157E308;
    float a7 = 25.E1742f;

    io:println(a1 - a1); // @output 0.0
    io:println(a1 - a2); // @output -4.9E-324
    io:println(a1 - a3); // @output -124.0
    io:println(a1 - a4); // @output -75647.096547382
    io:println(a1 - a5); // @output -4657382.1234
    io:println(a1 - a6); // @output -1.7976931348623157E308
    io:println(a1 - a7); // @output -Infinity

    io:println(a2 - a1); // @output 4.9E-324
    io:println(a2 - a2); // @output 0.0
    io:println(a2 - a3); // @output -124.0
    io:println(a2 - a4); // @output -75647.096547382
    io:println(a2 - a5); // @output -4657382.1234
    io:println(a2 - a6); // @output -1.7976931348623157E308
    io:println(a2 - a7); // @output -Infinity

    io:println(a3 - a1); // @output 124.0
    io:println(a3 - a2); // @output 124.0
    io:println(a3 - a3); // @output 0.0
    io:println(a3 - a4); // @output -75523.096547382
    io:println(a3 - a5); // @output -4657258.1234
    io:println(a3 - a6); // @output -1.7976931348623157E308
    io:println(a3 - a7); // @output -Infinity

    io:println(a4 - a1); // @output 75647.096547382
    io:println(a4 - a2); // @output 75647.096547382
    io:println(a4 - a3); // @output 75523.096547382
    io:println(a4 - a4); // @output 0.0
    io:println(a4 - a5); // @output -4581735.026852618
    io:println(a4 - a6); // @output -1.7976931348623157E308
    io:println(a4 - a7); // @output -Infinity

    io:println(a5 - a1); // @output 4657382.1234
    io:println(a5 - a2); // @output 4657382.1234
    io:println(a5 - a3); // @output 4657258.1234
    io:println(a5 - a4); // @output 4581735.026852618
    io:println(a5 - a5); // @output 0.0
    io:println(a5 - a6); // @output -1.7976931348623157E308
    io:println(a5 - a7); // @output -Infinity

    io:println(a6 - a1); // @output 1.7976931348623157E308
    io:println(a6 - a2); // @output 1.7976931348623157E308
    io:println(a6 - a3); // @output 1.7976931348623157E308
    io:println(a6 - a4); // @output 1.7976931348623157E308
    io:println(a6 - a5); // @output 1.7976931348623157E308
    io:println(a6 - a6); // @output 0.0
    io:println(a6 - a7); // @output -Infinity

    io:println(a7 - a1); // @output Infinity
    io:println(a7 - a2); // @output Infinity
    io:println(a7 - a3); // @output Infinity
    io:println(a7 - a4); // @output Infinity
    io:println(a7 - a5); // @output Infinity
    io:println(a7 - a6); // @output Infinity
    io:println(a7 - a7); // @output NaN
}

Test-Case: output
Description: Test float subtraction with negative floats.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatTypeSuffix, unary-minus

function init() {
    float a1 = -0.0f;
    float a2 = -4.9E-324;
    float a3 = -124;
    float a4 = -75647.096547382f;
    float a5 = -4657382.1234;
    float a6 = -1.7976931348623157E308;
    float a7 = -25.E1742f;

    io:println(a1 - a1); // @output 0.0
    io:println(a1 - a2); // @output 4.9E-324
    io:println(a1 - a3); // @output 124.0
    io:println(a1 - a4); // @output 75647.096547382
    io:println(a1 - a5); // @output 4657382.1234
    io:println(a1 - a6); // @output 1.7976931348623157E308
    io:println(a1 - a7); // @output Infinity

    io:println(a2 - a1); // @output -4.9E-324
    io:println(a2 - a2); // @output 0.0
    io:println(a2 - a3); // @output 124.0
    io:println(a2 - a4); // @output 75647.096547382
    io:println(a2 - a5); // @output 4657382.1234
    io:println(a2 - a6); // @output 1.7976931348623157E308
    io:println(a2 - a7); // @output Infinity

    io:println(a3 - a1); // @output -124.0
    io:println(a3 - a2); // @output -124.0
    io:println(a3 - a3); // @output 0.0
    io:println(a3 - a4); // @output 75523.096547382
    io:println(a3 - a5); // @output 4657258.1234
    io:println(a3 - a6); // @output 1.7976931348623157E308
    io:println(a3 - a7); // @output Infinity

    io:println(a4 - a1); // @output -75647.096547382
    io:println(a4 - a2); // @output -75647.096547382
    io:println(a4 - a3); // @output -75523.096547382
    io:println(a4 - a4); // @output 0.0
    io:println(a4 - a5); // @output 4581735.026852618
    io:println(a4 - a6); // @output 1.7976931348623157E308
    io:println(a4 - a7); // @output Infinity

    io:println(a5 - a1); // @output -4657382.1234
    io:println(a5 - a2); // @output -4657382.1234
    io:println(a5 - a3); // @output -4657258.1234
    io:println(a5 - a4); // @output -4581735.026852618
    io:println(a5 - a5); // @output 0.0
    io:println(a5 - a6); // @output 1.7976931348623157E308
    io:println(a5 - a7); // @output Infinity

    io:println(a6 - a1); // @output -1.7976931348623157E308
    io:println(a6 - a2); // @output -1.7976931348623157E308
    io:println(a6 - a3); // @output -1.7976931348623157E308
    io:println(a6 - a4); // @output -1.7976931348623157E308
    io:println(a6 - a5); // @output -1.7976931348623157E308
    io:println(a6 - a6); // @output 0.0
    io:println(a6 - a7); // @output Infinity

    io:println(a7 - a1); // @output -Infinity
    io:println(a7 - a2); // @output -Infinity
    io:println(a7 - a3); // @output -Infinity
    io:println(a7 - a4); // @output -Infinity
    io:println(a7 - a5); // @output -Infinity
    io:println(a7 - a6); // @output -Infinity
    io:println(a7 - a7); // @output NaN
}

Test-Case: output
Description: Test float subtraction when one operand is negative and the other is positive float.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatTypeSuffix, unary-minus, unary-plus

function init() {
    float a1 = -25.E1742f;
    float a2 = -2.345e02;
    float a3 = -12423.23;
    float a4 = -10.746;
    float a5 = 30.25453213;
    float a6 = +235462;
    float a7 = 2.345e02;
    float a8 = 25.E1742f;

    io:println(a1 - a5); // @output -Infinity
    io:println(a1 - a6); // @output -Infinity
    io:println(a1 - a7); // @output -Infinity
    io:println(a1 - a8); // @output -Infinity

    io:println(a2 - a5); // @output -264.75453213000003
    io:println(a2 - a6); // @output -235696.5
    io:println(a2 - a7); // @output -469.0
    io:println(a2 - a8); // @output -Infinity

    io:println(a3 - a5); // @output -12453.48453213
    io:println(a3 - a6); // @output -247885.23
    io:println(a3 - a7); // @output -12657.73
    io:println(a3 - a8); // @output -Infinity

    io:println(a4 - a5); // @output -41.00053213
    io:println(a4 - a6); // @output -235472.746
    io:println(a4 - a7); // @output -245.246
    io:println(a4 - a8); // @output -Infinity

    io:println(a5 - a1); // @output Infinity
    io:println(a5 - a2); // @output 264.75453213000003
    io:println(a5 - a3); // @output 12453.48453213
    io:println(a5 - a4); // @output 41.00053213

    io:println(a6 - a1); // @output Infinity
    io:println(a6 - a2); // @output 235696.5
    io:println(a6 - a3); // @output 247885.23
    io:println(a6 - a4); // @output 235472.746

    io:println(a7 - a1); // @output Infinity
    io:println(a7 - a2); // @output 469.0
    io:println(a7 - a3); // @output 12657.73
    io:println(a7 - a4); // @output 245.246

    io:println(a8 - a1); // @output Infinity
    io:println(a8 - a2); // @output Infinity
    io:println(a8 - a3); // @output Infinity
    io:println(a8 - a4); // @output Infinity
}

Test-Case: output
Description: Test float subtraction with hex floating point literals.
Labels: additive-expr, HexFloatingPointLiteral, float, unary-minus

function init() {
    float a1 = -0x1.d5p7;
    float a2 = -0x1.8439d70a2d70ap13;
    float a3 = -0x1.57df3b645a1cbp3;
    float a4 = 0x1.e412904862198p4;
    float a5 = 0x1.cbe3p17;
    float a6 = 0x1.d5p7;

    io:println(a1 - a1); // @output 0.0
    io:println(a1 - a2); // @output 12188.72999988079
    io:println(a1 - a3); // @output -223.754
    io:println(a1 - a4); // @output -264.75453213000003
    io:println(a1 - a5); // @output -235696.5
    io:println(a1 - a6); // @output -469.0

    io:println(a2 - a1); // @output -12188.72999988079
    io:println(a2 - a2); // @output 0.0
    io:println(a2 - a3); // @output -12412.483999880791
    io:println(a2 - a4); // @output -12453.48453201079
    io:println(a2 - a5); // @output -247885.2299998808
    io:println(a2 - a6); // @output -12657.72999988079

    io:println(a3 - a1); // @output 223.754
    io:println(a3 - a2); // @output 12412.483999880791
    io:println(a3 - a3); // @output 0.0
    io:println(a3 - a4); // @output -41.00053213
    io:println(a3 - a5); // @output -235472.746
    io:println(a3 - a6); // @output -245.246

    io:println(a4 - a1); // @output 264.75453213000003
    io:println(a4 - a2); // @output 12453.48453201079
    io:println(a4 - a3); // @output 41.00053213
    io:println(a4 - a4); // @output 0.0
    io:println(a4 - a5); // @output -235431.74546787
    io:println(a4 - a6); // @output -204.24546787

    io:println(a5 - a1); // @output 235696.5
    io:println(a5 - a2); // @output 247885.2299998808
    io:println(a5 - a3); // @output 235472.746
    io:println(a5 - a4); // @output 235431.74546787
    io:println(a5 - a5); // @output 0.0
    io:println(a5 - a6); // @output 235227.5

    io:println(a6 - a1); // @output 469.0
    io:println(a6 - a2); // @output 12657.72999988079
    io:println(a6 - a3); // @output 245.246
    io:println(a6 - a4); // @output 204.24546787
    io:println(a6 - a5); // @output -235227.5
    io:println(a6 - a6); // @output 0.0
}

Test-Case: output
Description: Test float subtraction with floating point literals.
Labels: additive-expr, floating-point-literal, FloatTypeSuffix, unary-minus, unary-plus

function init() {
    io:println(-25.E1742f - 30.25453213); // @output -Infinity
    io:println(-25.E1742f - +235462f); // @output -Infinity
    io:println(-25.E1742f - 2.345e02); // @output -Infinity
    io:println(-25.E1742f - 25.E1742f); // @output -Infinity

    io:println(-2.345e02 - 30.25453213); // @output -264.75453213000003
    io:println(-2.345e02 - +235462f); // @output -235696.5
    io:println(-2.345e02 - 2.345e02); // @output -469.0
    io:println(-2.345e02 - 25.E1742f); // @output -Infinity

    io:println(-12423.23 - 30.25453213); // @output -12453.48453213
    io:println(-12423.23 - +235462f); // @output -247885.23
    io:println(-12423.23 - 2.345e02); // @output -12657.73
    io:println(-12423.23 - 25.E1742f); // @output -Infinity

    io:println(-10.746 - 30.25453213); // @output -41.00053213
    io:println(-10.746 - +235462f); // @output -235472.746
    io:println(-10.746 - 2.345e02); // @output -245.246
    io:println(-10.746 - 25.E1742f); // @output -Infinity

    io:println(30.25453213 - -25.E1742f); // @output Infinity
    io:println(30.25453213 - -2.345e02); // @output 264.75453213000003
    io:println(30.25453213 - -12423.23); // @output 12453.48453213
    io:println(30.25453213 - -10.746); // @output 41.00053213

    io:println(+235462f - -25.E1742f); // @output Infinity
    io:println(+235462f - -2.345e02); // @output 235696.5
    io:println(+235462f - -12423.23); // @output 247885.23
    io:println(+235462f - -10.746); // @output 235472.746

    io:println(2.345e02 - -25.E1742f); // @output Infinity
    io:println(2.345e02 - -2.345e02); // @output 469.0
    io:println(2.345e02 - -12423.23); // @output 12657.73
    io:println(2.345e02 - -10.746); // @output 245.246

    io:println(25.E1742f - -25.E1742f); // @output Infinity
    io:println(25.E1742f - -2.345e02); // @output Infinity
    io:println(25.E1742f - -12423.23); // @output Infinity
    io:println(25.E1742f - -10.746); // @output Infinity
}

Test-Case: output
Description: Test float subtraction with user-defined subtypes of float.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatTypeSuffix, module-const-decl,
        module-type-defn, unary-minus

const float A = 1.25;
const float B = 2.0;

type FloatType1 -2f|-1f|0f|1f|2f;

type FloatType2 A|B;

type FloatType3 FloatType1|FloatType2;

function init() {
    A a1 = 1.25;
    FloatType1 a2 = -1.0;
    FloatType2 a3 = 2;
    FloatType3 a4 = -0x2;
    float a5 = 25.E1742f;
    float a6 = -25.E1742f;

    float a = a1 - a2;
    io:println(a); // @output 2.25

    a = a1 - a3;
    io:println(a); // @output -0.75

    a = a1 - a4;
    io:println(a); // @output 3.25

    a = a1 - a5;
    io:println(a); // @output -Infinity

    a = a1 - a6;
    io:println(a); // @output Infinity

    a = a2 - a3;
    io:println(a); // @output -3.0

    a = a2 - a4;
    io:println(a); // @output 1.0

    a = a2 - a5;
    io:println(a); // @output -Infinity

    a = a2 - a6;
    io:println(a); // @output Infinity

    a = a3 - a4;
    io:println(a); // @output 4.0

    a = a3 - a5;
    io:println(a); // @output -Infinity

    a = a3 - a6;
    io:println(a); // @output Infinity
}

Test-Case: output
Description: Test float subtraction with user-defined subtypes of float.
Fail-Issue: ballerina-lang#32828
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatTypeSuffix, module-const-decl, module-type-defn,
        union-type

const float A = 1.25;
const float B = 2.0;

type FloatType1 A|B;

function init() {
    A a = 1.25;
    float|FloatType1 b = 25346.45f;

    float x = a - b;
    io:println(x); // @output -25345.2
}

Test-Case: output
Description: Test whether contextually expected type of the operands is float when the contextually expected
             type of the additive-expr is float.
Labels: additive-expr, DecimalNumber, float

function init() {
    float a = 20 - 10;
    io:println(a); // @output 10.0
}

Test-Case: output
Description: Test assigning the result of an additive expression to a compatible type.
Labels: additive-expr, any, DecimalFloatingPointNumber, float, FloatTypeSuffix, is-expr, string, union-type

function init() {
    float|string a = 20f - 10f;
    io:println(a); // @output 10.0
    io:println(a is float); // @output true

    any b = 20f - 10f;
    io:println(b); // @output 10.0
    io:println(a is float); // @output true
}

Test-Case: output
Description: Test assigning the result of an additive expression to var.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatTypeSuffix, is-expr, var

function init() {
    var a = 20f - 10f;
    io:println(a); // @output 10.0
    io:println(a is float); // @output true
}

Test-Case: output
Description: Test using additive expressions at module level.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatTypeSuffix, is-expr, module-const-decl,
        module-var-decl, var

var a = 20f - 10f;

float b = 20f - 10f;

const float c = 120f - 10f;

function init() {
    io:println(a); // @output 10.0
    io:println(a is float); // @output true

    io:println(b); // @output 10.0

    io:println(c); // @output 10.0
}

Test-Case: output
Description: Test float subtraction with positive floats of type float?.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatTypeSuffix, nil-literal, numeric-nil-lifting,
        optional-type, value:toBalString

function init() {
    float? a1 = +0.0f;
    float? a2 = 4.9E-324;
    float? a3 = 124;
    float? a4 = 75647.096547382f;
    float? a5 = +4657382.1234;
    float? a6 = 1.7976931348623157E308;
    float? a7 = 25.E1742f;
    float? a8 = ();

    io:println(a1 - a1); // @output 0.0
    io:println(a1 - a2); // @output -4.9E-324
    io:println(a1 - a3); // @output -124.0
    io:println(a1 - a4); // @output -75647.096547382
    io:println(a1 - a5); // @output -4657382.1234
    io:println(a1 - a6); // @output -1.7976931348623157E308
    io:println(a1 - a7); // @output -Infinity
    io:println((a1 - a8).toBalString()); // @output ()

    io:println(a2 - a1); // @output 4.9E-324
    io:println(a2 - a2); // @output 0.0
    io:println(a2 - a3); // @output -124.0
    io:println(a2 - a4); // @output -75647.096547382
    io:println(a2 - a5); // @output -4657382.1234
    io:println(a2 - a6); // @output -1.7976931348623157E308
    io:println(a2 - a7); // @output -Infinity
    io:println((a2 - a8).toBalString()); // @output ()

    io:println(a3 - a1); // @output 124.0
    io:println(a3 - a2); // @output 124.0
    io:println(a3 - a3); // @output 0.0
    io:println(a3 - a4); // @output -75523.096547382
    io:println(a3 - a5); // @output -4657258.1234
    io:println(a3 - a6); // @output -1.7976931348623157E308
    io:println(a3 - a7); // @output -Infinity
    io:println((a3 - a8).toBalString()); // @output ()

    io:println(a4 - a1); // @output 75647.096547382
    io:println(a4 - a2); // @output 75647.096547382
    io:println(a4 - a3); // @output 75523.096547382
    io:println(a4 - a4); // @output 0.0
    io:println(a4 - a5); // @output -4581735.026852618
    io:println(a4 - a6); // @output -1.7976931348623157E308
    io:println(a4 - a7); // @output -Infinity
    io:println((a4 - a8).toBalString()); // @output ()

    io:println(a5 - a1); // @output 4657382.1234
    io:println(a5 - a2); // @output 4657382.1234
    io:println(a5 - a3); // @output 4657258.1234
    io:println(a5 - a4); // @output 4581735.026852618
    io:println(a5 - a5); // @output 0.0
    io:println(a5 - a6); // @output -1.7976931348623157E308
    io:println(a5 - a7); // @output -Infinity
    io:println((a5 - a8).toBalString()); // @output ()

    io:println(a6 - a1); // @output 1.7976931348623157E308
    io:println(a6 - a2); // @output 1.7976931348623157E308
    io:println(a6 - a3); // @output 1.7976931348623157E308
    io:println(a6 - a4); // @output 1.7976931348623157E308
    io:println(a6 - a5); // @output 1.7976931348623157E308
    io:println(a6 - a6); // @output 0.0
    io:println(a6 - a7); // @output -Infinity
    io:println((a6 - a8).toBalString()); // @output ()

    io:println(a7 - a1); // @output Infinity
    io:println(a7 - a2); // @output Infinity
    io:println(a7 - a3); // @output Infinity
    io:println(a7 - a4); // @output Infinity
    io:println(a7 - a5); // @output Infinity
    io:println(a7 - a6); // @output Infinity
    io:println(a7 - a7); // @output NaN
    io:println((a7 - a8).toBalString()); // @output ()
}

Test-Case: output
Description: Test float subtraction with negative floats of type float?.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatTypeSuffix, nil-literal, numeric-nil-lifting,
        optional-type, value:toBalString, unary-minus

function init() {
    float? a1 = -0.0f;
    float? a2 = -4.9E-324;
    float? a3 = -124;
    float? a4 = -75647.096547382f;
    float? a5 = -4657382.1234;
    float? a6 = -1.7976931348623157E308;
    float? a7 = -25.E1742f;
    float? a8 = ();

    io:println(a1 - a1); // @output 0.0
    io:println(a1 - a2); // @output 4.9E-324
    io:println(a1 - a3); // @output 124.0
    io:println(a1 - a4); // @output 75647.096547382
    io:println(a1 - a5); // @output 4657382.1234
    io:println(a1 - a6); // @output 1.7976931348623157E308
    io:println(a1 - a7); // @output Infinity
    io:println((a1 - a8).toBalString()); // @output ()

    io:println(a2 - a1); // @output -4.9E-324
    io:println(a2 - a2); // @output 0.0
    io:println(a2 - a3); // @output 124.0
    io:println(a2 - a4); // @output 75647.096547382
    io:println(a2 - a5); // @output 4657382.1234
    io:println(a2 - a6); // @output 1.7976931348623157E308
    io:println(a2 - a7); // @output Infinity
    io:println((a2 - a8).toBalString()); // @output ()

    io:println(a3 - a1); // @output -124.0
    io:println(a3 - a2); // @output -124.0
    io:println(a3 - a3); // @output 0.0
    io:println(a3 - a4); // @output 75523.096547382
    io:println(a3 - a5); // @output 4657258.1234
    io:println(a3 - a6); // @output 1.7976931348623157E308
    io:println(a3 - a7); // @output Infinity
    io:println((a3 - a8).toBalString()); // @output ()

    io:println(a4 - a1); // @output -75647.096547382
    io:println(a4 - a2); // @output -75647.096547382
    io:println(a4 - a3); // @output -75523.096547382
    io:println(a4 - a4); // @output 0.0
    io:println(a4 - a5); // @output 4581735.026852618
    io:println(a4 - a6); // @output 1.7976931348623157E308
    io:println(a4 - a7); // @output Infinity
    io:println((a4 - a8).toBalString()); // @output ()

    io:println(a5 - a1); // @output -4657382.1234
    io:println(a5 - a2); // @output -4657382.1234
    io:println(a5 - a3); // @output -4657258.1234
    io:println(a5 - a4); // @output -4581735.026852618
    io:println(a5 - a5); // @output 0.0
    io:println(a5 - a6); // @output 1.7976931348623157E308
    io:println(a5 - a7); // @output Infinity
    io:println((a5 - a8).toBalString()); // @output ()

    io:println(a6 - a1); // @output -1.7976931348623157E308
    io:println(a6 - a2); // @output -1.7976931348623157E308
    io:println(a6 - a3); // @output -1.7976931348623157E308
    io:println(a6 - a4); // @output -1.7976931348623157E308
    io:println(a6 - a5); // @output -1.7976931348623157E308
    io:println(a6 - a6); // @output 0.0
    io:println(a6 - a7); // @output Infinity
    io:println((a6 - a8).toBalString()); // @output ()

    io:println(a7 - a1); // @output -Infinity
    io:println(a7 - a2); // @output -Infinity
    io:println(a7 - a3); // @output -Infinity
    io:println(a7 - a4); // @output -Infinity
    io:println(a7 - a5); // @output -Infinity
    io:println(a7 - a6); // @output -Infinity
    io:println(a7 - a7); // @output NaN
    io:println((a7 - a8).toBalString()); // @output ()
}

Test-Case: output
Description: Test float subtraction when one operand is negative and the other is positive float of type float?.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatTypeSuffix, numeric-nil-lifting, optional-type, unary-minus,
        unary-plus, value:toBalString

function init() {
    float? a1 = -25.E1742f;
    float? a2 = -2.345e02;
    float? a3 = -12423.23;
    float? a4 = -10.746;
    float? a5 = 30.25453213;
    float? a6 = +235462;
    float? a7 = 2.345e02;
    float? a8 = 25.E1742f;

    io:println(a1 - a5); // @output -Infinity
    io:println(a1 - a6); // @output -Infinity
    io:println(a1 - a7); // @output -Infinity
    io:println(a1 - a8); // @output -Infinity

    io:println(a2 - a5); // @output -264.75453213000003
    io:println(a2 - a6); // @output -235696.5
    io:println(a2 - a7); // @output -469.0
    io:println(a2 - a8); // @output -Infinity

    io:println(a3 - a5); // @output -12453.48453213
    io:println(a3 - a6); // @output -247885.23
    io:println(a3 - a7); // @output -12657.73
    io:println(a3 - a8); // @output -Infinity

    io:println(a4 - a5); // @output -41.00053213
    io:println(a4 - a6); // @output -235472.746
    io:println(a4 - a7); // @output -245.246
    io:println(a4 - a8); // @output -Infinity

    io:println(a5 - a1); // @output Infinity
    io:println(a5 - a2); // @output 264.75453213000003
    io:println(a5 - a3); // @output 12453.48453213
    io:println(a5 - a4); // @output 41.00053213

    io:println(a6 - a1); // @output Infinity
    io:println(a6 - a2); // @output 235696.5
    io:println(a6 - a3); // @output 247885.23
    io:println(a6 - a4); // @output 235472.746

    io:println(a7 - a1); // @output Infinity
    io:println(a7 - a2); // @output 469.0
    io:println(a7 - a3); // @output 12657.73
    io:println(a7 - a4); // @output 245.246

    io:println(a8 - a1); // @output Infinity
    io:println(a8 - a2); // @output Infinity
    io:println(a8 - a3); // @output Infinity
    io:println(a8 - a4); // @output Infinity
}

Test-Case: output
Description: Test float subtraction with user-defined subtypes of float.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatTypeSuffix, module-const-decl, module-type-defn, nil-literal,
        numeric-nil-lifting, optional-type, value:toBalString, unary-minus, union-type

const float A = 1.25;
const float B = 2.0;

type FloatType1 -2f|-1f|0f|1f|2f;

type FloatType2 A|B;

type FloatType3 FloatType1|FloatType2?;

function init() {
    A? a1 = 1.25;
    FloatType1? a2 = -1.0;
    FloatType2? a3 = 2;
    FloatType3? a4 = -0x2;
    float? a5 = 25.E1742f;
    float|FloatType2? a6 = -25.E1742f;
    FloatType3 a7 = ();

    float? a = a1 - a2;
    io:println(a); // @output 2.25

    a = a1 - a3;
    io:println(a); // @output -0.75

    a = a1 - a4;
    io:println(a); // @output 3.25

    a = a1 - a5;
    io:println(a); // @output -Infinity

    a = a1 - a6;
    io:println(a); // @output Infinity

    a = a1 - a7;
    io:println(a.toBalString()); // @output ()

    a = a1 - 10;
    io:println(a); // @output -8.75

    a = a2 - a3;
    io:println(a); // @output -3.0

    a = a2 - a4;
    io:println(a); // @output 1.0

    a = a2 - a5;
    io:println(a); // @output -Infinity

    a = a2 - a6;
    io:println(a); // @output Infinity

    a = a2 - a7;
    io:println(a.toBalString()); // @output ()

    a = a3 - a4;
    io:println(a); // @output 4.0

    a = a3 - a5;
    io:println(a); // @output -Infinity

    a = a3 - a6;
    io:println(a); // @output Infinity

    a = a3 - a7;
    io:println(a.toBalString()); // @output ()
}

Test-Case: output
Description: Test float subtraction with operands of different nullable and non-nullable float subtypes.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatTypeSuffix, module-const-decl, module-type-defn,
        numeric-nil-lifting, optional-type, value:toBalString, unary-minus, union-type

const float A = 1.25;
const float B = 2.0;

type FloatType1 -2f|-1f|0f|1f|2f;

type FloatType2 A|B;

type FloatType3 FloatType1|FloatType2?;

function init() {
    A? a1 = 1.25;
    FloatType1 a2 = -1.0;
    FloatType2? a3 = 2;
    float|FloatType3 a4 = -0x2;
    float? a5 = 25.E1742f;
    float a6 = -25.E1742f;

    float? a = a1 - a2;
    io:println(a); // @output 2.25

    a = a1 - a5;
    io:println(a); // @output -Infinity

    a = a1 - 10;
    io:println(a); // @output -8.75

    a = a2 - a3;
    io:println(a); // @output -3.0

    a = a2 - a4;
    io:println(a); // @output 1.0

    a = a2 - a5;
    io:println(a); // @output -Infinity

    a = a3 - a6;
    io:println(a); // @output Infinity

    a = a4 - a6;
    io:println(a); // @output Infinity

    a = a5 - a6;
    io:println(a); // @output Infinity
}

Test-Case: output
Description: Test assigning the result of an additive expression to a compatible type.
Labels: additive-expr, any, DecimalFloatingPointNumber, float, FloatTypeSuffix, is-expr, optional-type, string, union-type

function init() {
    float? x = 50f;
    float|string|() a = x - 20.0;
    io:println(a); // @output 30.0
    io:println(a is float); // @output true

    any b = x - 20.0;
    io:println(b); // @output 30.0
    io:println(b is float); // @output true
}

Test-Case: output
Description: Test assigning the result of an additive expression to var.
Labels: additive-expr, DecimalFloatingPointNumber, float, is-expr, nil-literal, optional-type, value:toBalString, var

function init() {
    float? x = ();
    float? y = 50.0;

    var a = x - 20.0;
    io:println(a.toBalString()); // @output ()
    io:println(a is ()); // @output true

    var b = y - 20.0;
    io:println(b); // @output 30.0
    io:println(b is float); // @output true
}

Test-Case: output
Description: Test using additive expression at module level.
Labels: additive-expr, DecimalFloatingPointNumber, float, FloatTypeSuffix, is-expr, module-const-decl, module-var-decl,
        nil-literal, optional-type, value:toBalString, var

float? x = 50f;
float? y = ();

var a = x - 20f;

float? b = y - 20f;

function init() {
    io:println(a); // @output 30.0
    io:println(a is float); // @output true

    io:println(b.toBalString()); // @output ()
}

Test-Case: output
Description: Test variable reference as float subtraction operands.
Labels: additive-expr, DecimalNumber, float, variable-reference-expr

function init() {
    float a = 2;
    float b = a - a;
    io:println(b); // @output 0.0
}

Test-Case: output
Description: Test field and member access as float subtraction operands.
Labels: additive-expr, array-type, DecimalNumber, field-access-expr, float, list-constructor, mapping-constructor,
        member-access-expr, module-type-defn, optional-field-access-expr, record-type

type Record record {
    float x;
    float y?;
};

function init() {
    Record c = {x: 70, y:20};
    float[] d = [30, 40];
    float? e = c.x - d[0] - c?.y;
    io:println(e); // @output 20.0
}

Test-Case: output
Description: Test function and method call as float subtraction operands.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, defaultable-param, explicit-new-expr,
        float, FloatTypeSuffix, function-call-expr, method-call-expr, module-class-defn

class Class {
    function getFloat(float a) returns float {
        return 100 - a;
    }
}

function init() {
    Class f = new Class();
    float g = f.getFloat(50f - 20) - getFloat();
    io:println(g); // @output 33.0
}

function getFloat(float a = 50 - 30) returns float {
    return 60 - 3 - a;
}

Test-Case: output
Description: Test type cast expression in float subtraction operands.
Labels: additive-expr, DecimalNumber, float, type-cast-expr

function init() {
    float i = <float> 10 - 7;
    io:println(i); // @output 3.0
}

Test-Case: output
Description: Test unary expressions in float subtraction operands.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatTypeSuffix, unary-complement,
        unary-minus, unary-plus

function init() {
    float a1 = +4f - -3;
    io:println(a1); // @output 7.0

    float a2 = -(-2f - 5.0);
    io:println(a2); // @output 7.0
}

Test-Case: output
Description: Test additive expression in float subtraction operands.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatTypeSuffix

function init() {
    float a = 404 - 0x2 + 10f - 4;
    io:println(a); // @output 408.0
}

Test-Case: output
Description: Test additive expression in float subtraction operands.
Labels: additive-expr, DecimalNumber, float, FloatTypeSuffix, HexLiteral

function init() {
    float a = 404 - (0x2 + 10f - 4);
    io:println(a); // @output 396.0
}

Test-Case: output
Description: Test precedence and associativity with additive expression.
Labels: additive-expr, int, DecimalNumber, FloatTypeSuffix, multiplicative-expr

function init() {
    float a = 2f + 3f * 5f / 12f + 1f - 2f % 3f * 2f + 12f;
    io:println(a); // @output 12.25
}

Test-Case: output
Description: Test multiplicative expressions as float subtraction operands.
Labels: additive-expr, DecimalFloatingPointNumber, DecimalNumber, float, FloatTypeSuffix, multiplicative-expr

function init() {
    float a = (1 * 2f) - (32 / 4.0);
    io:println(a); // @output -6.0
}

Test-Case: output
Description: Test checking expressions as float subtraction operands.
Labels: additive-expr, checking-expr, DecimalFloatingPointNumber, error, float, union-type

function init() returns error? {
    float|error a = 12.25;
    float c = check a - checkpanic a;
    io:println(c); // @output 0.0
}

Test-Case: output
Description: Test let expression in float subtraction operands.
Labels: additive-expr, DecimalFloatingPointNumber, float, let-expr

function init() {
    float h = (let float h1 = 30.25 - 9.75 in h1) - 5f;
    io:println(h); // @output 15.5
}

Test-Case: output
Description: Test conditional expressions as float subtraction operands.
Labels: additive-expr, conditional-expr, DecimalNumber, error, float, nil-literal, optional-type, union-type

function init() {
    float|error a = 25;
    float? b = ();
    float c = (a is error ? 5 : a) - (b ?: 10);
    io:println(c); // @output 15.0
}

Test-Case: output
Description: Test lang.float constants as float subtraction operands.
Labels: additive-expr, float, float:E, float:PI

function init() {
    float a = float:PI - float:E;
    io:println(a); // @output 0.423310825130748
}

Test-Case: error
Description: Test assigning the result of float subtraction to an incompatible type.
Labels: additive-expr, DecimalFloatingPointNumber, decimal, float, function-call-expr, int, var

function errorFunction(float a, float b) {
    int _ = 3.0f - 2.0f; // @error static type of additive-expr with decimal operands is float

    var a1 = 2.5 - 2.1;
    int _ = a1; // @error static type of additive-expr with float operands is float

    a2 = a - b;
    int _ = a2; // @error static type of additive-expr with float operands is float

    decimal _ = a2; // @error static type of additive-expr with float operands is float

    var a3 = a - (getFloat(getFloat(2.0 - b)));
    decimal _ = a3; // @error static type of additive-expr with float operands is float
}

function getFloat(float f) returns float {
    return f - 1f;
}

Test-Case: error
Description: Test assigning the result of float subtraction with float? to an incompatible type.
Labels: additive-expr, DecimalFloatingPointNumber, float, function-call-expr, numeric-nil-lifting, optional-type

function errorFunction(float c, float? d) {
    float _ = d - c; // @error static type of additive-expr with at least one float? operand is float?
    float _ = getFloat(2.0) - d; // @error static type of additive-expr with at least one float? operand is float?
    float _ = d - getOptionalFloat(1.0 - 2f); // @error static type of additive-expr with at least one float? operand is float?
    float _ = c - getOptionalFloat(1); // @error static type of additive-expr with at least one float? operand is float?
}

function getFloat(float f) returns float {
    return f - 1f;
}

function getOptionalFloat(float? f) returns float? {
    return f - 1f;
}

Test-Case: error
Description: Test assigning the result of float subtraction to a subtype of float.
Labels: additive-expr, DecimalFloatingPointNumber, float, module-type-defn

type Floats 10.0|20f;

function errorFunction(Floats a, float b) {
    Floats _ = a - b; // @error static type of additive-expr with operands of float subtypes is float
    Floats _ = b - b; // @error static type of additive-expr with operands of float subtypes is float
}

Test-Case: error
Description: Test assigning the result of subtraction of optional floats to a subtype of float?.
Labels: additive-expr, DecimalFloatingPointNumber, float, module-type-defn, numeric-nil-lifting, optional-type

type Floats 10.0|20f;

function errorFunction(Floats? a, float? b) {
    Floats? _ = a - b; // @error static type of additive-expr with at least one operand of subtype of float? is float?
    Floats? _ = b - b; // @error static type of additive-expr with at least one operand of subtype of float? is float?
}
