Test-Case: output
Description: Test unary positive expression for positive integers, no overflow scenarios.
Label: DecimalNumber, int, unary-plus

public function main() {
    int a = 1;
    a = +a;
    int b = 101;
    b = +b;
    int c = 0;
    c = +c;
    int d = 9223372036854775807;
    d = +d;
    io:println(a); // @output 1
    io:println(b); // @output 101
    io:println(c); // @output 0
    io:println(d); // @output 9223372036854775807
}

Test-Case: output
Description: Test unary positive expression for negative integers, no overflow scenarios.
Label: DecimalNumber, int, unary-plus

public function main() {
    int a = -1;
    a = +a;
    int b = -101;
    b = +b;
    int c = 0;
    c = +c;
    int d = -9223372036854775807;
    d = +d;
    io:println(a); // @output -1
    io:println(b); // @output -101
    io:println(c); // @output 0
    io:println(d); // @output -9223372036854775807
}

Test-Case: output
Description: Test unary positive expression for positive int:Unsigned8; , no overflow scenarios.
Labels: DecimalNumber, int:Unsigned8, unary-plus

public function main() {
    int:Unsigned8 a = 1;
    int a1 = +a;
    int:Unsigned8 b = 2;
    int b1 = +b;
    int:Unsigned8 c = 101;
    int c1 = +c;
    int:Unsigned8 d = 255;
    int d1 = +d;

    io:println(a1); // @output 1
    io:println(b1); // @output 2
    io:println(c1); // @output 101
    io:println(d1); // @output 255
}

Test-Case: output
Description: Test unary positive expression for positive byte, no overflow scenarios.
Labels: DecimalNumber, byte, unary-plus

public function main() {
    byte a = 1;
    int a1 = +a;
    byte b = 2;
    int b1 = +b;
    byte c = 101;
    int c1 = +c;
    byte d = 255;
    int d1 = +d;

    io:println(a1); // @output 1
    io:println(b1); // @output 2
    io:println(c1); // @output 101
    io:println(d1); // @output 255
}

Test-Case: output
Description: Test unary positive expression for positive int:Unsigned16, no overflow scenarios.
Labels: DecimalNumber, int:Unsigned16, unary-plus

public function main() {
    int:Unsigned16 a = 1;
    int a1 = +a;
    int:Unsigned16 b = 2;
    int b1 = +b;
    int:Unsigned16 c = 40123;
    int c1 = +c;
    int:Unsigned16 d = 65535;
    int d1 = +d;

    io:println(a1); // @output 1
    io:println(b1); // @output 2
    io:println(c1); // @output 40123
    io:println(d1); // @output 65535
}

Test-Case: output
Description: Test unary positive expression for positive int:Unsigned32, no overflow scenarios.
Labels: DecimalNumber, int:Unsigned32, unary-plus

public function main() {
    int:Unsigned32 a = 1;
    int a1 = +a;
    int:Unsigned32 b = 2;
    int b1 = +b;
    int:Unsigned32 c = 40123;
    int c1 = +c;
    int:Unsigned32 d = 429496729;
    int d1 = +d;

    io:println(a1); // @output 1
    io:println(b1); // @output 2
    io:println(c1); // @output 40123
    io:println(d1); // @output 429496729
}

Test-Case: output
Description: Test unary positive expression for positive int:Signed8, no overflow scenarios.
Labels: DecimalNumber, int:Signed8, unary-plus

public function main() {
    int:Signed8 a = 1;
    int a1 = +a;
    int:Signed8 b = 2;
    int b1 = +b;
    int:Signed8 c = 101;
    int c1 = +c;
    int:Signed8 d = 127;
    int d1 = +d;

    io:println(a1); // @output 1
    io:println(b1); // @output 2
    io:println(c1); // @output 101
    io:println(d1); // @output 127
}

Test-Case: output
Description: Test unary positive expression for negative int:Signed8, no overflow scenarios.
Labels: DecimalNumber, int:Signed8, unary-plus

public function main() {
    int:Signed8 a = -1;
    int a1 = +a;
    int:Signed8 b = -2;
    int b1 = +b;
    int:Signed8 c = -101;
    int c1 = +c;
    int:Signed8 d = -128;
    int d1 = +d;

    io:println(a1); // @output -1
    io:println(b1); // @output -2
    io:println(c1); // @output -101
    io:println(d1); // @output -128
}

Test-Case: output
Description: Test unary positive expression for positive int:Signed16, no overflow scenarios.
Labels: DecimalNumber, int:Signed16, unary-plus

public function main() {
    int:Signed16 a = 1;
    int a1 = +a;
    int:Signed16 b = 2;
    int b1 = +b;
    int:Signed16 c = 12345;
    int c1 = +c;
    int:Signed16 d = 32767;
    int d1 = +d;

    io:println(a1); // @output 1
    io:println(b1); // @output 2
    io:println(c1); // @output 12345
    io:println(d1); // @output 32767
}

Test-Case: output
Description: Test unary positive expression for negative int:Signed16, no overflow scenarios.
Labels: DecimalNumber, int:Signed16, unary-plus

public function main() {
    int:Signed16 a = -1;
    int a1 = +a;
    int:Signed16 b = -2;
    int b1 = +b;
    int:Signed16 c = -12345;
    int c1 = +c;
    int:Signed16 d = -32768;
    int d1 = +d;

    io:println(a1); // @output -1
    io:println(b1); // @output -2
    io:println(c1); // @output -12345
    io:println(d1); // @output -32768
}

Test-Case: output
Description: Test unary positive expression for positive int:Signed32, no overflow scenarios.
Labels: DecimalNumber, int:Signed32, unary-plus

public function main() {
    int:Signed32 a = 1;
    int a1 = +a;
    int:Signed32 b = 2;
    int b1 = +b;
    int:Signed32 c = 40123;
    int c1 = +c;
    int:Signed32 d = 2147483647;
    int d1 = +d;

    io:println(a1); // @output 1
    io:println(b1); // @output 2
    io:println(c1); // @output 40123
    io:println(d1); // @output 2147483647
}

Test-Case: output
Description: Test unary positive expression for negative int:Signed32, no overflow scenarios.
Labels: DecimalNumber, int:Signed32, unary-plus

public function main() {
    int:Signed32 a = -1;
    int a1 = +a;
    int:Signed32 b = -2;
    int b1 = +b;
    int:Signed32 c = -40123;
    int c1 = +c;
    int:Signed32 d = -2147483648;
    int d1 = +d;

    io:println(a1); // @output -1
    io:println(b1); // @output -2
    io:println(c1); // @output -40123
    io:println(d1); // @output -2147483648
}

Test-Case: output
Description: Test unary positive expression for positive user defined sub types of int,
              no overflow scenarios.
Fail-Issue: ballerina-lang#32928
Labels: DecimalNumber, module-type-defn, unary-plus, union-type

type Ints -2|-1|0|1|2;

public function main() {
    Ints a = 1;
    Ints b = 2;
    Ints c = 0;

    io:println(+a); // @output 1
    io:println(+b); // @output 2
    io:println(+c); // @output 0
}

Test-Case: output
Description: Test unary positive expression for negative user defined sub types of int,
              no overflow scenarios.
Fail-Issue: ballerina-lang#32928
Labels: DecimalNumber, module-type-defn, unary-plus, union-type

type Ints -2|-1|0|1|2;

public function main() {
    Ints a = -1;
    Ints b = -2;

    io:println(+a); // @output -1
    io:println(+b); // @output -2
}

Test-Case: output
Description: Test unary plus expression for user defined sub types of integer built in sub types,
              no overflow scenarios.
Fail-Issue: ballerina-lang#32928
Labels: DecimalNumber, module-type-defn, unary-plus, union-type, int:Signed8, int:Unsigned32

type Ints int:Signed8|int:Unsigned32;

public function main() {
    Ints a = 12;
    int:Signed8|int:Unsigned32 b = 12;
    int a1 = +a;
    int b1 = +b;

    io:println(a1); // @output -12
    io:println(b1); // @output -12
}

Test-Case: output
Description: Test unary positive expression for positive optional integers, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Label: DecimalNumber, int, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int? a = 1;
    int? b = 101;
    int? c = 0;
    int? d = ();
    io:println(+a); // @output -1
    io:println(+b); // @output -101
    io:println(+c); // @output 0
    io:println((+d).toBalString()); // @output ()
}

Test-Case: output
Description: Test unary positive expression for negative optional integers, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Label: DecimalNumber, int, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int? a = -1;
    int? b = -101;
    int? c = ();
    io:println(+a); // @output -1
    io:println(+b); // @output -101
    io:println((+c).toBalString()); // @output ()
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Unsigned8, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, int:Unsigned8, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int:Unsigned8? a = 1;
    int:Unsigned8? b = 2;
    int:Unsigned8? c = ();
    int:Unsigned8? d = 255;

    io:println(+a); // @output 1
    io:println(+b); // @output 2
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output 255
}

Test-Case: output
Description: Test unary positive expression for positive optional byte, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, byte, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    byte? a = 1;
    byte? b = 2;
    byte? c = ();
    byte? d = 255;

    io:println(+a); // @output 1
    io:println(+b); // @output 2
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output 255
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Unsigned16, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, int:Unsigned16, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int:Unsigned16? a = 1;
    int:Unsigned16? b = 2;
    int:Unsigned16? c = ();
    int:Unsigned16? d = 65535;

    io:println(+a); // @output 1
    io:println(+b); // @output 2
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output 65535
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Unsigned32, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, int:Unsigned32, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int:Unsigned32? a = 1;
    int:Unsigned32? b = 2;
    int:Unsigned32? c = ();
    int:Unsigned32? d = 429496729;

    io:println(+a); // @output 1
    io:println(+b); // @output 2
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output 429496729
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Signed8, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, int:Signed8, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int:Signed8? a = 1;
    int:Signed8? b = 2;
    int:Signed8? c = ();
    int:Signed8? d = 127;

    io:println(+a); // @output 1
    io:println(+b); // @output 2
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output 127
}

Test-Case: output
Description: Test unary positive expression for negative optional int:Signed8, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, int:Signed8, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int:Signed8? a = -1;
    int:Signed8? b = -2;
    int:Signed8? c = ();
    int:Signed8? d = -128;

    io:println(+a); // @output -1
    io:println(+b); // @output -2
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output -128
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Signed16, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, int:Signed16, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int:Signed16? a = 1;
    int:Signed16? b = 2;
    int:Signed16? c = ();
    int:Signed16? d = 32767;

    io:println(+a); // @output 1
    io:println(+b); // @output 2
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output 32767
}

Test-Case: output
Description: Test unary positive expression for negative optional int:Signed16, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, int:Signed16, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int:Signed16? a = -1;
    int:Signed16? b = -2;
    int:Signed16? c = ();
    int:Signed16? d = -32768;

    io:println(+a); // @output -1
    io:println(+b); // @output -2
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output -32768
}

Test-Case: output
Description: Test unary positive expression for positive optional int:Signed32, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, int:Signed32, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int:Signed32? a = 1;
    int:Signed32? b = 2;
    int:Signed32? c = ();
    int:Signed32? d = 2147483647;

    io:println(+a); // @output 1
    io:println(+b); // @output 2
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output 2147483647
}

Test-Case: output
Description: Test unary positive expression for negative optional int:Signed32, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, int:Signed32, nil-literal, numeric-nil-lifting, optional-type, unary-plus, value:toBalString

public function main() {
    int:Signed32? a = -1;
    int:Signed32? b = -2;
    int:Signed32? c = ();
    int:Signed32? d = -2147483648;

    io:println(+a); // @output +1
    io:println(+b); // @output +2
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output +2147483648
}

Test-Case: output
Description: Test unary positive expression for positive optional user defined sub types of int,
              no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, module-type-defn, numeric-nil-lifting, optional-type, union-type, unary-plus, value:toBalString

type Ints -2|-1|0|1|2;

public function main() {
    Ints? a = 1;
    Ints? b = ();
    Ints? c = 0;

    io:println(+a); // @output +1
    io:println((+b).toBalString()); // @output ()
    io:println(+c); // @output 0
}

Test-Case: output
Description: Test unary positive expression for negative optional user defined sub types of int,
              no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, module-type-defn, numeric-nil-lifting, optional-type, union-type, unary-plus, value:toBalString

type Ints -2|-1|0|1|2;

public function main() {
    Ints? a = -1;
    Ints? b = ();
    Ints? c = -2;

    io:println(+a); // @output -1
    io:println((+b).toBalString()); // @output ()
    io:println(+c); // @output -2
}

Test-Case: output
Description: Test unary positive expression for positive floats, no overflow scenarios.
Label: float, DecimalNumber, unary-plus

public function main() {
    float a = 1.0;
    a = +a;
    float b = 101.5;
    b = +b;
    float c = 0;
    c = +c;
    float d = 922439289.0;
    d = +d;
    io:println(a); // @output 1.0
    io:println(b); // @output 101.5
    io:println(c); // @output 0.0
    io:println(d); // @output 9.22439289E8
}

Test-Case: output
Description: Test unary positive expression for negative floats, no overflow scenarios.
Label: float, DecimalNumber, unary-plus

public function main() {
    float a = -1.0;
    a = +a;
    float b = -101.5;
    b = +b;
    float c = -922439289.0;
    c = +c;
    io:println(a); // @output -1.0
    io:println(b); // @output -101.5
    io:println(c); // @output -9.22439289E8
}

Test-Case: output
Description: Test unary plus expression for very large floating point number.
Label: float, DecimalNumber, unary-plus

public function main() {
    float a = 25.E1742f;
    float b = +a;
    io:println(b); // @output Infinity
}

Test-Case: output
Description: Test unary positive expression for positive user defined sub types of float,
              no overflow scenarios.
Fail-Issue: ballerina-lang#32928
Labels: DecimalNumber, module-type-defn, unary-plus, union-type

type Floats -2.0|-1.0|0|1.0|2.0;

public function main() {
    Floats a = 1.0;
    Floats b = 2.0;
    Floats c = 0;

    io:println(+a); // @output 1.0
    io:println(+b); // @output 2.0
    io:println(+c); // @output 0.0
}

Test-Case: output
Description: Test unary plus expression for user defined sub types of float
Fail-Issue: ballerina-lang#32928
Labels: DecimalNumber, module-type-defn, module-const-decl, unary-plus, union-type

const float A = -10f;
const float B = -20f;

type Floats1 -2.0|-1.0|0|1.0|2.0;

type Floats2 A|B;

type Floats3 Floats1|Floats2;

public function main() {

    Floats2 a = -10f;
    Floats3 b = -1.0;

    float a1 = +a;
    float b1 = +b;

    io:println(a1); // @output 10.0
    io:println(b1); // @output 1.0
}

Test-Case: output
Description: Test unary positive expression for positive decimals, no overflow scenarios.
Label: decimal, DecimalNumber, unary-plus

public function main() {
    decimal a = 1.0;
    a = +a;
    decimal b = 101.5;
    b = +b;
    decimal c = 0;
    c = +c;
    decimal d = 922439289.0;
    d = +d;
    io:println(a); // @output 1.0
    io:println(b); // @output 101.5
    io:println(c); // @output 0
    io:println(d); // @output 922439289.0
}

Test-Case: output
Description: Test unary positive expression for negative decimals, no overflow scenarios.
Label: decimal, DecimalNumber, unary-plus

public function main() {
    decimal a = -1.0;
    a = +a;
    decimal b = -101.5;
    b = +b;
    decimal c = 0;
    c = +c;
    decimal d = -922439289.0;
    d = +d;
    io:println(a); // @output -1.0
    io:println(b); // @output -101.5
    io:println(c); // @output 0
    io:println(d); // @output -922439289.0
}

Test-Case: output
Description: Test unary positive expression for positive optional floats, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Label: DecimalNumber, float, optional-type, nil-literal, numeric-nil-lifting, unary-plus, value:toBalString

public function main() {
    float? a = 1.0;
    float? b = 101.5;
    float? c = ();
    float? d = 922439289.0;
    io:println(+a); // @output 1.0
    io:println(+b); // @output 101.5
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output 9.22439289E8
}

Test-Case: output
Description: Test unary positive expression for negative optional floats, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Label: DecimalNumber, float, optional-type, nil-literal, numeric-nil-lifting, unary-plus, value:toBalString

public function main() {
    float? a = -1.0;
    float? b = ();
    float? c = -922439289.0;
    io:println(+a); // @output -1.0
    io:println((+b).toBalString()); // @output ()
    io:println(+c); // @output -9.22439289E8
}

Test-Case: output
Description: Test unary positive expression for positive optional user defined sub types of float,
              no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Labels: DecimalNumber, float, module-type-defn, numeric-nil-lifting, optional-type, union-type, unary-plus, value:toBalString

type Floats -2.0|-1.0|0|1.0|2.0;

public function main() {
    Floats? a = 1.0;
    Floats? b = 2.0;
    Floats? c = ();

    io:println(+a); // @output 1.0
    io:println(+b); // @output 2.0
    io:println((+c).toBalString()); // @output ()
}

Test-Case: output
Description: Test unary positive expression for positive optional decimals, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Label: DecimalNumber, decimal, optional-type, nil-literal, numeric-nil-lifting, unary-plus, value:toBalString

public function main() {
    decimal? a = 1.0;
    decimal? b = 101.5;
    decimal? c = ();
    decimal? d = 922439289.0;
    io:println(+a); // @output 1.0
    io:println(+b); // @output 101.5
    io:println((+c).toBalString()); // @output ()
    io:println(+d); // @output 922439289.0
}

Test-Case: output
Description: Test unary positive expression for negative optional decimals, no overflow scenarios.
Fail-Issue: ballerina-lang#31701
Label: DecimalNumber, decimal, optional-type, nil-literal, numeric-nil-lifting, unary-plus, value:toBalString

public function main() {
    decimal? a = -1.0;
    decimal? b = -101.5;
    decimal? c = ();
    decimal? d = -922439289.0;
    io:println(+a); // @output -1.0
    io:println(+b); // @output -101.5
    io:println(+c); // @output 0
    io:println(+d); // @output -922439289.0
}

Test-Case: output
Description: Test field and member access as unary positive operands.
Labels: array-type, DecimalNumber, int, list-constructor, mapping-constructor, module-type-defn, record-type, unary-plus

type Record record {
    int x;
};

public function main() {
    Record c = {x: 10};
    int[] d = [30, 40];
    int e = +d[0];
    int f = +c.x;
    io:println(e); // @output 30
    io:println(f); // @output 10
}

Test-Case: output
Description: Test function call as unary negation operand.
Labels: DecimalNumber, function-call, int, unary-plus

public function main() {
    int a = +getInt();
    io:println(a); // @output 5
}

function getInt() returns int {
    return 5;
}

Test-Case: output
Description: Test let expression in unary positive operands.
Labels: int, DecimalNumber, let-expr, unary-plus

public function main() {
    int a = +(let int h1 = 3 * 4 in h1);
    io:println(a); // @output 12
}

Test-Case: output
Description: Test multiplicative and additive expression in unary positive operands.
Labels: additive-expr, DecimalNumber, int, multiplicative-expr, unary-plus

public function main() {
    int a = +(1 + 49);
    int b = +(23 * 4);
    int c = +(100 / 4);
    int d = +(99 % 5);
    io:println(a); // @output 50
    io:println(b); // @output 92
    io:println(c); // @output 25
    io:println(d); // @output 4
}

Test-Case: output
Description: Test assignability result of unary positive expression to any.
Labels: any, DecimalNumber, int, unary-plus

public function main() {
    int a = 5;
    any b = +a;
    io:println(b == 5); // @output true
}

Test-Case: output
Description: Test assignability result of unary positve expression to union type.
Labels: int, DecimalNumber, string, unary-plus, union-type

public function main() {
    int a = 5;
    int|string b = +a;
    io:println(b == 5); // @output true
}

Test-Case: output
Description: Test unary expression as the operand of unary positive.
Labels: unary-minus, unary-plus, unary-complement, int, DecimalNumber,

public function main() {
    int a = 5;
    a = ++5;
    io:println(a); // @output 5

    a = 5;
    a = +-5;
    io:println(a); // @output -5

    a = 5;
    a = +~5;
    io:println(a); // @output -6
}

Test-Case: output
Description: Test type cast expression in integer unary plus operands.
Labels: DecimalNumber, int, type-cast-expr, unary-plus

public function main() {
    int i = +<int> 6;
    io:println(i); // @output 6
}

Test-Case: output
Description: Test type cast expression in float unary plus operands.
Labels: DecimalNumber, float, type-cast-expr, unary-plus

public function main() {
    float i = +<float> 6;
    io:println(i); // @output 6.0
}

Test-Case: output
Description: Test shift expressions as unary positive operands.
Labels: DecimalNumber, int, shift-expr, unary-plus

public function main() {
    int p = +(1 << 2);
    io:println(p); // @output 4
}

Test-Case: output
Description: Test binary bitwise expressions as unary positive operands.
Labels: binary-bitwise-expr, DecimalNumber, int, unary-plus

public function main() {
    int a = +(2 & 6);
    int b = +(2 ^ 6);
    io:println(a); // @output 2
    io:println(b); // @output 4
}

Test-Case: output
Description: Test conditional expressions as unary positive operands.
Labels: conditional-expr, DecimalNumber, error, int, union-type, unary-plus, optional-type

public function main() {
    int|error a = 12;
    int? b = ();
    int c = +(a is error ? 2 : a);
    int d =  +(b ?: 13);
    io:println(c); // @output 12
    io:println(d); // @output 13
}

Test-Case: output
Description: Test checking expressions as unary positive operands.
Labels: checking-expr, DecimalNumber, error, int, unary-plus, union-type

public function main() returns error? {
    int|error a = 12;
    int c = +check a;
    int d = +checkpanic a;
    io:println(c); // @output 12
    io:println(d); // @output 12
}

Test-Case: output
Description: Test static type of result is contextually expected type.
Labels: DecimalNumber, float, int, union-type, unary-plus

public function main() {
    float a = +12;
    decimal b = +12;
    io:println(a); // @output 12.0
    io:println(b); // @output 12
}

Test-Case: error
Description: Test the static type of operands belonging to non-numeric basic types resulting in an error
            in unary expression.
Labels: string, unary-plus

public function main(string a) {
    string a1 = +a; // @error + is not allowed with operands of non-numeric basic types
}


Test-Case: error
Description: Test for int the static type of the result being the basic type of the operands via invalid assignment
             with inference, where operands are of numeric types.
Labels: DecimalNumber, decimal, int, int-literal, float, numeric-literal, unary-plus, var

public function main(int a) {
    var a1 = +a;
    float a2 = a1; // @error static type of unary-plus expression with int operands is int

    var a3 = +a;
    decimal a4 = a3; // @error static type of unary-plus expression with int operands is int
}

Test-Case: error
Description: Test for float the static type of the result being the basic type of the operands via invalid assignment
             with inference, where operands are of numeric types.
Labels: DecimalNumber, decimal, int, int-literal, float, numeric-literal, unary-plus, var

public function main(float c) {
    var a1 = +c;
    int a2 = a1; // @error static type of unary-plus expression with float operands is float

    var a3 = +c;
    decimal a4 = a3; // @error static type of unary-plus expression with float operands is float
}

Test-Case: error
Description: Test for decimal the static type of the result being the basic type of the operands via invalid assignment
             with inference, where operands are of numeric types.
Labels: DecimalNumber, decimal, int, int-literal, float, numeric-literal, unary-plus, var

public function main(decimal c) {
    var a1 = +c;
    int a2 = a1; // @error static type of unary-plus expression with decimal operands is decimal

    var a3 = +c;
    float a4 = a3; // @error static type of unary-plus expression with decimal operands is decimal
}

Test-Case: error
Description: Test for optional type the static type of the result being the basic type of the operands via invalid assignment.
Labels: DecimalNumber, decimal, int, int-literal, float, numeric-literal, optional-type, unary-plus, var

public function main(int? a, float? b, decimal? c) {
    int a1 = +a; // @error static type of unary-plus int? operand is int?
    float a2 = +b; // @error static type of unary-plus float? operand is float?
    decimal a3 = +c; // @error static type of unary-plus decimal? operand is decimal?
}

Test-Case: error
Description: Test the static type of the result being the basic type of the operands via invalid assignment,
             where operands are of types that are subtypes of int types.
Labels: DecimalNumber, byte, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
                module-type-defn, unary-plus

type Ints 1|2;

public function main(int:Signed8 a, int:Signed16 b, int:Signed32 c,
                     int:Unsigned8 d, int:Unsigned16 e, int:Unsigned32 f,
                     byte g, Ints h) {
    int:Signed8 a1 = +a; // @error static type of unary-plus expression with operands of int subtypes is int

    int:Signed16 a5 = +b; // @error static type of unary-plus expression with operands of int subtypes is int

    int:Signed32 a9 = +c; // @error static type of unary-plus expression with operands of int subtypes is int

    int:Unsigned8 a13 = +d; // @error static type of unary-plus expression with operands of int subtypes is int

    int:Unsigned16 a17 = +e; // @error static type of unary-plus expression with operands of int subtypes is int

    int:Unsigned32 a21 = +f; // @error static type of unary-plus expression with operands of int subtypes is int

    byte a25 = +g; // @error static type of unary-plus expression with operands of int subtypes is int

    Ints a29 = +h; // @error static type of unary-plus expression with operands of int subtypes is int
}

Test-Case: error
Description: Test the static type of the result being the basic type of the operands via invalid assignment,
             where operands are of types that are optional subtypes of int types.
Labels: DecimalNumber, byte, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        optional-type, module-type-defn, unary-expr, unary-minus

type Ints 1|2;

public function main(int:Signed8? a, int:Signed16? b, int:Signed32? c,
                     int:Unsigned8? d, int:Unsigned16? e, int:Unsigned32? f,
                     byte? g, Ints? h) {
    int:Signed8? a1 = +a; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

    int:Signed16? a5 = +b; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

    int:Signed32? a9 = +c; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

    int:Unsigned8? a13 = +d; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

    int:Unsigned16? a17 = +e; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

    int:Unsigned32? a21 = +f; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

    byte? a25 = +g; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

    Ints? a29 = +h; // @error static type of unary-minus expression with operands of optional int subtypes is int optional
}
