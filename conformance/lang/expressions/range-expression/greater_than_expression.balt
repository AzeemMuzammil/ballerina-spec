Test-Case: output
Description: Test greater than expression for positive integers
Labels: DecimalNumber, int, relational-expr

function init() {
    int a = 1;
    int b = 101;
    int c = 0;
    int d = 9223372036854775807;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for negative integers
Labels: DecimalNumber, int, relational-expr, unary-minus

function init() {
    int a = -1;
    int b = -101;
    int c = -10;
    int d = -9223372036854775807;
    io:println(a > b); // @output true
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output false
    io:println(b > d); // @output true
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression where one operand is negative integer and other one is positive integer
Labels: DecimalNumber, int, relational-expr, unary-minus

function init() {
    int a = -1;
    int b = 101;
    int c = -10;
    int d = 9223372036854775807;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(d > c); // @output true
    io:println(c > d); // @output false
    io:println(a > d); // @output false
    io:println(d > a); // @output true
}

Test-Case: output
Description: Test greater than expression using HexIntLiteral.
Labels: relational-expr, HexIntLiteral

function init() {
    io:println(0xABF5 > 0xAB55); // @output true
    io:println(0xAB55 > 0xABF5); // @output false
    io:println(0xDBF5 > 0xAB55); // @output true
    io:println(0xAB55 > 0xDBF5); // @output false
}

Test-Case: output
Description: Test greater than expression for int:Unsigned8
Labels: DecimalNumber, int:Unsigned8, relational-expr

function init() {
    int:Unsigned8 a = 1;
    int:Unsigned8 b = 2;
    int:Unsigned8 c = 0;
    int:Unsigned8 d = 255;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for byte
Labels: DecimalNumber, byte, relational-expr

function init() {
    byte a = 1;
    byte b = 2;
    byte c = 0;
    byte d = 255;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for int:Unsigned16
Labels: DecimalNumber, int:Unsigned16, relational-expr

function init() {
    int:Unsigned16 a = 1;
    int:Unsigned16 b = 2;
    int:Unsigned16 c = 0;
    int:Unsigned16 d = 65535;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for int:Unsigned32
Labels: DecimalNumber, int:Unsigned32, relational-expr

function init() {
    int:Unsigned32 a = 1;
    int:Unsigned32 b = 2;
    int:Unsigned32 c = 0;
    int:Unsigned32 d = 429496729;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for positive int:Signed8
Labels: DecimalNumber, int:Signed8, relational-expr

function init() {
    int:Signed8 a = 1;
    int:Signed8 b = 2;
    int:Signed8 c = 0;
    int:Signed8 d = 127;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for negative int:Signed8
Labels: DecimalNumber, int:Signed8, relational-expr, unary-minus

function init() {
    int:Signed8 a = -1;
    int:Signed8 b = -101;
    int:Signed8 c = -10;
    int:Signed8 d = -127;
    io:println(a > b); // @output true
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output false
    io:println(b > d); // @output true
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression where one operand is negative int:Signed8 and other one is positive int:Signed8
Labels: DecimalNumber, int:Signed8, relational-expr, unary-minus

function init() {
    int:Signed8 a = -1;
    int:Signed8 b = 101;
    int:Signed8 c = -10;
    int:Signed8 d = 127;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(d > c); // @output true
    io:println(c > d); // @output false
    io:println(a > d); // @output false
    io:println(d > a); // @output true
}

Test-Case: output
Description: Test greater than expression for positive int:Signed16
Labels: DecimalNumber, int:Signed16, relational-expr

function init() {
    int:Signed16 a = 1;
    int:Signed16 b = 2;
    int:Signed16 c = 0;
    int:Signed16 d = 32767;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for negative int:Signed16
Labels: DecimalNumber, int:Signed16, relational-expr, unary-minus

function init() {
    int:Signed16 a = -1;
    int:Signed16 b = -1010;
    int:Signed16 c = -100;
    int:Signed16 d = -32768;
    io:println(a > b); // @output true
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output false
    io:println(b > d); // @output true
    io:println(a > a); // @output true
}

Test-Case: output
Description: Test greater than expression where one operand is negative int:Signed16 and other one is positive int:Signed16
Labels: DecimalNumber, int:Signed16, relational-expr, unary-minus

function init() {
    int:Signed16 a = -1;
    int:Signed16 b = 101;
    int:Signed16 c = -32768;
    int:Signed16 d = 32767;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(d > c); // @output true
    io:println(c > d); // @output false
    io:println(a > d); // @output false
    io:println(d > a); // @output true
}

Test-Case: output
Description: Test greater than expression for positive int:Signed32
Labels: DecimalNumber, int:Signed32, relational-expr

function init() {
    int:Signed32 a = 1;
    int:Signed32 b = 2;
    int:Signed32 c = 0;
    int:Signed32 d = 2147483647;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for negative int:Signed32
Labels: DecimalNumber, int:Signed32, relational-expr, unary-minus

function init() {
    int:Signed32 a = -1;
    int:Signed32 b = -2324;
    int:Signed32 c = -1073;
    int:Signed32 d = -2147483648;
    io:println(a > b); // @output true
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output false
    io:println(b > d); // @output true
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression where one operand is negative int:Signed16 and other one is positive int:Signed16
Labels: DecimalNumber, int:Signed16, relational-expr, unary-minus

function init() {
    int:Signed32 a = -1;
    int:Signed32 b = 2;
    int:Signed32 c = -40123;
    int:Signed32 d = 2147483647;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(d > c); // @output true
    io:println(c > d); // @output false
    io:println(a > d); // @output false
    io:println(d > a); // @output true
}

Test-Case: output
Description: Test greater than expression for user defined sub types of positive int
Labels: DecimalNumber, module-type-defn, singleton-type, relational-expr, union-type

type Ints -2|-1|0|1|2;

function init() {
    Ints a = 1;
    Ints b = 2;
    Ints c = 0;

    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(a > c); // @output true
    io:println(c > a); // @output false
    io:println(b > c); // @output true
    io:println(c > b); // @output false
}

Test-Case: output
Description: Test greater than expression for user defined sub types of negative int
Labels: DecimalNumber, module-type-defn, singleton-type, relational-expr, union-type, unary-minus

type Ints -2|-1|-3|1|2;

function init() {
    Ints a = -1;
    Ints b = -2;
    Ints c = -3;

    io:println(a > b); // @output true
    io:println(b > a); // @output false
    io:println(a > c); // @output true
    io:println(c > a); // @output false
    io:println(b > c); // @output true
    io:println(c > b); // @output false
}

Test-Case: output
Description: Test greater than expression for user defined sub types where one operand is positive int anf other one is negative int
Labels: DecimalNumber, module-type-defn, singleton-type, relational-expr, union-type, unary-minus

type Ints -2|-1|0|1|2;

function init() {
    Ints a = 1;
    Ints b = 2;
    Ints c = -1;
    Ints d = -2;

    io:println(a > c); // @output true
    io:println(c > a); // @output false
    io:println(b > c); // @output true
    io:println(c > b); // @output false
    io:println(a > d); // @output true
    io:println(d > a); // @output false
    io:println(d > b); // @output false
    io:println(b > d); // @output true
}

Test-Case: output
Description: Test greater than expression for user defined sub types of integer built in sub types
Labels: DecimalNumber, module-type-defn, relational-expr, union-type, int:Signed8, int:Unsigned32

type Ints int:Signed8|int:Unsigned32;

function init() {
    Ints a = 12;
    int:Signed8|int:Unsigned32 b = 13;

    io:println(a > b); // @output false
    io:println(b > a); // @output true
}

Test-Case: output
Description: Test greater than expression for positive optional integers
Labels: DecimalNumber, int, numeric-nil-lifting, optional-type, relational-expr

function init() {
    int? a = 1;
    int? b = 101;
    int? c = 0;
    int? d = 9223372036854775807;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for optional negative integers
Labels: DecimalNumber, int, numeric-nil-lifting, optional-type, relational-expr, unary-minus

function init() {
    int? a = -1;
    int? b = -101;
    int? c = -10;
    int? d = -9223372036854775807;
    io:println(a > b); // @output true
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output false
    io:println(b > d); // @output true
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression where one operand is negative integer and other one is positive integer,
             with optional type-descriptors
Labels: DecimalNumber, int, numeric-nil-lifting, optional-type, relational-expr, unary-minus

function init() {
    int? a = -1;
    int? b = 101;
    int? c = -10;
    int? d = 9223372036854775807;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(d > c); // @output true
    io:println(c > d); // @output false
    io:println(a > d); // @output false
    io:println(d > a); // @output true
}

Test-Case: output
Description: Test greater than expression where one operand is an optional integer and other operand is non optional integer
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalNumber, int, numeric-nil-lifting, optional-type, relational-expr

function init() {
    int? a = 1;
    int b = 101;
    int? c = 0;
    int d = 9223372036854775807;
    io:println(a > b); // @output false
    io:println(a > d); // @output false
    io:println(b > c); // @output true
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression for optional int:Unsigned8
Labels: DecimalNumber, int:Unsigned8, relational-expr

function init() {
    int:Unsigned8? a = 1;
    int:Unsigned8? b = 2;
    int:Unsigned8? c = 0;
    int:Unsigned8? d = 255;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output true
}

Test-Case: output
Description: Test greater than expression where one operand is optional int:Unsigned8 and other is not
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalNumber, int:Unsigned8, numeric-nil-lifting, optional-type, relational-expr

function init() {
    int:Unsigned8? a = 1;
    int:Unsigned8 b = 2;
    int:Unsigned8? c = 0;
    int:Unsigned8 d = 255;
    io:println(a > b); // @output false
    io:println(a > d); // @output false
    io:println(b > c); // @output true
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression for optional byte
Labels: DecimalNumber, byte, numeric-nil-lifting, optional-type, relational-expr

function init() {
    byte? a = 1;
    byte? b = 2;
    byte? c = 0;
    byte? d = 255;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output true
}

Test-Case: output
Description: Test greater than expression where one operand is optional byte and other is not
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalNumber, byte, numeric-nil-lifting, optional-type, relational-expr

function init() {
    byte? a = 1;
    byte b = 2;
    byte? c = 0;
    byte d = 255;
    io:println(a > b); // @output false
    io:println(a > d); // @output false
    io:println(b > c); // @output true
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression for optional int:Unsigned16
Labels: DecimalNumber, int:Unsigned16, relational-expr

function init() {
    int:Unsigned16? a = 1;
    int:Unsigned16? b = 2;
    int:Unsigned16? c = 0;
    int:Unsigned16? d = 65535;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output true
}

Test-Case: output
Description: Test greater than expression where one operand is optional int:Unsigned16 and other is not
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalNumber, int:Unsigned16, numeric-nil-lifting, optional-type, relational-expr

function init() {
    int:Unsigned16? a = 1;
    int:Unsigned16 b = 2;
    int:Unsigned16? c = 0;
    int:Unsigned16 d = 65535;
    io:println(a > b); // @output false
    io:println(a > d); // @output false
    io:println(b > c); // @output true
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression for optional int:Unsigned32
Labels: DecimalNumber, int:Unsigned32, relational-expr

function init() {
    int:Unsigned32? a = 1;
    int:Unsigned32? b = 2;
    int:Unsigned32? c = 0;
    int:Unsigned32? d = 429496729;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output true
}

Test-Case: output
Description: Test greater than expression where one operand is optional int:Unsigned32 and other is not
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalNumber, int:Unsigned32, numeric-nil-lifting, optional-type, relational-expr

function init() {
    int:Unsigned32? a = 1;
    int:Unsigned32 b = 2;
    int:Unsigned32? c = 0;
    int:Unsigned32 d = 429496729;
    io:println(a > b); // @output false
    io:println(a > d); // @output false
    io:println(b > c); // @output true
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression for positive optional int:Signed8
Labels: DecimalNumber, int:Signed8, relational-expr

function init() {
    int:Signed8? a = 1;
    int:Signed8? b = 2;
    int:Signed8? c = 0;
    int:Signed8? d = 127;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for negative optional int:Signed8
Labels: DecimalNumber, int:Signed8, relational-expr, unary-minus

function init() {
    int:Signed8? a = -1;
    int:Signed8? b = -101;
    int:Signed8? c = -10;
    int:Signed8? d = -127;
    io:println(a > b); // @output true
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output false
    io:println(b > d); // @output true
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression where one operand is negative int:Signed8 and other one is positive int:Signed8
Labels: DecimalNumber, int:Signed8, relational-expr, unary-minus

function init() {
    int:Signed8? a = -1;
    int:Signed8? b = 101;
    int:Signed8? c = -10;
    int:Signed8? d = 127;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(d > c); // @output true
    io:println(c > d); // @output false
    io:println(a > d); // @output false
    io:println(d > a); // @output true
}

Test-Case: output
Description: Test greater than expression where one operand is optional int:Signed8 and other is not
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: DecimalNumber, int:Signed8, numeric-nil-lifting, optional-type, relational-expr

function init() {
    int:Signed8? a = 1;
    int:Signed8? b = 2;
    int:Signed8? c = 0;
    int:Signed8? d = 127;
    io:println(a > b); // @output false
    io:println(a > d); // @output false
    io:println(b > c); // @output true
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression for optional positive int:Signed16
Labels: DecimalNumber, int:Signed16, relational-expr, numeric-nil-lifting, optional-type

function init() {
    int:Signed16? a = 1;
    int:Signed16? b = 2;
    int:Signed16? c = 0;
    int:Signed16? d = 32767;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for negative optional int:Signed16
Labels: DecimalNumber, int:Signed16, relational-expr, unary-minus, numeric-nil-lifting, optional-type

function init() {
    int:Signed16? a = -1;
    int:Signed16? b = -1010;
    int:Signed16? c = -100;
    int:Signed16? d = -32768;
    io:println(a > b); // @output true
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output false
    io:println(b > d); // @output true
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression where one operand is optional negative int:Signed16 and other
        one is optional positive int:Signed16
Labels: DecimalNumber, int:Signed16, relational-expr, unary-minus, numeric-nil-lifting, optional-type

function init() {
    int:Signed16? a = -1;
    int:Signed16? b = 101;
    int:Signed16? c = -32768;
    int:Signed16? d = 32767;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(d > c); // @output true
    io:println(c > d); // @output false
    io:println(a > d); // @output false
    io:println(d > a); // @output true
}

Test-Case: output
Description: Test greater than expression for optional positive int:Signed32
Labels: DecimalNumber, int:Signed32, relational-expr, numeric-nil-lifting, optional-type

function init() {
    int:Signed32? a = 1;
    int:Signed32? b = 2;
    int:Signed32? c = 0;
    int:Signed32? d = 2147483647;
    io:println(a > b); // @output false
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output true
    io:println(b > d); // @output false
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression for negative optional int:Signed32
Labels: DecimalNumber, int:Signed32, relational-expr, unary-minus, numeric-nil-lifting, optional-type

function init() {
    int:Signed32? a = -1;
    int:Signed32? b = -2324;
    int:Signed32? c = -1073;
    int:Signed32? d = -2147483648;
    io:println(a > b); // @output true
    io:println(c > a); // @output false
    io:println(a > c); // @output true
    io:println(d > a); // @output false
    io:println(b > d); // @output true
    io:println(a > a); // @output false
}

Test-Case: output
Description: Test greater than expression where one operand is optional negative int:Signed16 and other
             one is optional positive int:Signed16
Labels: DecimalNumber, int:Signed16, relational-expr, unary-minus, numeric-nil-lifting, optional-type

function init() {
    int:Signed32? a = -1;
    int:Signed32? b = 2;
    int:Signed32? c = -40123;
    int:Signed32? d = 2147483647;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(d > c); // @output true
    io:println(c > d); // @output false
    io:println(a > d); // @output false
    io:println(d > a); // @output true
}

Test-Case: output
Description: Test greater than expression for user defined sub types of positive optional int
Labels: DecimalNumber, module-type-defn, singleton-type, relational-expr, union-type, numeric-nil-lifting, optional-type

type Ints -2|-1|0|1|2;

function init() {
    Ints? a = 1;
    Ints? b = 2;
    Ints? c = 0;

    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(a > c); // @output true
    io:println(c > a); // @output false
    io:println(b > c); // @output true
    io:println(c > b); // @output false
}

Test-Case: output
Description: Test greater than expression for user defined sub types of negative optional int
Labels: DecimalNumber, module-type-defn, singleton-type, relational-expr, union-type, unary-minus, numeric-nil-lifting, optional-type

type Ints -2|-1|-3|1|2;

function init() {
    Ints? a = -1;
    Ints? b = -2;
    Ints? c = -3;

    io:println(a > b); // @output true
    io:println(b > a); // @output false
    io:println(a > c); // @output true
    io:println(c > a); // @output false
    io:println(b > c); // @output true
    io:println(c > b); // @output false
}

Test-Case: output
Description: Test greater than expression for user defined sub types where one operand is optional positive int and
            other one is optional negative int
Labels: DecimalNumber, module-type-defn, singleton-type, relational-expr, union-type, unary-minus, numeric-nil-lifting, optional-type

type Ints -2|-1|0|1|2;

function init() {
    Ints? a = 1;
    Ints? b = 2;
    Ints? c = -1;
    Ints? d = -2;

    io:println(a > c); // @output true
    io:println(c > a); // @output false
    io:println(b > c); // @output true
    io:println(c > b); // @output false
    io:println(a > d); // @output true
    io:println(d > a); // @output false
    io:println(d > b); // @output false
    io:println(b > d); // @output false
}

Test-Case: output
Description: Test greater than expression when either or both operands are nil
Labels: relational-expr, numeric-nil-lifting, optional-type, nil

function init() {
    int? a = ();
    int? b = 5;

    io:println(a > b); // @output false
    io:println(b > a); // @output false
    io:println(() > ()); // @output false
}

Test-Case: output
Description: Test greater than expression when either or both operands are boolean
Labels: relational-expr, numeric-nil-lifting, boolean

function init() {
    boolean a = false;
    boolean b = true;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(a > a); // @output false
    io:println(b > b); // @output false
}

Test-Case: output
Description: Test greater than expression when either or both operands are string
Labels: relational-expr, numeric-nil-lifting, string

function init() {
    string a = "ABCD";
    string b = "ABCDE";
    string c = "DCBA";
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(a > c); // @output false
    io:println(c > a); // @output true
    io:println(c > c); // @output false
}

Test-Case: output
Description: Test greater than expression when one operand is optional string
Fail-Issue: ballerina-platform/ballerina-lang#35195
Labels: relational-expr, numeric-nil-lifting, string

function init() {
    string? a = "ABCD";
    string b = "ABCDE";
    string? c = "DCBA";
    io:println(a > b); // @output false
    io:println(b > a); // @output true
}

Test-Case: output
Description: Test greater than expression when both operands are string
Labels: relational-expr, numeric-nil-lifting, string

function init() {
    string? a = "ABCD";
    string? b = "ABCDE";
    string? c = "DCBA";
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(a > c); // @output false
    io:println(c > a); // @output true
    io:println(c > c); // @output false
}

Test-Case: output
Description: Test greater than expression when both operands are positive decimals
Labels: relational-expr, decimalNumber, decimal

function init() {
    decimal a = 32.45;
    decimal b = 32;
    decimal c = 3.12345678888888888888888888888889999999;
    decimal d = 3.1234567888888888888888888888888999999900000000000000000000000000000000000000000000001;
    io:println(a > b); // @output true
    io:println(b > a); // @output false
    io:println(c > d); // @output true
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression when both operands are negative decimals
Labels: relational-expr, decimalNumber, decimal, unary-minus

function init() {
    decimal a = -32.45;
    decimal b = -32;
    decimal c = -3.12345678888888888888888888888889999999;
    decimal d = -3.1234567888888888888888888888888999999900000000000000000000000000000000000000000000001;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(c > d); // @output true
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression when one operand is positive decimal and other one is negative
Labels: relational-expr, decimalNumber, decimal, unary-minus

function init() {
    decimal a = -32.45;
    decimal b = 32;
    decimal c = -3.12345678888888888888888888888889999999;
    decimal d = 3.1234567888888888888888888888888999999900000000000000000000000000000000000000000000001;
    io:println(a > b); // @output false
    io:println(b > a); // @output true
    io:println(c > d); // @output false
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression when both operands are positive floats
Labels: relational-expr, decimalNumber, float

function init() {
    float a = 0/0;
    float b = 2.0;
    float c = 343545.45;
    float d = 32345.54;
    io:println(a > b); // @output true
    io:println(b > a); // @output true
    io:println(c > d); // @output true
    io:println(d > c); // @output false
}

Test-Case: output
Description: Test greater than expression when both operands are negative floats
Labels: relational-expr, decimalNumber, float, unary-minus

function init() {
    float a = -0/0;
    float b = -2.0;
    float c = -343545.45;
    float d = -32345.54;
    io:println(a > b); // @output true
    io:println(b > a); // @output true
    io:println(c > d); // @output false
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression when one operand is positive and other one is negative
Labels: relational-expr, decimalNumber, float, unary-minus

function init() {
    float a = -0/0;
    float b = 2.0;
    float c = -343545.45;
    float d = 32345.54;
    float e = +0;
    float f = -0;
    io:println(a > b); // @output true
    io:println(b > a); // @output true
    io:println(c > d); // @output false
    io:println(d > c); // @output true
    io:println(e > f); // @output true
    io:println(f > e); // @output true
}

Test-Case: output
Description: Test greater than expression when both operands are positive optional floats
Labels: relational-expr, decimalNumber, float

function init() {
    float? a = 0/0;
    float? b = 2.0;
    float? c = 343545.45;
    float? d = 32345.54;
    io:println(a > b); // @output true
    io:println(b > a); // @output true
    io:println(c > d); // @output true
    io:println(d > c); // @output false
}

Test-Case: output
Description: Test greater than expression when both operands are negative optional floats
Labels: relational-expr, decimalNumber, float, unary-minus

function init() {
    float a = -0/0;
    float b = -2.0;
    float c = -343545.45;
    float d = -32345.54;
    io:println(a > b); // @output true
    io:println(b > a); // @output true
    io:println(c > d); // @output false
    io:println(d > c); // @output true
}

Test-Case: output
Description: Test greater than expression when one operand is optional positive and
other one is optional negative float
Labels: relational-expr, decimalNumber, float, unary-minus

function init() {
    float a = -0/0;
    float b = 2.0;
    float c = -343545.45;
    float d = 32345.54;
    float e = +0;
    float f = -0;
    io:println(a > b); // @output true
    io:println(b > a); // @output true
    io:println(c > d); // @output false
    io:println(d > c); // @output true
    io:println(e > f); // @output true
    io:println(f > e); // @output true
}

Test-Case: output
Description: Test greater than expression when one operand is optional positive and
other one is optional negative float
Labels: relational-expr, decimalNumber, float, unary-minus

function init() {
    float a = -0/0;
    float b = 2.0;
    float c = -343545.45;
    float d = 32345.54;
    float e = +0;
    float f = -0;
    io:println(a > b); // @output true
    io:println(b > a); // @output true
    io:println(c > d); // @output false
    io:println(d > c); // @output true
    io:println(e > f); // @output false
    io:println(f > e); // @output false
}

Test-Case: output
Description: Test field and member access as greater than expression operands.
Labels: array-type, DecimalNumber, field-access-expr, int, list-constructor, mapping-constructor, module-type-defn, member-access-expr, record-type, relational-expr

type Record record {
    int x;
};

function init() {
    Record c = {x: 10};
    int[] d = [30, 40];
    io:println(d[0] > c.x); // @output true
}

Test-Case: output
Description: Test function call as greater than expression operand
Labels: DecimalNumber, function-call-expr, int, relational-expr

function init() {
    io:println(getIntOne() > getIntTwo()); // @output false
}

function getIntOne() returns int {
    return 5;
}

function getIntTwo() returns int {
    return 6;
}

Test-Case: output
Description: Test assignability result of greater than expression to any.
Labels: any, DecimalNumber, int, relational-expr

function init() {
    int a = 1;
    int b = 2;
    any c = a > b;
    io:println(c); // @output false
}

Test-Case: output
Description: Test assignability result of greater than expression to union type.
Labels: int, DecimalNumber, string, relational-expr, union-type

function init() {
    int a = 5;
    int b = 6;
    boolean|string c = a > b;
    io:println(c); // @output false
}

Test-Case: output
Description: Test type cast expression as greater than expression operands.
Labels: DecimalNumber, int, type-cast-expr, relational-expr

function init() {
    boolean i = <int> 6 > <int> 7.5;
    io:println(i); // @output false
}

Test-Case: output
Description: Test shift expressions as greater than expression operands.
Labels: DecimalNumber, int, shift-expr, relational-expr

function init() {
    boolean p = (1 << 2) > 6;
    io:println(p); // @output false
}

Test-Case: output
Description: Test binary bitwise expressions as greater than expression operands.
Labels: binary-bitwise-expr, DecimalNumber, int, relational-expr

function init() {
    boolean a = (2 & 6) > (2 ^ 6);
    io:println(a); // @output false
}

Test-Case: output
Description: Test if block with greater than expression condition.
Labels: binary-bitwise-expr, DecimalNumber, int, relational-expr

function init() {
    if (6 > 5) {
        io:println("True"); // @output True
    }
}

Test-Case: output
Description: Test binary conditional expressions with greater than expression condition.
Labels: binary-conditional-expr, DecimalNumber, int, relational-expr

function init() {
    int a = 12;
    int b = 15;
    int c = a > b ? 2 : a;
    io:println(c); // @output 12
}

Test-Case: output
Description: Test greater than expression with list as operands.
Labels: binary-conditional-expr, DecimalNumber, int, relational-expr, list-constructor-expr

function init() {
    int[] a = [12, 100, 2000000];
    int[] b = [13, 3];
    int[] c = [];
    int[] d = [];
    io:println(a > b); // @output false
    io:println(c > d); // @output false
    io:println(c > b); // @output false
}

Test-Case: error
Description: Test the static type of operands belonging to non ordered type with respect to one operand resulting in an error
            in greater than expression.
Labels: string, int, float, decimal, boolean, relational-expr

function errorFunction(string a, int b, float c, decimal d, boolean e, int[] f, float[] g) {
    boolean _ = a > b; // @error > is not allowed with operands of string and int types
    boolean _ = b > c; // @error > is not allowed with operands of float and int types
    boolean _ = c > d; // @error > is not allowed with operands of float and decimal types
    boolean _ = b > e; // @error > is not allowed with operands of int and boolean types
    boolean _ = f > g; // @error > is not allowed with operands of int[] and int float[]
}

Test-Case: error
Description: Test the static type of greater than expression being boolean
Labels: string, int, float, decimal, boolean, relational-expr

function errorFunction(string a, string b, int c, int d, float e, float f, decimal g, decimal h) {
    string _ = a > b; // @error static type of greater than expression is boolean
    int _ = c > d; // @error static type of greater than expression is boolean
    float _ = e > f; // @error static type of greater than expression is boolean
    decimal _ = g > h; // @error static type of greater than expression is boolean
}
