Test-Case: output
Description: Test basic bitwise and expression.
Label: binary-bitwise-expr, HexIntLiteral

public function main() {
    io:println(9 & 6); // @output 0
    io:println(6 & 9); // @output 0
    io:println(99999999 & 6); // @output 6
    io:println(5 & 7568888); // @output 0
    io:println(54545 & 7568888); // @output 21776
    io:println(99943949334943 & 99943949334943); // @output 99943949334943

    io:println(9223372036854775807 & 9223372036854775807); // @output 9223372036854775807
    io:println(9223372036854775807 & 3); // @output 3
}

Test-Case: output
Description: Test basic bitwise and expression using HexIntLiteral.
Label: binary-bitwise-expr, HexIntLiteral

public function main() {
    io:println(0xAB55 & 0x0032); // @output 16
    io:println(0xABF5 & 50); // @output 48
    io:println(645 & 0xDBF5); // @output 645
}

Test-Case: output
Description: Test basic bitwise and expression with negative integer values.
Label: binary-bitwise-expr, HexIntLiteral, unary-minus

public function main() {
    io:println(-89 & 6); // @output 6
    io:println(6 & -9); // @output 6
    io:println(-43554 & -6); // @output -43558

    io:println(-9223372036854775808 & -9223372036854775808); // @output -9223372036854775808
    io:println(-9223372036854775808 & 3); // @output 0
    io:println(-9223372036854775808 & 9223372036854775807); // @output 0
}

Test-Case: output
Description: Test basic bitwise and expression for negative integer values using HexIntLiteral.
Label: binary-bitwise-expr, HexIntLiteral, unary-minus

public function main() {
    io:println(0xDB55 & -0x0032); // @output 56132
    io:println(-0x1C55 & -0x123F); // @output -7807
    io:println(-0xABF5 & -540); // @output -44032
    io:println(5656 & -0XBCDE); // @output 512
    io:println(5656 & 0XBCDE); // @output 5144
}

Test-Case: output
Description: Test bitwise and expression always evaluates to 0 when at least one operand is 0.
Label: binary-bitwise-expr, signed-zero, unary-minus, unary-plus

public function main() {
    int a = 53443;
    int b = 0;
    int c = +0;
    int d = -0;

    io:println(543434343434 & 0); // @output 0
    io:println(0 & 787654322); // @output 0
    io:println(0 & 0); // @output 0
    io:println(0 & a); // @output 0
    io:println(a & 0); // @output 0
    io:println(a & b); // @output 0
    io:println(b & 6453564654); // @output 0
    io:println(b & b); // @output 0
    io:println(-4434353 & b); // @output 0
    io:println(94434843 & c); // @output 0
    io:println(-6534353 & d); // @output 0
    io:println(c & c); // @output 0
    io:println(d & d); // @output 0
    io:println(-0 & -0); // @output 0
    io:println(+0 & +0); // @output 0
}

Test-Case: output
Description: Test bitwise and expression always evaluates to value V when the value of both operands are V.
Label: binary-bitwise-expr, unary-minus, unary-plus

public function main() {
    int a = 99443;
    int b = 99443;
    int c = -223;

    io:println(543434343434 & 543434343434); // @output 543434343434
    io:println(0 & 0); // @output 0
    io:println(a & a); // @output 99443
    io:println(a & b); // @output 99443
    io:println(b & a); // @output 99443
    io:println(3 & 3); // @output 3
    io:println(-3 & -3); // @output -3
    io:println(c & c); // @output -223
    io:println(+987654321 & +987654321); // @output 987654321
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using byte.
Label: binary-bitwise-expr

public function main() {
    int a = 987996;
    byte b = 54;
    byte c = 99;

    io:println(a & b); // @output 20
    io:println(b & a); // @output 20
    io:println(b & c); // @output 34
    io:println(c & b); // @output 34
    io:println(c & c); // @output 99
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using Signed32.
Label: binary-bitwise-expr, int:Signed32, unary-minus

public function main() {
    int a = 987996;
    int:Signed32 b = 54;
    int:Signed32 c = 5454545;
    int:Signed32 d = -341345678;

    io:println(a & b); // @output 20
    io:println(b & a); // @output 20
    io:println(b & c); // @output 16
    io:println(c & b); // @output 16
    io:println(c & c); // @output 5454545
    io:println(d & d); // @output -341345678
    io:println(c & d); // @output 211536
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using Signed16.
Label: binary-bitwise-expr, int:Signed16, unary-minus

public function main() {
    int a = 387953196;
    int:Signed16 b = 987;
    int:Signed16 c = 7764;
    int:Signed16 d = -9876;

    io:println(a & b); // @output 520
    io:println(b & a); // @output 520
    io:println(b & c); // @output 592
    io:println(c & b); // @output 592
    io:println(c & c); // @output 7764
    io:println(d & d); // @output -9876
    io:println(c & d); // @output 6212
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using Signed8.
Label: binary-bitwise-expr, int:Signed8, unary-minus

public function main() {
    int a = 387953196;
    int:Signed8 b = 97;
    int:Signed8 c = 64;
    int:Signed8 d = -23;

    io:println(a & b); // @output 32
    io:println(b & a); // @output 32
    io:println(b & c); // @output 64
    io:println(c & b); // @output 64
    io:println(c & c); // @output 64
    io:println(d & d); // @output -23
    io:println(c & d); // @output 64
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using Unsigned32.
Label: binary-bitwise-expr, int:Unsigned32

public function main() {
    int a = 987996;
    int:Unsigned32 b = 54;
    int:Unsigned32 c = 5454545;

    io:println(a & b); // @output 20
    io:println(b & a); // @output 20
    io:println(b & c); // @output 16
    io:println(c & b); // @output 16
    io:println(c & c); // @output 5454545
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using Unsigned16.
Label: binary-bitwise-expr, int:Unsigned16

public function main() {
    int a = 387953196;
    int:Unsigned16 b = 987;
    int:Unsigned16 c = 7764;

    io:println(a & b); // @output 520
    io:println(b & a); // @output 520
    io:println(b & c); // @output 592
    io:println(c & b); // @output 592
    io:println(c & c); // @output 7764
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using Unsigned8.
Label: binary-bitwise-expr, int:Unsigned8

public function main() {
    int a = 387953196;
    int:Unsigned8 b = 97;
    int:Unsigned8 c = 64;

    io:println(a & b); // @output 32
    io:println(b & a); // @output 32
    io:println(b & c); // @output 64
    io:println(c & b); // @output 64
    io:println(c & c); // @output 64
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int.
Label: binary-bitwise-expr, byte, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32

public function main() {
    int a = 43;

    byte b = 5;

    int:Signed32 c = -21474836;
    int:Signed16 d = -454;
    int:Signed8 e = 100;

    int:Unsigned32 f = 21474836;
    int:Unsigned16 g = 54522;
    int:Unsigned8 h = 255;

    io:println(a & b); // @output 1
    io:println(a & c); // @output 40
    io:println(a & d); // @output 42
    io:println(a & e); // @output 32
    io:println(a & f); // @output 0
    io:println(a & g); // @output 42
    io:println(a & h); // @output 43

    io:println(b & b); // @output 5
    io:println(b & c); // @output 4
    io:println(b & d); // @output 0
    io:println(b & e); // @output 4
    io:println(b & f); // @output 4
    io:println(b & g); // @output 0
    io:println(b & h); // @output 5

    io:println(c & c); // @output -21474836
    io:println(c & d); // @output -21474836
    io:println(c & e); // @output 100
    io:println(c & f); // @output 4
    io:println(c & g); // @output 20712
    io:println(c & h); // @output 236

    io:println(d & d); // @output -454
    io:println(d & e); // @output 32
    io:println(d & f); // @output 21474832
    io:println(d & g); // @output 54330
    io:println(d & h); // @output 58

    io:println(e & e); // @output 100
    io:println(e & f); // @output 4
    io:println(e & g); // @output 96
    io:println(e & h); // @output 100

    io:println(f & f); // @output 21474836
    io:println(f & g); // @output 33808
    io:println(f & h); // @output 20

    io:println(g & g); // @output 54522
    io:println(g & h); // @output 250

    io:println(h & h); // @output 255
}

Test-Case: output
Description: Test nil lifting for bitwise and operator.
Label: binary-bitwise-expr, byte, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16,
       int:Unsigned32, numeric-nil-lifting

public function main() {
    int? a = 43;

    byte? b = 5;

    int:Signed32? c = -21474836;
    int:Signed16? d = -454;
    int:Signed8? e = 100;

    int:Unsigned32? f = 21474836;
    int:Unsigned16? g = 54522;
    int:Unsigned8? h = 255;

    io:println(a & b); // @output 1
    io:println(a & c); // @output 40
    io:println(a & d); // @output 42
    io:println(a & e); // @output 32
    io:println(a & f); // @output 0
    io:println(a & g); // @output 42
    io:println(a & h); // @output 43

    io:println(b & b); // @output 5
    io:println(b & c); // @output 4
    io:println(b & d); // @output 0
    io:println(b & e); // @output 4
    io:println(b & f); // @output 4
    io:println(b & g); // @output 0
    io:println(b & h); // @output 5

    io:println(c & c); // @output -21474836
    io:println(c & d); // @output -21474836
    io:println(c & e); // @output 100
    io:println(c & f); // @output 4
    io:println(c & g); // @output 20712
    io:println(c & h); // @output 236

    io:println(d & d); // @output -454
    io:println(d & e); // @output 32
    io:println(d & f); // @output 21474832
    io:println(d & g); // @output 54330
    io:println(d & h); // @output 58

    io:println(e & e); // @output 100
    io:println(e & f); // @output 4
    io:println(e & g); // @output 96
    io:println(e & h); // @output 100

    io:println(f & f); // @output 21474836
    io:println(f & g); // @output 33808
    io:println(f & h); // @output 20

    io:println(g & g); // @output 54522
    io:println(g & h); // @output 250

    io:println(h & h); // @output 255
}

Test-Case: output
Description: Test bitwise and expression evaluates to nil when either operand is nil.
Label: binary-bitwise-expr, byte, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16,
       int:Unsigned32, numeric-nil-lifting, value:toBalString

public function main() {
    int? a = 43;

    byte? b = 5;

    int:Signed32? c = -21474836;
    int:Signed16? d = -454;
    int:Signed8? e = 100;

    int:Unsigned32? f = 21474836;
    int:Unsigned16? g = 54522;
    int:Unsigned8? h = 255;

    int? i = ();
    byte? j = ();
    int:Signed32? k = ();
    int:Unsigned16? l = ();

    io:println((a & i).toBalString()); // @output ()
    io:println((a & j).toBalString()); // @output ()
    io:println((k & a).toBalString()); // @output ()
    io:println((l & a).toBalString()); // @output ()

    io:println((b & i).toBalString()); // @output ()
    io:println((b & j).toBalString()); // @output ()
    io:println((b & k).toBalString()); // @output ()
    io:println((b & l).toBalString()); // @output ()

    io:println((c & i).toBalString()); // @output ()
    io:println((c & j).toBalString()); // @output ()
    io:println((k & c).toBalString()); // @output ()
    io:println((c & l).toBalString()); // @output ()

    io:println((d & i).toBalString()); // @output ()
    io:println((d & j).toBalString()); // @output ()
    io:println((d & k).toBalString()); // @output ()
    io:println((d & l).toBalString()); // @output ()

    io:println((e & i).toBalString()); // @output ()
    io:println((e & j).toBalString()); // @output ()
    io:println((e & k).toBalString()); // @output ()
    io:println((e & l).toBalString()); // @output ()

    io:println((f & i).toBalString()); // @output ()
    io:println((f & j).toBalString()); // @output ()
    io:println((f & k).toBalString()); // @output ()
    io:println((f & l).toBalString()); // @output ()

    io:println((g & i).toBalString()); // @output ()
    io:println((g & j).toBalString()); // @output ()
    io:println((g & k).toBalString()); // @output ()
    io:println((g & l).toBalString()); // @output ()

    io:println((h & i).toBalString()); // @output ()
    io:println((h & j).toBalString()); // @output ()
    io:println((h & k).toBalString()); // @output ()
    io:println((h & l).toBalString()); // @output ()

    io:println((i & i).toBalString()); // @output ()
    io:println((i & j).toBalString()); // @output ()
    io:println((i & k).toBalString()); // @output ()
    io:println((i & l).toBalString()); // @output ()

    io:println((j & j).toBalString()); // @output ()
    io:println((j & k).toBalString()); // @output ()
    io:println((j & l).toBalString()); // @output ()

    io:println((k & k).toBalString()); // @output ()
    io:println((k & l).toBalString()); // @output ()

    io:println((l & l).toBalString()); // @output ()
}

Test-Case: output
Description: Test bitwise and expression where the operands are user defined type T where the T is a subtype of int.
Label: binary-bitwise-expr, module-type-defn

type MyType int;

public function main() {
    MyType a = 5;
    MyType b = 433;
    int c = 765;

    printResult(a & b); // @output 1
    printResult(a & 12345); // @output 1
    printResult(b & c); // @output 177
    printResult(a & c); // @output 5
}

function printResult(int result) {
    io:println(result);
}

Test-Case: error
Description: Test the static type of both operands must be a subtype of int via invalid numeric operand types.
Label: binary-bitwise-expr, DecimalNumber, DecimalTypeSuffix, float, FloatTypeSuffix

public function main(float a, float b) {
    int a2 = 5 & 7.5; // @error static type of both operands must be a subtype of int

    int a3 = 433.4 & 7.5; // @error static type of both operands must be a subtype of int

    int a4 = 434.446e+2f & 95.446e+2f; // @error static type of both operands must be a subtype of int

    int a5 = 433d & 7d; // @error static type of both operands must be a subtype of int

    int a6 = a & b;

    int a7 = getFloat1() & getFloat2(); // @error static type of both operands must be a subtype of int
}

function getFloat1() returns float => 99.4;

function getFloat2() returns float => 43.8;

Test-Case: error
Description: Test the static type of both operands must be a subtype of int via invalid other operand types.
Label: binary-bitwise-expr, list-constructor-expr, mapping-constructor-expr, map-type, string

public function main(map<int> a, map<int> b) {
    int a1 = () & (); // @error static type of both operands must be a subtype of int

    int a2 = "5" & "6"; // @error static type of both operands must be a subtype of int

    int a3 = [1] & [2]; // @error static type of both operands must be a subtype of int

    int a4 = {name: "mike"} & {name: "Jone"}; // @error static type of both operands must be a subtype of int

    int a5 = a & b; // @error static type of both operands must be a subtype of int
}

Test-Case: error
Description: Test error in bitwise and expression where the operands are user defined type T
             where the T is not a subtype of int.
Label: binary-bitwise-expr, module-type-defn

type MyType int|decimal;

public function main() {
    MyType a = 5;
    MyType b = 433;
    int c = 765;
    int result;

    result = a & b; // @error MyType is not a subtype of int
    result = a & 12345; // @error MyType is not a subtype of int
    result = b & c; // @error MyType is not a subtype of int
    result = a & c; // @error MyType is not a subtype of int
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K with Unsigned32.
Label: binary-bitwise-expr, int:Unsigned32

public function main() {
    int a = 9876;
    int:Unsigned32 b = 5454;
    printResult(a & b); // @output 1028

    int:Unsigned32 c = 9994444;
    int:Unsigned32 d = 999999999;
    printResult(c & d); // @output 9994444
}

function printResult(int:Unsigned32 result) {
    io:println(result);
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K with Unsigned16.
Label: binary-bitwise-expr, int:Unsigned16

public function main() {
    int a = 33334567654;
    int:Unsigned16 b = 213;
    printResult(a & b); // @output 196

    int:Unsigned16 c = 43343;
    int:Unsigned16 d = 213;
    printResult(c & d); // @output 69
}

function printResult(int:Unsigned16 result) {
    io:println(result);
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K with Unsigned8.
Label: binary-bitwise-expr, int:Unsigned8

public function main() {
    int a = 987996;
    int:Unsigned8 b = 54;
    printResult(a & b); // @output 20

    int:Unsigned8 c = 94;
    int:Unsigned8 d = 99;
    printResult(c & d); // @output 66
}

function printResult(int:Unsigned8 result) {
    io:println(result);
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K.
Label: binary-bitwise-expr, byte, int:Unsigned8, int:Unsigned16, int:Unsigned32

public function main() {
    int:Unsigned32 b = 5454;
    int:Unsigned16 d = 4344;
    int:Unsigned16 e = b & d;
    io:println(e); // @output 4168

    int:Unsigned8 f = 44;
    int:Unsigned8 g = d & f;
    io:println(g); // @output 40

    int:Unsigned8 h = f & g;
    io:println(h); // @output 40

    byte i = f & g;
    io:println(i); // @output 40
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K via inference.
Label: binary-bitwise-expr, int:Unsigned8, int:Unsigned16, int:Unsigned32, var

public function main() {
    int a = 9876;
    int:Unsigned32 b = 5454;
    var c = a & b;
    int:Unsigned32 result1 = c;
    io:println(result1); // @output 1028

    int:Unsigned16 d = 4344;
    var e = b & d;
    int:Unsigned32 result2 = e;
    io:println(result2); // @output 4168

    int:Unsigned8 f = 44;
    var g = d & f;
    int:Unsigned32 result3 = g;
    io:println(result3); // @output 40

    var h = f & g;
    int:Unsigned32 result4 = h;
    io:println(result4); // @output 40
}

Test-Case: error
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K using invalid assignment.
Label: binary-bitwise-expr, int:Unsigned8, int:Unsigned16, int:Unsigned32, int:Signed8, int:Signed32

public function main() {
    int a = 4343;
    int b = 8;
    int:Unsigned32 c = a & b; // @error the static type of the result is int

    int d = 9876;
    int:Unsigned32 e = 5454;
    int:Unsigned16 f = d & e; // @error smallest K of the operands is 32, hence the static type of the result is Unsigned32

    int g = 9876;
    int:Unsigned16 h = 5454;
    int:Unsigned8 i = g & h; // @error smallest K of the operands is 16, hence the static type of the result is Unsigned16

    byte j = g & h; // @error smallest K of the operands is 16, hence the static type of the result is Unsigned16

    int:Signed8 k = 12;
    int:Signed16 l = 4434;
    int:Signed8 m = k & l; // @error the static type of the result is int

    int:Unsigned16 n = 12;
    int:Unsigned16 o = 4434;
    int:Signed16 p = n & o; // @error the static type of the result is Unsigned16

    int:Unsigned32 q = 12;
    int:Unsigned16 r = 4434;
    int:Unsigned8 s = n & o; // @error the static type of the result is Unsigned16
}

Test-Case: error
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K via invalid assignment with inference.
Label: binary-bitwise-expr, int:Unsigned8, int:Unsigned16, int:Unsigned32, int:Signed8, int:Signed32, var

public function main() {
    int a = 4343;
    int b = 8;
    var result1 = a & b;
    int:Unsigned32 c = result1; // @error the static type of the result is int

    int d = 9876;
    int:Unsigned32 e = 5454;
    var result2 = d & e;
    int:Unsigned16 f = result2; // @error smallest K of the operands is 32

    int g = 9876;
    int:Unsigned16 h = 5454;
    var result3 = g & h;
    int:Unsigned8 i = result3; // @error smallest K of the operands is 16

    byte j = result3; // @error smallest K of the operands is 16

    int:Signed8 k = 12;
    int:Signed16 l = 4434;
    var result4 = k & l;
    int:Signed8 m = result4; // @error the static type of the result is int
}

Test-Case: output
Description: Test float literal as operands with type cast.
Label: binary-bitwise-expr, float, type-cast-expr

public function main() {
    float a = 4.6434;
    float b = 53;
    printResult(<int>a & <int>b); // @output 5

    int c = 54322;
    float d = 7.3;
    printResult(c & <int>d); // @output 2
    printResult(<int>d & c); // @output 2

    any e = 65.65;
    any f = 1235.465;
    printResult(<int> e & <int> f); // @output 66
    printResult(<int> a & <int> e); // @output 0
    printResult(<int> f & c); // @output 1042
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test field access and optional field access expression as operands.
Label: binary-bitwise-expr, module-type-defn, field-access-expr, numeric-nil-lifting, optional-field-access-expr,
       record-type

type Person record {|
    int id;
    int age?;
|};

public function main() {
    Person p1 = {id: 33, age: 54};
    Person p2 = {id: 21, age: 23};

    printResult(p1.id & p2.id); // @output 1

    printResult(p1?.age & p2?.age); // @output 22

    printResult(p1.id & p2?.age); // @output 1
}

function printResult(int? result) {
    io:println(result);
}

Test-Case: output
Description: Test member access expression as operands.
Label: binary-bitwise-expr, member-access-expr

public function main() {
    int[] a = [33, 22, 535334343];

    printResult(a[0] & a[1]); // @output 0
    printResult(a[0] & a[2]); // @output 1
    printResult(a[1] & a[2]); // @output 6
    printResult(a[2] & a[2]); // @output 535334343
    printResult(a[2] & 0); // @output 0
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test function call expression as operands.
Label: binary-bitwise-expr, function-call-expr

public function main() {
    int a = getInt() & getInt();
    io:println(a); // @output 3

    int b = getInt() & getInt16();
    io:println(b); // @output 1

    int c = getInt() & getInt32();
    io:println(c); // @output 34

    int d = getInt16() & getInt32();
    io:println(d); // @output 256
}

function getInt() returns int {
    return 43;
}

function getInt32() returns int:Signed32 {
    return 44322;
}

function getInt16() returns int:Signed16 {
    return 897;
}

Test-Case: output
Description: Test method call expression as operands.
Label: binary-bitwise-expr, implicit-new-expr, method-call-expr, module-class-defn

class Car {
    function getCurrentSpeed() returns int {
        return 56;
    }

    function getRimSize() returns int {
        return 18;
    }
}

public function main() {
    Car c1 = new;
    printResult(c1.getCurrentSpeed() & c1.getCurrentSpeed()); // @output 56
    printResult(c1.getCurrentSpeed() & c1.getRimSize()); // @output 16
    printResult(53 & c1.getRimSize()); // @output 16
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test multiplicative expression as operands.
Label: binary-bitwise-expr, multiplicative-expr

public function main() {
    printResult((54 * 5) & (534 * 2)); // @output 12
    printResult(54 * 5 & 534 * 2); // @output 12

    printResult((54 / 5) & (534 / 2)); // @output 10
    printResult(54 / 5 & 534 / 2); // @output 10

    printResult((54 % 5) & (534 % 2)); // @output 0
    printResult(54 % 5 & 534 % 2); // @output 0

    printResult(43 & 534 % 8); // @output 2
    printResult(43 & (534 % 8)); // @output 2

    printResult(54 % 5 & 534); // @output 4
    printResult((54 % 5) & 534); // @output 4
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test additive expression as operands.
Label: additive-expr, binary-bitwise-expr

public function main() {
    printResult((54 + 5) & (534 + 2)); // @output 24
    printResult(54 + 5 & 534 + 2); // @output 24

    printResult((54 - 5) & (534 - 2)); // @output 16
    printResult(54 - 5 & 534 - 2); // @output 16

    printResult(43 & 534 + 8); // @output 10
    printResult(43 & (534 + 8)); // @output 10

    printResult(54 - 5 & 534); // @output 16
    printResult((54 - 5) & 534); // @output 16
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test shift expression as operands.
Label: binary-bitwise-expr, shift-expr, unary-minus

public function main() {
    printResult((54 << 1) & (534 << 2)); // @output 72
    printResult(54 << 1 & 534 << 2); // @output 72

    printResult((54 >> 1) & (534 >> 1)); // @output 11
    printResult(54 >> 1 & 534 >> 1); // @output 11

    printResult((-54 >>> 1) & (-534 >>> 1)); // @output 2147483365
    printResult(-54 >>> 1 & -534 >>> 1); // @output 2147483365

    printResult(43 & 534 << 2); // @output 8
    printResult(43 & (534 << 2)); // @output 8

    printResult(54 >> 5 & 534); // @output 0
    printResult((54 >> 5) & 534); // @output 0
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test bitwise expression as operands.
Label: binary-bitwise-expr

public function main() {
    printResult(54 & 5 & 534 & 2); // @output 0
    printResult(((54 & 1) & 534) & 2); // @output 0

    printResult(54 ^ 1 & 534 ^ 1); // @output 55
    printResult(54 ^ (1 & 534) ^ 1); // @output 55

    printResult(767 | 1 & 934 | 1); // @output 767
    printResult(767 | (1 & 934) | 1); // @output 767

    printResult(43 & 534 & 2); // @output 2
    printResult((43 & 534) & 2); // @output 2

    printResult(54 | 5 & 534); // @output 54
    printResult(54 | (5 & 534)); // @output 54

    printResult(4341 | 1 & 234 ^ 1); // @output 4341
    printResult(4341 | ((1 & 234) ^ 1)); // @output 4341
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test check expression as operands.
Label: binary-bitwise-expr, check, checkpanic

public function main() returns error? {
    printResult(check getData(4) & 5); // @output 4
    printResult(5 & check getData(4)); // @output 4
    printResult(check getData(52) & check getData(52)); // @output 52

    printResult(checkpanic getData(4) & 5); // @output 4
    printResult(5 & checkpanic getData(4)); // @output 4
    printResult(checkpanic getData(52) & checkpanic getData(52)); // @output 52
}

function getData(int? data) returns int|error {
    if data is int {
        return data;
    } else {
        return error("No data");
    }
}

function printResult(int result) {
    io:println(result);
}

Test-Case: parser-error
Description: Test syntax errors in bitwise and expression
Label: binary-bitwise-expr

public function main() {
    int a = & 434343; // @error missing LHS operand
    int b = 34665677665 & ; // @error missing RHS operand
}
