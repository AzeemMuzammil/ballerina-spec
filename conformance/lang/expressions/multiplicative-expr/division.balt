Test-Case: output
Description: Test integer division non-panic scenarios, for positive non-zero integers.
Labels: multiplicative-expr, int, DecimalNumber

public function main() {
    int a = 1;
    int b = 2;
    int c = 4611686018427387903;
    int d = 6917529027641081853;
    int e = 9223372036854775807;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
    io:println(a / e); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
    io:println(b / c); // @output 0
    io:println(b / d); // @output 0
    io:println(b / e); // @output 0

    io:println(c / a); // @output 4611686018427387903
    io:println(c / b); // @output 2305843009213693951
    io:println(c / c); // @output 1
    io:println(c / d); // @output 0
    io:println(c / e); // @output 0

    io:println(d / a); // @output 6917529027641081853
    io:println(d / b); // @output 3458764513820540926
    io:println(d / c); // @output 1
    io:println(d / d); // @output 1
    io:println(d / e); // @output 0

    io:println(e / a); // @output 9223372036854775807
    io:println(e / b); // @output 4611686018427387903
    io:println(e / c); // @output 2
    io:println(e / d); // @output 1
    io:println(e / e); // @output 1
}

Test-Case: output
Description: Test integer division non-panic scenarios, for negative non-zero integers.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus

public function main() {
    int a = -1;
    int b = -2;
    int c = -4611686018427387903;
    int d = -6917529027641081853;
    int e = -9223372036854775807;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
    io:println(a / e); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
    io:println(b / c); // @output 0
    io:println(b / d); // @output 0
    io:println(b / e); // @output 0

    io:println(c / a); // @output 4611686018427387903
    io:println(c / b); // @output 2305843009213693951
    io:println(c / c); // @output 1
    io:println(c / d); // @output 0
    io:println(c / e); // @output 0

    io:println(d / a); // @output 6917529027641081853
    io:println(d / b); // @output 3458764513820540926
    io:println(d / c); // @output 1
    io:println(d / d); // @output 1
    io:println(d / e); // @output 0

    io:println(e / a); // @output 9223372036854775807
    io:println(e / b); // @output 4611686018427387903
    io:println(e / c); // @output 2
    io:println(e / d); // @output 1
    io:println(e / e); // @output 1
}

Test-Case: output
Description: Test integer division non-panic scenarios, where one operand is negative 
             and the other is positive.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus

public function main() {
    int a = -9223372036854775808;
    int b = -1234;
    int c = -1;
    int d = 1;
    int e = 60708;
    int f = 9223372036854775807;

    io:println(a / d); // @output -9223372036854775808
    io:println(a / e); // @output -151930092193035
    io:println(a / f); // @output -1

    io:println(b / d); // @output -1234
    io:println(b / e); // @output 0
    io:println(b / f); // @output 0

    io:println(c / d); // @output -1
    io:println(c / e); // @output 0
    io:println(c / f); // @output 0

    io:println(d / a); // @output 0
    io:println(d / b); // @output 0
    io:println(d / c); // @output -1

    io:println(e / a); // @output 0
    io:println(e / b); // @output -49
    io:println(e / c); // @output -60708

    io:println(f / a); // @output 0
    io:println(f / b); // @output -7474369559849899
    io:println(f / c); // @output -9223372036854775807
}

Test-Case: output
Description: Test integer division non-panic scenarios, where the first operand is zero.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus

public function main() {
    int a = -9223372036854775808;
    int b = -1234;
    int c = -1;
    int d = -0;
    int e = 0;
    int f = 1;
    int g = 60708;
    int h = 9223372036854775807;

    io:println(d / a); // @output 0
    io:println(d / b); // @output 0
    io:println(d / c); // @output 0
    io:println(d / f); // @output 0
    io:println(d / g); // @output 0
    io:println(d / h); // @output 0

    io:println(e / a); // @output 0
    io:println(e / b); // @output 0
    io:println(e / c); // @output 0
    io:println(e / f); // @output 0
    io:println(e / g); // @output 0
    io:println(e / h); // @output 0
}

Test-Case: panic
Description: Test 1 for integer division panic on division by zero.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus

public function main() {
    int a = -9223372036854775808;
    int b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 2 for integer division panic on division by zero.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus

public function main() {
    int a = -9223372036854775808;
    int b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 3 for integer division panic on division by zero.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus

public function main() {
    int a = -0;
    int b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 4 for integer division panic on division by zero.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus

public function main() {
    int a = 0;
    int b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 5 for integer division panic on division by zero.
Labels: multiplicative-expr, int, DecimalNumber, unary-minus

public function main() {
    int a = 9223372036854775807;
    int b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 6 for integer division panic on division by zero.
Labels: multiplicative-expr, int, DecimalNumber

public function main() {
    int a = 9223372036854775807;
    int b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 7 for integer division panic on division by zero.
Labels: multiplicative-expr, int, DecimalNumber

public function main() {
    int c = 9223372036854775807 / 0; // @panic division by zero
}

Test-Case: panic
Description: Test 8 for integer division panic on division by zero.
Labels: multiplicative-expr, int, DecimalNumber, int:MIN_VALUE

public function main() {
    int c = int:MIN_VALUE / -0; // @panic division by zero
}

Test-Case: panic
Description: Test 1 for panic on integer division overflow.
Labels: multiplicative-expr, int, DecimalNumber, int:MIN_VALUE

public function main() {
    int a = int:MIN_VALUE;
    int b = -1;    
    int c = a / b; // @panic integer overflow on division
}

Test-Case: panic
Description: Test 2 for panic on integer division overflow.
Labels: multiplicative-expr, int, DecimalNumber, int:MIN_VALUE

public function main() {
    int c = int:MIN_VALUE / -1; // @panic integer overflow on division
}

Test-Case: output
Description: Test integer division non-overflow scenarios, for positive non-zero integers, for int:Unsigned8.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned8

public function main() {
    int:Unsigned8 a = 1;
    int:Unsigned8 b = 2;
    int:Unsigned8 c = 3;
    int:Unsigned8 d = 86;
    int:Unsigned8 e = 255;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
    io:println(a / e); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
    io:println(b / c); // @output 0
    io:println(b / d); // @output 0
    io:println(b / e); // @output 0

    io:println(c / a); // @output 3
    io:println(c / b); // @output 1
    io:println(c / c); // @output 1
    io:println(c / d); // @output 0
    io:println(c / e); // @output 0

    io:println(d / a); // @output 86
    io:println(d / b); // @output 43
    io:println(d / c); // @output 28
    io:println(d / d); // @output 1
    io:println(d / e); // @output 0

    io:println(e / a); // @output 255
    io:println(e / b); // @output 127
    io:println(e / c); // @output 85
    io:println(e / d); // @output 2
    io:println(e / e); // @output 1
}

Test-Case: output
Description: Test integer division non-panic scenarios, where the first operand is zero, for int:Unsigned8.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned8

public function main() {
    int:Unsigned8 a = 0;
    int:Unsigned8 b = 1;
    int:Unsigned8 c = 128;
    int:Unsigned8 d = 255;

    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
}

Test-Case: panic
Description: Test 1 for integer division panic on division by zero, for int:Unsigned8.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned8

public function main() {
    int:Unsigned8 a = 0;
    int:Unsigned8 b = 1;

    int c = b / a; // @panic division by zero
}

Test-Case: panic
Description: Test 2 for integer division panic on division by zero, for int:Unsigned8.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned8

public function main() {
    int:Unsigned8 a = 128;
    int:Unsigned8 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 3 for integer division panic on division by zero, for int:Unsigned8.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned8

public function main() {
    int:Unsigned8 a = 255;
    int:Unsigned8 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 4 for integer division panic on division by zero, for int:Unsigned8.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned8

public function main() {
    int:Unsigned8 a = 0;
    int:Unsigned8 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: output
Description: Test integer division non-overflow scenarios, for positive non-zero integers, for byte.
Labels: multiplicative-expr, DecimalNumber, byte

public function main() {
    byte a = 1;
    byte b = 2;
    byte c = 3;
    byte d = 86;
    byte e = 255;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
    io:println(a / e); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
    io:println(b / c); // @output 0
    io:println(b / d); // @output 0
    io:println(b / e); // @output 0

    io:println(c / a); // @output 3
    io:println(c / b); // @output 1
    io:println(c / c); // @output 1
    io:println(c / d); // @output 0
    io:println(c / e); // @output 0

    io:println(d / a); // @output 86
    io:println(d / b); // @output 43
    io:println(d / c); // @output 28
    io:println(d / d); // @output 1
    io:println(d / e); // @output 0

    io:println(e / a); // @output 255
    io:println(e / b); // @output 127
    io:println(e / c); // @output 85
    io:println(e / d); // @output 2
    io:println(e / e); // @output 1
}

Test-Case: output
Description: Test integer division non-panic scenarios, where the first operand is zero, for byte.
Labels: multiplicative-expr, DecimalNumber, byte

public function main() {
    byte a = 0;
    byte b = 1;
    byte c = 128;
    byte d = 255;

    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
}

Test-Case: panic
Description: Test 1 for integer division panic on division by zero, for byte.
Labels: multiplicative-expr, DecimalNumber, byte

public function main() {
    byte a = 0;
    byte b = 1;

    int c = b / a; // @panic division by zero
}

Test-Case: panic
Description: Test 2 for integer division panic on division by zero, for byte.
Labels: multiplicative-expr, DecimalNumber, byte

public function main() {
    byte a = 128;
    byte b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 3 for integer division panic on division by zero, for byte.
Labels: multiplicative-expr, DecimalNumber, byte

public function main() {
    byte a = 255;
    byte b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 4 for integer division panic on division by zero, for byte.
Labels: multiplicative-expr, DecimalNumber, byte

public function main() {
    byte a = 0;
    byte b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: output
Description: Test integer division non-overflow scenarios, for positive non-zero integers, for int:Unsigned32.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned32

public function main() {
    int:Unsigned32 a = 1;
    int:Unsigned32 b = 2;
    int:Unsigned32 c = 10;
    int:Unsigned32 d = 12034;
    int:Unsigned32 e = 429496729;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
    io:println(a / e); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
    io:println(b / c); // @output 0
    io:println(b / d); // @output 0
    io:println(b / e); // @output 0

    io:println(c / a); // @output 10
    io:println(c / b); // @output 5
    io:println(c / c); // @output 1
    io:println(c / d); // @output 0
    io:println(c / e); // @output 0

    io:println(d / a); // @output 12034
    io:println(d / b); // @output 6017
    io:println(d / c); // @output 1203
    io:println(d / d); // @output 1
    io:println(d / e); // @output 0

    io:println(e / a); // @output 429496729
    io:println(e / b); // @output 214748364
    io:println(e / c); // @output 42949672
    io:println(e / d); // @output 35690
    io:println(e / e); // @output 1
}

Test-Case: output
Description: Test integer division non-overflow scenarios, where the first operand is zero, for int:Unsigned32.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned32

public function main() {
    int:Unsigned32 a = 0;
    int:Unsigned32 b = 1;
    int:Unsigned32 c = 1259273;
    int:Unsigned32 d = 4294967295;

    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
}

Test-Case: panic
Description: Test 1 for integer division panic on division by zero, for int:Unsigned32.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned32

public function main() {
    int:Unsigned32 a = 0;
    int:Unsigned32 b = 1;

    int c = b / a; // @panic division by zero
}

Test-Case: panic
Description: Test 2 for integer division panic on division by zero, for int:Unsigned32.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned32

public function main() {
    int:Unsigned32 a = 4294967295;
    int:Unsigned32 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 3 for integer division panic on division by zero, for int:Unsigned32.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned32

public function main() {
    int:Unsigned32 a = 4294967295;
    int:Unsigned32 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 4 for integer division panic on division by zero, for int:Unsigned32.
Labels: multiplicative-expr, DecimalNumber, int:Unsigned32

public function main() {
    int:Unsigned32 a = 0;
    int:Unsigned32 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: output
Description: Test integer division non-overflow scenarios, for negative non-zero integers, for int:Signed8.
Labels: multiplicative-expr, DecimalNumber, int:Signed8, unary-minus

public function main() {
    int:Signed8 a = -1;
    int:Signed8 b = -2;
    int:Signed8 c = -100;
    int:Signed8 d = -120;
    int:Signed8 e = -128;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
    io:println(a / e); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
    io:println(b / c); // @output 0
    io:println(b / d); // @output 0
    io:println(b / e); // @output 0

    io:println(c / a); // @output 100
    io:println(c / b); // @output 50
    io:println(c / c); // @output 1
    io:println(c / d); // @output 0
    io:println(c / e); // @output 0

    io:println(d / a); // @output 120
    io:println(d / b); // @output 60
    io:println(d / c); // @output 1
    io:println(d / d); // @output 1
    io:println(d / e); // @output 0

    io:println(e / a); // @output 128
    io:println(e / b); // @output 64
    io:println(e / c); // @output 1
    io:println(e / d); // @output 1
    io:println(e / e); // @output 1
}

Test-Case: output
Description: Test integer division non-overflow scenarios, where one operand is negative
             and the other is positive, for int:Signed8.
Labels: multiplicative-expr, DecimalNumber, int:Signed8, unary-minus

public function main() {
    int:Signed8 a = -128;
    int:Signed8 b = -100;
    int:Signed8 c = -1;
    int:Signed8 d = 1;
    int:Signed8 e = 100;
    int:Signed8 f = 127;

    io:println(a / d); // @output -128
    io:println(a / e); // @output -1
    io:println(a / f); // @output -1

    io:println(b / d); // @output -100
    io:println(b / e); // @output -1
    io:println(b / f); // @output 0

    io:println(c / d); // @output -1
    io:println(c / e); // @output 0
    io:println(c / f); // @output 0

    io:println(d / a); // @output 0
    io:println(d / b); // @output 0
    io:println(d / c); // @output -1

    io:println(e / a); // @output 0
    io:println(e / b); // @output -1
    io:println(e / c); // @output -100

    io:println(f / a); // @output 0
    io:println(f / b); // @output -1
    io:println(f / c); // @output -127
}

Test-Case: output
Description: Test integer division non-overflow scenarios, where the first operand is zero, for int:Signed8.
Labels: multiplicative-expr, DecimalNumber, int:Signed8, unary-minus

public function main() {
    int:Signed8 a = -128;
    int:Signed8 b = -100;
    int:Signed8 c = -1;
    int:Signed8 d = -0;
    int:Signed8 e = 0;
    int:Signed8 f = 1;
    int:Signed8 g = 100;
    int:Signed8 h = 127;

    io:println(d / a); // @output 0
    io:println(d / b); // @output 0
    io:println(d / c); // @output 0
    io:println(d / f); // @output 0
    io:println(d / g); // @output 0
    io:println(d / h); // @output 0

    io:println(e / a); // @output 0
    io:println(e / b); // @output 0
    io:println(e / c); // @output 0
    io:println(e / f); // @output 0
    io:println(e / g); // @output 0
    io:println(e / h); // @output 0
}

Test-Case: panic
Description: Test 1 for integer division panic on division by zero, for int:Signed8.
Labels: multiplicative-expr, int, int:Signed8, DecimalNumber, unary-minus

public function main() {
    int:Signed8 a = -128;
    int:Signed8 b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 2 for integer division panic on division by zero, for int:Signed8.
Labels: multiplicative-expr, int, int:Signed8, DecimalNumber, unary-minus

public function main() {
    int:Signed8 a = -128;
    int:Signed8 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 3 for integer division panic on division by zero, for int:Signed8.
Labels: multiplicative-expr, int, int:Signed8, DecimalNumber, unary-minus

public function main() {
    int:Signed8 a = -0;
    int:Signed8 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 4 for integer division panic on division by zero, for int:Signed8.
Labels: multiplicative-expr, int, int:Signed8, DecimalNumber, unary-minus

public function main() {
    int:Signed8 a = 0;
    int:Signed8 b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 5 for integer division panic on division by zero, for int:Signed8.
Labels: multiplicative-expr, int, int:Signed8, DecimalNumber, unary-minus

public function main() {
    int:Signed8 a = 127;
    int:Signed8 b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 6 for integer division panic on division by zero, for int:Signed8.
Labels: multiplicative-expr, int, int:Signed8, DecimalNumber

public function main() {
    int:Signed8 a = 126;
    int:Signed8 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 7 for integer division panic on division by zero.
Labels: multiplicative-expr, int, int:Signed8, DecimalNumber, int:MIN_VALUE

public function main() {
    int:Signed8 a = -0;
    int b = int:MIN_VALUE / a; // @panic division by zero
}

Test-Case: panic
Description: Test panic on integer division overflow with int:Signed8.
Labels: multiplicative-expr, int, int:Signed8, DecimalNumber, int:MIN_VALUE

public function main() {
    int a = int:MIN_VALUE;
    int:Signed8 b = -1;
    int c = a / b; // @panic integer overflow on division
}

Test-Case: output
Description: Test integer division non-overflow scenarios, for positive non-zero integers, for int:Signed16.
Labels: multiplicative-expr, DecimalNumber, int:Signed16

public function main() {
    int:Signed16 a = 1;
    int:Signed16 b = 2;
    int:Signed16 c = 10;
    int:Signed16 d = 12345;
    int:Signed16 e = 32767;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
    io:println(a / e); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
    io:println(b / c); // @output 0
    io:println(b / d); // @output 0
    io:println(b / e); // @output 0

    io:println(c / a); // @output 10
    io:println(c / b); // @output 5
    io:println(c / c); // @output 1
    io:println(c / d); // @output 0
    io:println(c / e); // @output 0

    io:println(d / a); // @output 12345
    io:println(d / b); // @output 6172
    io:println(d / c); // @output 1234
    io:println(d / d); // @output 1
    io:println(d / e); // @output 0

    io:println(e / a); // @output 32767
    io:println(e / b); // @output 16383
    io:println(e / c); // @output 3276
    io:println(e / d); // @output 2
    io:println(e / e); // @output 1
}

Test-Case: output
Description: Test integer division non-overflow scenarios, for negative non-zero integers, for int:Signed16.
Labels: multiplicative-expr, DecimalNumber, int:Signed16, unary-minus

public function main() {
    int:Signed16 a = -1;
    int:Signed16 b = -2;
    int:Signed16 c = -100;
    int:Signed16 d = -20000;
    int:Signed16 e = -32768;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
    io:println(a / e); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
    io:println(b / c); // @output 0
    io:println(b / d); // @output 0
    io:println(b / e); // @output 0

    io:println(c / a); // @output 100
    io:println(c / b); // @output 50
    io:println(c / c); // @output 1
    io:println(c / d); // @output 0
    io:println(c / e); // @output 0

    io:println(d / a); // @output 20000
    io:println(d / b); // @output 10000
    io:println(d / c); // @output 200
    io:println(d / d); // @output 1
    io:println(d / e); // @output 0

    io:println(e / a); // @output 32768
    io:println(e / b); // @output 16384
    io:println(e / c); // @output 327
    io:println(e / d); // @output 1
    io:println(e / e); // @output 1
}

Test-Case: output
Description: Test integer division non-overflow scenarios, where one operand is negative
             and the other is positive, for int:Signed16.
Labels: multiplicative-expr, DecimalNumber, int:Signed16, unary-minus

public function main() {
    int:Signed16 a = -32768;
    int:Signed16 b = -200;
    int:Signed16 c = -1;
    int:Signed16 d = 1;
    int:Signed16 e = 200;
    int:Signed16 f = 32767;

    io:println(a / d); // @output -32768
    io:println(a / e); // @output -163
    io:println(a / f); // @output -1

    io:println(b / d); // @output -200
    io:println(b / e); // @output -1
    io:println(b / f); // @output 0

    io:println(c / d); // @output -1
    io:println(c / e); // @output 0
    io:println(c / f); // @output 0

    io:println(d / a); // @output 0
    io:println(d / b); // @output 0
    io:println(d / c); // @output -1

    io:println(e / a); // @output 0
    io:println(e / b); // @output -1
    io:println(e / c); // @output -200

    io:println(f / a); // @output 0
    io:println(f / b); // @output -163
    io:println(f / c); // @output -32767
}

Test-Case: output
Description: Test integer division non-overflow scenarios, where the first operand is zero, for int:Signed16.
Labels: multiplicative-expr, DecimalNumber, int:Signed16, unary-minus

public function main() {
    int:Signed16 a = -32768;
    int:Signed16 b = -100;
    int:Signed16 c = -1;
    int:Signed16 d = -0;
    int:Signed16 e = 0;
    int:Signed16 f = 1;
    int:Signed16 g = 1100;
    int:Signed16 h = 32767;

    io:println(d / a); // @output 0
    io:println(d / b); // @output 0
    io:println(d / c); // @output 0
    io:println(d / f); // @output 0
    io:println(d / g); // @output 0
    io:println(d / h); // @output 0

    io:println(e / a); // @output 0
    io:println(e / b); // @output 0
    io:println(e / c); // @output 0
    io:println(e / f); // @output 0
    io:println(e / g); // @output 0
    io:println(e / h); // @output 0
}

Test-Case: panic
Description: Test 1 for integer division panic on division by zero, for int:Signed16.
Labels: multiplicative-expr, int, int:Signed16, DecimalNumber, unary-minus

public function main() {
    int:Signed16 a = -32768;
    int:Signed16 b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 2 for integer division panic on division by zero, for int:Signed16.
Labels: multiplicative-expr, int, int:Signed16, DecimalNumber, unary-minus

public function main() {
    int:Signed16 a = -32767;
    int:Signed16 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 3 for integer division panic on division by zero, for int:Signed16.
Labels: multiplicative-expr, int, int:Signed16, DecimalNumber, unary-minus

public function main() {
    int:Signed16 a = -0;
    int:Signed16 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 4 for integer division panic on division by zero, for int:Signed16.
Labels: multiplicative-expr, int, int:Signed16, DecimalNumber, unary-minus

public function main() {
    int:Signed16 a = 0;
    int:Signed16 b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 5 for integer division panic on division by zero, for int:Signed16.
Labels: multiplicative-expr, int, int:Signed16, DecimalNumber, unary-minus

public function main() {
    int:Signed16 a = 32767;
    int:Signed16 b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 6 for integer division panic on division by zero, for int:Signed16.
Labels: multiplicative-expr, int, int:Signed16, DecimalNumber

public function main() {
    int:Signed16 a = 3276;
    int:Signed16 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 7 for integer division panic on division by zero.
Labels: multiplicative-expr, int, int:Signed16, DecimalNumber, int:MIN_VALUE

public function main() {
    int:Signed16 a = -0;
    int b = int:MIN_VALUE / a; // @panic division by zero
}

Test-Case: panic
Description: Test panic on integer division overflow with int:Signed16.
Labels: multiplicative-expr, int, int:Signed16, DecimalNumber, int:MIN_VALUE

public function main() {
    int a = int:MIN_VALUE;
    int:Signed16 b = -1;
    int c = a / b; // @panic integer overflow on division
}

Test-Case: output
Description: Test integer division non-overflow scenarios, for positive non-zero integers, for int:Signed32.
Labels: multiplicative-expr, DecimalNumber, int:Signed32

public function main() {
    int:Signed32 a = 1;
    int:Signed32 b = 2;
    int:Signed32 c = 10;
    int:Signed32 d = 1000;
    int:Signed32 e = 2147483647;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
    io:println(a / e); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
    io:println(b / c); // @output 0
    io:println(b / d); // @output 0
    io:println(b / e); // @output 0

    io:println(c / a); // @output 10
    io:println(c / b); // @output 5
    io:println(c / c); // @output 1
    io:println(c / d); // @output 0
    io:println(c / e); // @output 0

    io:println(d / a); // @output 1000
    io:println(d / b); // @output 500
    io:println(d / c); // @output 100
    io:println(d / d); // @output 1
    io:println(d / e); // @output 0

    io:println(e / a); // @output 2147483647
    io:println(e / b); // @output 1073741823
    io:println(e / c); // @output 214748364
    io:println(e / d); // @output 2147483
    io:println(e / e); // @output 1
}

Test-Case: output
Description: Test integer division non-overflow scenarios, for negative non-zero integers, for int:Signed32.
Labels: multiplicative-expr, DecimalNumber, int:Signed32, unary-minus

public function main() {
    int:Signed32 a = -1;
    int:Signed32 b = -2;
    int:Signed32 c = -100;
    int:Signed32 d = -20000;
    int:Signed32 e = -2147483648;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0
    io:println(a / c); // @output 0
    io:println(a / d); // @output 0
    io:println(a / e); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
    io:println(b / c); // @output 0
    io:println(b / d); // @output 0
    io:println(b / e); // @output 0

    io:println(c / a); // @output 100
    io:println(c / b); // @output 50
    io:println(c / c); // @output 1
    io:println(c / d); // @output 0
    io:println(c / e); // @output 0

    io:println(d / a); // @output 20000
    io:println(d / b); // @output 10000
    io:println(d / c); // @output 200
    io:println(d / d); // @output 1
    io:println(d / e); // @output 0

    io:println(e / a); // @output 2147483648
    io:println(e / b); // @output 1073741824
    io:println(e / c); // @output 21474836
    io:println(e / d); // @output 107374
    io:println(e / e); // @output 1
}

Test-Case: output
Description: Test integer division non-overflow scenarios, where one operand is negative 
             and the other is positive, for int:Signed32.
Labels: multiplicative-expr, DecimalNumber, int:Signed32, unary-minus

public function main() {
    int:Signed32 a = -2147483648;
    int:Signed32 b = -200;
    int:Signed32 c = -1;
    int:Signed32 d = 1;
    int:Signed32 e = 200;
    int:Signed32 f = 2147483647;

    io:println(a / d); // @output -2147483648
    io:println(a / e); // @output -10737418
    io:println(a / f); // @output -1

    io:println(b / d); // @output -200
    io:println(b / e); // @output -1
    io:println(b / f); // @output 0

    io:println(c / d); // @output -1
    io:println(c / e); // @output 0
    io:println(c / f); // @output 0

    io:println(d / a); // @output 0
    io:println(d / b); // @output 0
    io:println(d / c); // @output -1

    io:println(e / a); // @output 0
    io:println(e / b); // @output -1
    io:println(e / c); // @output -200

    io:println(f / a); // @output 0
    io:println(f / b); // @output -10737418
    io:println(f / c); // @output -2147483647
}

Test-Case: output
Description: Test integer division non-overflow scenarios, where the first operand is zero, for int:Signed32.
Labels: multiplicative-expr, DecimalNumber, int:Signed32, unary-minus

public function main() {
    int:Signed32 a = -2147483648;
    int:Signed32 b = -12342340;
    int:Signed32 c = -1;
    int:Signed32 d = -0;
    int:Signed32 e = 0;
    int:Signed32 f = 1;
    int:Signed32 g = 139456264;
    int:Signed32 h = 2147483647;

    io:println(d / a); // @output 0
    io:println(d / b); // @output 0
    io:println(d / c); // @output 0
    io:println(d / f); // @output 0
    io:println(d / g); // @output 0
    io:println(d / h); // @output 0

    io:println(e / a); // @output 0
    io:println(e / b); // @output 0
    io:println(e / c); // @output 0
    io:println(e / f); // @output 0
    io:println(e / g); // @output 0
    io:println(e / h); // @output 0
}

Test-Case: panic
Description: Test 1 for integer division panic on division by zero, for int:Signed32.
Labels: multiplicative-expr, int, int:Signed32, DecimalNumber, unary-minus

public function main() {
    int:Signed32 a = -2147483648;
    int:Signed32 b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 2 for integer division panic on division by zero, for int:Signed32.
Labels: multiplicative-expr, int, int:Signed32, DecimalNumber, unary-minus

public function main() {
    int:Signed32 a = -2147483647;
    int:Signed32 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 3 for integer division panic on division by zero, for int:Signed32.
Labels: multiplicative-expr, int, int:Signed32, DecimalNumber, unary-minus

public function main() {
    int:Signed32 a = -0;
    int:Signed32 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 4 for integer division panic on division by zero, for int:Signed32.
Labels: multiplicative-expr, int, int:Signed32, DecimalNumber, unary-minus

public function main() {
    int:Signed32 a = 0;
    int:Signed32 b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 5 for integer division panic on division by zero, for int:Signed32.
Labels: multiplicative-expr, int, int:Signed32, DecimalNumber, unary-minus

public function main() {
    int:Signed32 a = 2147483647;
    int:Signed32 b = -0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 6 for integer division panic on division by zero, for int:Signed32.
Labels: multiplicative-expr, int, int:Signed32, DecimalNumber

public function main() {
    int:Signed32 a = 2147483610;
    int:Signed32 b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 7 for integer division panic on division by zero.
Labels: multiplicative-expr, int, int:Signed32, DecimalNumber, int:MIN_VALUE

public function main() {
    int:Signed32 a = -0;
    int b = int:MIN_VALUE / a; // @panic division by zero
}

Test-Case: panic
Description: Test panic on integer division overflow with int:Signed32.
Labels: multiplicative-expr, int, int:Signed32, DecimalNumber, int:MIN_VALUE

public function main() {
    int a = int:MIN_VALUE;
    int:Signed32 b = -1;
    int c = a / b; // @panic integer overflow on division
}

Test-Case: output
Description: Test integer division non-overflow scenarios, for positive non-zero integers, 
             for user-defined subtype of int.
Labels: multiplicative-expr, union-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

public function main() {
    Ints a = 1;
    Ints b = 2;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
}

Test-Case: output
Description: Test integer division non-overflow scenarios, for negative non-zero integers,  
             for user-defined subtype of int.
Labels: multiplicative-expr, union-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

public function main() {
    Ints a = -1;
    Ints b = -2;

    io:println(a / a); // @output 1
    io:println(a / b); // @output 0

    io:println(b / a); // @output 2
    io:println(b / b); // @output 1
}

Test-Case: output
Description: Test integer division non-overflow scenarios, where one operand is negative 
             and the other is positive, for user-defined subtype of int.
Labels: multiplicative-expr, union-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

public function main() {
    Ints a = -1;
    Ints b = -2;
    Ints c = 1;
    Ints d = 2;

    io:println(a / c); // @output -1
    io:println(a / d); // @output 0

    io:println(b / c); // @output -2
    io:println(b / d); // @output -1

    io:println(c / a); // @output -1
    io:println(c / b); // @output 0

    io:println(d / a); // @output -2
    io:println(d / b); // @output -1
}

Test-Case: output
Description: Test integer division non-overflow scenarios, where the first operand is zero, for 
             user-defined subtype of int.
Labels: multiplicative-expr, union-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

public function main() {
    Ints a = -2;
    Ints b = -1;
    Ints c = -0;
    Ints d = 0;
    Ints e = 1;
    Ints f = 2;

    io:println(c / a); // @output 0
    io:println(c / b); // @output 0
    io:println(c / e); // @output 0
    io:println(c / f); // @output 0

    io:println(d / a); // @output 0
    io:println(d / b); // @output 0
    io:println(d / e); // @output 0
    io:println(d / f); // @output 0
}

Test-Case: panic
Description: Test 1 for integer division panic on division by zero, for user-defined subtype of int.
Labels: multiplicative-expr, union-type, DecimalNumber, module-type-defn

type Ints 0|1|2;

public function main() {
    Ints a = 1;
    Ints b = 0;

    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test 1 for integer division panic on division by zero, for user-defined subtype of int.
Labels: multiplicative-expr, union-type, DecimalNumber, unary-minus, module-type-defn

type Ints -2|-1|0|1|2;

public function main() {
    Ints a = -1;
    Ints b = 0;    
    int c = a / b; // @panic division by zero
}

Test-Case: panic
Description: Test for integer division overflow with user-defined subtype of int.
Labels: multiplicative-expr, union-type, DecimalNumber, unary-minus, module-type-defn,int:MIN_VALUE

type Ints -2|-1|0|1|2;

public function main() {
    int a = int:MIN_VALUE;
    Ints b = -1;
    int c = a / b; // @panic integer overflow on division
}

