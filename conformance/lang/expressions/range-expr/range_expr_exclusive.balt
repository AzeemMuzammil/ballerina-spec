Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are positive integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr

function init() {
    int startIndex = 0;
    int endIndex = 6;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 6
    io:println(arr); // @output [0,1,2,3,4,5]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are negative integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        unary-minus, additive-expr

function init() {
    int startIndex = -6;
    int endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 5
    io:println(arr); // @output [-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when the value of one expression is a negative integer and the value of the other
             expression is a positive integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        unary-minus, additive-expr

function init() {
    int startIndex = -10;
    int endIndex = 20;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 30
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
}

Test-Case: output
Description: Test range expression (exclusive) when the value of one expression is a negative integer and the value of the other
             expression is a positive integer.
Labels: range-expr, iterable-exclusive, int, DecimalNumber, unary-minus, additive-expr

function init() {
    int startIndex = -7635315;
    int endIndex = 964732;
    int count = 0;
    foreach int i in startIndex ..< endIndex {
        count = count + i;
    }
    io:println(count); // @output -28683667958724
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are positive Signed8 integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber, int:Signed8, additive-expr

function init() {
    int:Signed8 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
        arr[count] = i;
        count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are negative Signed8 integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int:Signed8 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when the value of one expression is a negative Signed8 integer and
             the value of the other expression is a positive Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int:Signed8 endIndex = 20;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 30
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are positive Signed16 integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr

function init() {
    int:Signed16 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are negative Signed16 integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int:Signed16 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when the value of one expression is a negative Signed16 integer and
             the value of the other expression is a positive Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int:Signed16 endIndex = 20;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 30
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are positive Signed32 integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr

function init() {
    int:Signed32 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are negative Signed32 integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int:Signed32 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when the value of one expression is a negative Signed32 integer and
             the value of the other expression is a positive Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int:Signed32 endIndex = 20;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 30
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are Unsigned8 integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, additive-expr

function init() {
    int:Unsigned8 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are Unsigned16 integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, additive-expr

function init() {
    int:Unsigned16 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are Unsigned32 integers.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, additive-expr

function init() {
    int:Unsigned32 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive integer and value of the
             second expression is a positive Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, additive-expr

function init() {
    int startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative integer and value of the
             second expression is a negative Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, unary-minus, additive-expr

function init() {
    int startIndex = -10;
    int:Signed8 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative integer and value of the
             second expression is a positive Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, unary-minus, additive-expr

function init() {
    int startIndex = -10;
    int:Signed8 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive integer and value of the
             second expression is a positive Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr

function init() {
    int startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative integer and value of the
             second expression is a negative Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, unary-minus, additive-expr

function init() {
    int startIndex = -10;
    int:Signed16 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative integer and value of the
             second expression is a positive Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, unary-minus, additive-expr

function init() {
    int startIndex = -10;
    int:Signed16 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive integer and value of the
             second expression is a positive Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr

function init() {
    int startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative integer and value of the
             second expression is a negative Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, unary-minus, additive-expr

function init() {
    int startIndex = -10;
    int:Signed32 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative integer and value of the
             second expression is a positive Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, unary-minus, additive-expr

function init() {
    int startIndex = -10;
    int:Signed32 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive integer and value of the
             second expression is a Unsigned8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, additive-expr

function init() {
    int startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative integer and value of the
             second expression is a Unsigned8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, unary-minus, additive-expr

function init() {
    int startIndex = -10;
    int:Unsigned8 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        byte, additive-expr

function init() {
    int startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        byte, unary-minus, additive-expr

function init() {
    int startIndex = -10;
    byte endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive integer and value of the
             second expression is a Unsigned16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, additive-expr

function init() {
    int startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative integer and value of the
             second expression is a Unsigned16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, unary-minus, additive-expr

function init() {
    int startIndex = -10;
    int:Unsigned16 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive integer and value of the
             second expression is a Unsigned32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, additive-expr

function init() {
    int startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative integer and value of the
             second expression is a Unsigned32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, unary-minus, additive-expr

function init() {
    int startIndex = -10;
    int:Unsigned32 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed8 integer and value of the
             second expression is a positive integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, additive-expr

function init() {
    int:Signed8 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed8 integer and value of the
             second expression is a negative integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed8 integer and value of the
             second expression is a positive integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed8 integer and value of the
             second expression is a positive Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed16, additive-expr

function init() {
    int:Signed8 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed8 integer and value of the
             second expression is a negative Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed16, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int:Signed16 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed8 integer and value of the
             second expression is a positive Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed16, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int:Signed16 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed8 integer and value of the
             second expression is a positive Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed32, additive-expr

function init() {
    int:Signed8 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed8 integer and value of the
             second expression is a negative Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int:Signed32 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed8 integer and value of the
             second expression is a positive Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int:Signed32 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed8 integer and value of the
             second expression is a Unsigned8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned8, additive-expr

function init() {
    int:Signed8 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed8 integer and value of the
             second expression is a Unsigned8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned8, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int:Unsigned8 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed8 integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, byte, additive-expr

function init() {
    int:Signed8 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed8 integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, byte, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    byte endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed8 integer and value of the
             second expression is a Unsigned16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned16, additive-expr

function init() {
    int:Signed8 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed8 integer and value of the
             second expression is a Unsigned16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned16, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int:Unsigned16 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed8 integer and value of the
             second expression is a Unsigned32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned32, additive-expr

function init() {
    int:Signed8 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed8 integer and value of the
             second expression is a Unsigned32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned32, unary-minus, additive-expr

function init() {
    int:Signed8 startIndex = -10;
    int:Unsigned32 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed16 integer and value of the
             second expression is a positive integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr

function init() {
    int:Signed16 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed16 integer and value of the
             second expression is a negative integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed16 integer and value of the
             second expression is a positive integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed16 integer and value of the
             second expression is a positive Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed16, additive-expr

function init() {
    int:Signed16 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed16 integer and value of the
             second expression is a negative Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed16, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int:Signed8 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed16 integer and value of the
             second expression is a positive Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed16, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int:Signed8 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed16 integer and value of the
             second expression is a positive Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed32, additive-expr

function init() {
    int:Signed16 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed16 integer and value of the
             second expression is a negative Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int:Signed32 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed16 integer and value of the
             second expression is a positive Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int:Signed32 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed16 integer and value of the
             second expression is a Unsigned8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned8, additive-expr

function init() {
    int:Signed16 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed16 integer and value of the
             second expression is a Unsigned8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned8, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int:Unsigned8 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed16 integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, byte, additive-expr

function init() {
    int:Signed16 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed16 integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, byte, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    byte endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed16 integer and value of the
             second expression is a Unsigned16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned16, additive-expr

function init() {
    int:Signed16 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed16 integer and value of the
             second expression is a Unsigned16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned16, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int:Unsigned16 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed16 integer and value of the
             second expression is a Unsigned32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned32, additive-expr

function init() {
    int:Signed16 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed16 integer and value of the
             second expression is a Unsigned32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned32, unary-minus, additive-expr

function init() {
    int:Signed16 startIndex = -10;
    int:Unsigned32 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed32 integer and value of the
             second expression is a positive integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr

function init() {
    int:Signed32 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed32 integer and value of the
             second expression is a negative integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed32 integer and value of the
             second expression is a positive integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed32 integer and value of the
             second expression is a positive Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed32, additive-expr

function init() {
    int:Signed32 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed32 integer and value of the
             second expression is a negative Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int:Signed8 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed32 integer and value of the
             second expression is a positive Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int:Signed8 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed32 integer and value of the
             second expression is a positive Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed32, additive-expr

function init() {
    int:Signed32 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed32 integer and value of the
             second expression is a negative Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int:Signed16 endIndex = -1;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed32 integer and value of the
             second expression is a positive Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed32, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int:Signed16 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed32 integer and value of the
             second expression is a Unsigned8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned8, additive-expr

function init() {
    int:Signed32 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed32 integer and value of the
             second expression is a Unsigned8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned8, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int:Unsigned8 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed32 integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, byte, additive-expr

function init() {
    int:Signed32 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed32 integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, byte, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    byte endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed32 integer and value of the
             second expression is a Unsigned16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned16, additive-expr

function init() {
    int:Signed32 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed32 integer and value of the
             second expression is a Unsigned16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned16, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int:Unsigned16 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a positive Signed32 integer and value of the
             second expression is a Unsigned32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned32, additive-expr

function init() {
    int:Signed32 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a negative Signed32 integer and value of the
             second expression is a Unsigned32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned32, unary-minus, additive-expr

function init() {
    int:Signed32 startIndex = -10;
    int:Unsigned32 endIndex = 2;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned8 integer and value of the
             second expression is a positive integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, additive-expr

function init() {
    int:Unsigned8 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned8 integer and value of the
             second expression is a positive Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned8, additive-expr

function init() {
    int:Unsigned8 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned8 integer and value of the
             second expression is a positive Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned8, additive-expr

function init() {
    int:Unsigned8 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned8 integer and value of the
             second expression is a positive Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned8, additive-expr

function init() {
    int:Unsigned8 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned8 integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, byte, additive-expr

function init() {
    int:Unsigned8 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned8 integer and value of the
             second expression is a Unsigned16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, int:Unsigned16, additive-expr

function init() {
    int:Unsigned8 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned8 integer and value of the
             second expression is a Unsigned32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, int:Unsigned32, additive-expr

function init() {
    int:Unsigned8 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned16 integer and value of the
             second expression is a positive integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, additive-expr

function init() {
    int:Unsigned16 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned16 integer and value of the
             second expression is a positive Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned16, additive-expr

function init() {
    int:Unsigned16 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned16 integer and value of the
             second expression is a positive Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned16, additive-expr

function init() {
    int:Unsigned16 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned16 integer and value of the
             second expression is a positive Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned16, additive-expr

function init() {
    int:Unsigned16 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned16 integer and value of the
             second expression is a Unsigned8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, int:Unsigned16, additive-expr

function init() {
    int:Unsigned16 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned16 integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, byte, additive-expr

function init() {
    int:Unsigned16 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned16 integer and value of the
             second expression is a Unsigned32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, int:Unsigned32, additive-expr

function init() {
    int:Unsigned16 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned32 integer and value of the
             second expression is a positive integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, additive-expr

function init() {
    int:Unsigned32 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned32 integer and value of the
             second expression is a positive Signed8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned32, additive-expr

function init() {
    int:Unsigned32 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned32 integer and value of the
             second expression is a positive Signed16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned32, additive-expr

function init() {
    int:Unsigned32 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned32 integer and value of the
             second expression is a positive Signed32 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned32, additive-expr

function init() {
    int:Unsigned32 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned32 integer and value of the
             second expression is a Unsigned8 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, int:Unsigned32, additive-expr

function init() {
    int:Unsigned32 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned32 integer and value of the
             second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, byte, additive-expr

function init() {
    int:Unsigned32 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when value of the first expression is a Unsigned32 integer and value of the
             second expression is a Unsigned16 integer.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, int:Unsigned32, additive-expr

function init() {
    int:Unsigned32 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are of user-defined subtypes of int.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        singleton-type, union-type, module-type-decl, additive-expr

type Ints 1|10;

function init() {
    Ints startIndex = 1;
    Ints endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when values of both expressions are of union of int subtypes.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned32, union-type, additive-expr

function init() {
    int:Signed8|int:Unsigned32 startIndex = 1;
    int:Signed8|int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];
    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when the value of the first expression and the value of the second expression
             is equal.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber, additive-expr

function init() {
    int startIndex = 5;
    int endIndex = 5;
    int count = 0;
    int[] arr = [];

    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 0
    io:println(arr); // @output []
}

Test-Case: output
Description: Test range expression (exclusive) when the value of the first expression is less than the
             value of the second expression.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber, additive-expr

function init() {
    int startIndex = 5;
    int endIndex = 3;
    int count = 0;
    int[] arr = [];

    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 0
    io:println(arr); // @output []
}

Test-Case: output
Description: Test range expression (exclusive) when the types expressions are inferred.
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, var

function init() {
    var startIndex = 1;
    var endIndex = 10;
    int count = 0;
    int[] arr = [];

    foreach int i in startIndex ..< endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test field and member access as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, array-type, list-constructor-expr, member-access-expr, field-access-expr,
        DecimalNumber, int, mapping-constructor-expr, module-type-defn, record-type, additive-expr

type Record record {
    int x;
};

function init() {
    Record c = {x: 10};
    int[] d = [30, 40];
    int count = 0;
    int[] arr = [];

    foreach int i in c.x ..< d[0] {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 20
    io:println(arr); // @output [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]
}

Test-Case: output
Description: Test function and method call as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, DecimalNumber, array-type, list-constructor-expr, member-access-expr,
        int, explicit-new-expr, function-call-expr, module-class-defn, method-call-expr, additive-expr

class Class {
    function getInt() returns int {
        return 1;
    }
}

function init() {
    Class cls = new Class();
    int count = 0;
    int[] arr = [];

    foreach int i in cls.getInt() ..< getInt() {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

function getInt() returns int {
    return 10;
}

Test-Case: output
Description: Test type cast expression as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, DecimalNumber, array-type, list-constructor-expr, member-access-expr,
        int, type-cast-expr, additive-expr

function init() {
    int count = 0;
    int[] arr = [];

    foreach int i in <int>1.0 ..< <int>10.0 {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test unary expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, DecimalNumber, array-type, list-constructor-expr, member-access-expr, int,
       unary-complement, unary-minus, unary-plus, additive-expr

function init() {
    int count = 0;
    int[] arr = [];

    foreach int i in -10 ..< +2 {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]

    count = 0;
    arr = [];
    foreach int i in -10 ..< ~2 {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 7
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4]
}

Test-Case: output
Description: Test additive expression as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, additive-expr, array-type, list-constructor-expr, member-access-expr,
        int, DecimalNumber

function init() {
    int count = 0;
    int[] arr = [];

    foreach int i in 0+1 ..< 12-2 {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test multiplicative expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, DecimalNumber, array-type, list-constructor-expr, member-access-expr, int,
        multiplicative-expr, additive-expr

function init() {
    int count = 0;
    int[] arr = [];

    foreach int i in 1*2 ..< 36/4 {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 7
    io:println(arr); // @output [2,3,4,5,6,7,8]

    count = 0;
    arr = [];
    foreach int i in 34%5 ..< 4*5 {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 16
    io:println(arr); // @output [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
}

Test-Case: output
Description: Test binary bitwise expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, binary-bitwise-expr, DecimalNumber, array-type, list-constructor-expr,
        member-access-expr, int, additive-expr

function init() {
    int count = 0;
    int[] arr = [];

    foreach int i in (1&2) ..< (4|8) {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [0,1,2,3,4,5,6,7,8,9,10,11]

    count = 0;
    arr = [];
    foreach int i in (6|3) ..< (2^8) {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 3
    io:println(arr); // @output [7,8,9]
}

Test-Case: output
Description: Test checking expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, check, checkpanic, DecimalNumber, error, array-type, list-constructor-expr,
        member-access-expr, int, union-type, optional-type, additive-expr

function init() returns error? {
    int|error startIndex = 2;
    int|error endIndex = 12;
    int count = 0;
    int[] arr = [];

    foreach int i in check startIndex ..< checkpanic endIndex {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 10
    io:println(arr); // @output [2,3,4,5,6,7,8,9,10,11]
}

Test-Case: output
Description: Test let expression as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, let-expr, DecimalNumber, int

function init() {
    int count = 0;
    int[] arr = [];

    foreach int i in (let int h1 = 10 in h1) ..< (let int h1 = 25 in h1) {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 15
    io:println(arr); // @output [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
}

Test-Case: output
Description: Test shift expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, shift-expr, DecimalNumber, int

function init() {
    int count = 0;
    int[] arr = [];

    foreach int i in 1 << 2 ..< 100 >> 4 {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 2
    io:println(arr); // @output [4,5]
}

Test-Case: output
Description: Test conditional expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, conditional-expr, DecimalNumber, error, array-type, list-constructor-expr,
        member-access-expr, int, nil-literal, optional-type, union-type, additive-expr

function init() {
    int|error a = 10;
    int? b = ();
    int count = 0;
    int[] arr = [];

    foreach int i in (a is error ? 5 : a) ..< (b ?: 25) {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 15
    io:println(arr); // @output [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
}

Test-Case: output
Description: Test lang.int constants as expressions in range expression (exclusive).
Labels: range-expr, iterable-exclusive, int, int:SIGNED8_MAX_VALUE, int:UNSIGNED8_MAX_VALUE, additive-expr

function init() {
    int count = 0;

    foreach int i in int:SIGNED8_MAX_VALUE ..< int:UNSIGNED8_MAX_VALUE {
        count = count + i;
    }
    io:println(count); // @output 24384
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are positive
             integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, object-type, record-type, optional-type

function init() {
    int startIndex = 0;
    int endIndex = 6;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex  ..<  endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 6
    io:println(arr); // @output [0,1,2,3,4,5]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are negative
             integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, object-type, record-type, optional-type,  unary-minus

function init() {
    int startIndex = -6;
    int endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex  ..<  endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 5
    io:println(arr); // @output [-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when the value of one expression is a
             negative integer and the value of the other expression is a positive integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, object-type, record-type, optional-type,  unary-minus

function init() {
    int startIndex = -10;
    int endIndex = 20;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex  ..<  endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 30
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when the value of one expression is a negative
             integer and the value of the other expression is a positive integer.
Labels: range-expr, iterable-object, int, DecimalNumber, additive-expr, object-type, record-type, optional-type,
        unary-minus

function init() {
    int startIndex = -7635315;
    int endIndex = 964732;
    int count = 0;

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex  ..<  endIndex;

    foreach int i in range {
          count = count + i;
    }
    io:println(count); // @output -28683667958724
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are positive
             Signed8 integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, int:Signed8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed8 startIndex = 1;
    int:Signed8 endIndex = 10;

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex  ..<  endIndex;

    int count = 0;
    int[] arr = [];
    foreach int i in range {
        arr[count] = i;
        count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are negative
             Signed8 integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int:Signed8 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when the value of one expression is a negative
             Signed8 integer and the value of the other expression is a positive Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int:Signed8 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are positive
             Signed16 integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed16 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are negative
             Signed16 integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int:Signed16 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when the value of one expression is a 
             negative Signed16 integer and the value of the other expression is a positive Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int:Signed16 endIndex = 20;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 30
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are positive 
             Signed32 integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed32 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are negative 
             Signed32 integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int:Signed32 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when the value of one expression is a 
             negative Signed32 integer and the value of the other expression is a positive Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int:Signed32 endIndex = 20;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 30
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are 
             Unsigned8 integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned8 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are 
             Unsigned16 integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Unsigned16 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are 
             Unsigned32 integers.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Unsigned32 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a 
             positive integer and value of the second expression is a positive Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, additive-expr, object-type, record-type, optional-type

function init() {
    int startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a 
             negative integer and value of the second expression is a negative Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int startIndex = -10;
    int:Signed8 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a 
             negative integer and value of the second expression is a positive Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int startIndex = -10;
    int:Signed8 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a 
             positive integer and value of the second expression is a positive Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr, object-type, record-type, optional-type

function init() {
    int startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a 
             negative integer and value of the second expression is a negative Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int startIndex = -10;
    int:Signed16 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a 
             negative integer and value of the second expression is a positive Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int startIndex = -10;
    int:Signed16 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a 
             positive integer and value of the second expression is a positive Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr, object-type, record-type, optional-type

function init() {
    int startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a 
             negative integer and value of the second expression is a negative Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int startIndex = -10;
    int:Signed32 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative 
             integer and value of the second expression is a positive Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int startIndex = -10;
    int:Signed32 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive 
             integer and value of the second expression is a Unsigned8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, additive-expr, object-type, record-type, optional-type

function init() {
    int startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative 
             integer and value of the second expression is a Unsigned8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int startIndex = -10;
    int:Unsigned8 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive 
             integer and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber, byte,
        additive-expr, object-type, record-type, optional-type

function init() {
    int startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative integer
             and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber, byte,
        additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int startIndex = -10;
    byte endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive integer
             and value of the second expression is a Unsigned16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, additive-expr, object-type, record-type, optional-type

function init() {
    int startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative integer
             and value of the second expression is a Unsigned16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int startIndex = -10;
    int:Unsigned16 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive integer
             and value of the second expression is a Unsigned32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, additive-expr, object-type, record-type, optional-type

function init() {
    int startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative integer
             and value of the second expression is a Unsigned32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int startIndex = -10;
    int:Unsigned32 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed8
             integer and value of the second expression is a positive integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed8 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed8
             integer and value of the second expression is a negative integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed8
             integer and value of the second expression is a positive integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed8
             integer and value of the second expression is a positive Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed8 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed8
             integer and value of the second expression is a negative Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int:Signed16 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed8
             integer and value of the second expression is a positive Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int:Signed16 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed8
             integer and value of the second expression is a positive Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed8 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;


    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed8
             integer and value of the second expression is a negative Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int:Signed32 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed8
             integer and value of the second expression is a positive Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Signed32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int:Signed32 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed8
             integer and value of the second expression is a Unsigned8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed8 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;


    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed8
             integer and value of the second expression is a Unsigned8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int:Unsigned8 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed8 integer
             and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, byte, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed8 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed8
             integer and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, byte, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    byte endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed8
             integer and value of the second expression is a Unsigned16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed8 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed8
             integer and value of the second expression is a Unsigned16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int:Unsigned16 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive 
             Signed8 integer and value of the second expression is a Unsigned32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed8 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed8
             integer and value of the second expression is a Unsigned32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed8 startIndex = -10;
    int:Unsigned32 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed16
             integer and value of the second expression is a positive integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed16 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed16
             integer and value of the second expression is a negative integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed16
             integer and value of the second expression is a positive integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed16
             integer and value of the second expression is a positive Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed16 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed16
             integer and value of the second expression is a negative Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int:Signed8 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed16
             integer and value of the second expression is a positive Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int:Signed8 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed16
             integer and value of the second expression is a positive Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed16 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed16
             integer and value of the second expression is a negative Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int:Signed32 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed16
             integer and value of the second expression is a positive Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Signed32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int:Signed32 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed16
             integer and value of the second expression is a Unsigned8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed16 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed16
             integer and value of the second expression is a Unsigned8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int:Unsigned8 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed16
             integer and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, byte, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed16 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed16
             integer and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, byte, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    byte endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed16
             integer and value of the second expression is a Unsigned16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed16 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed16
             integer and value of the second expression is a Unsigned16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int:Unsigned16 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed16
             integer and value of the second expression is a Unsigned32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed16 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed16
             integer and value of the second expression is a Unsigned32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed16, int:Unsigned32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed16 startIndex = -10;
    int:Unsigned32 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed32
             integer and value of the second expression is a positive integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed32 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed32
             integer and value of the second expression is a negative integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed32
             integer and value of the second expression is a positive integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed32
             integer and value of the second expression is a positive Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Signed8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed32 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed32
             integer and value of the second expression is a negative Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Signed8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int:Signed8 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed32
             integer and value of the second expression is a positive Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Signed8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int:Signed8 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed32
             integer and value of the second expression is a positive Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Signed16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed32 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed32
             integer and value of the second expression is a negative Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Signed16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int:Signed16 endIndex = -1;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed32
             integer and value of the second expression is a positive Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Signed16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int:Signed16 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed32
             integer and value of the second expression is a Unsigned8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed32 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed32
             integer and value of the second expression is a Unsigned8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned8, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int:Unsigned8 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed32
             integer and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, bye, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed32 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed32
             integer and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, byte, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    byte endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed32
             integer and value of the second expression is a Unsigned16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed32 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed32
             integer and value of the second expression is a Unsigned16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned16, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int:Unsigned16 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a positive Signed32
             integer and value of the second expression is a Unsigned32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed32 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a negative Signed32
             integer and value of the second expression is a Unsigned32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed32, int:Unsigned32, additive-expr, object-type, record-type, optional-type, unary-minus

function init() {
    int:Signed32 startIndex = -10;
    int:Unsigned32 endIndex = 2;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned8
             integer and value of the second expression is a positive integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned8 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned8
             integer and value of the second expression is a positive Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, int:Signed8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned8 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;


    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned8
             integer and value of the second expression is a positive Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, int:Signed16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned8 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned8
             integer and value of the second expression is a positive Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, int:Signed32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned8 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned8
             integer and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, byte, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned8 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned8
             integer and value of the second expression is a Unsigned16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, int:Unsigned16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned8 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned8
             integer and value of the second expression is a Unsigned32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned8, int:Unsigned32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned8 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;


    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned16
             integer and value of the second expression is a positive integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned16 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned16
             integer and value of the second expression is a positive Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, int:Signed8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned16 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned16
             integer and value of the second expression is a positive Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, int:Signed16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned16 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned16
             integer and value of the second expression is a positive Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, int:Signed32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned16 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned16
             integer and value of the second expression is a Unsigned8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, int:Unsigned8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned16 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;


    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned16 integer
             and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, byte, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned16 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned16
             integer and value of the second expression is a Unsigned32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned16, int:Unsigned32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned16 startIndex = 1;
    int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned32
             integer and value of the second expression is a positive integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned32 startIndex = 1;
    int endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned32
             integer and value of the second expression is a positive Signed8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, int:Signed8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned32 startIndex = 1;
    int:Signed8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned32
             integer and value of the second expression is a positive Signed16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, int:Signed16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned32 startIndex = 1;
    int:Signed16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned32
             integer and value of the second expression is a positive Signed32 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, int:Signed32, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned32 startIndex = 1;
    int:Signed32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned32
             integer and value of the second expression is a Unsigned8 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, int:Unsigned8, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned32 startIndex = 1;
    int:Unsigned8 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned32
             integer and value of the second expression is a byte.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, byte, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned32 startIndex = 1;
    byte endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when value of the first expression is a Unsigned32
             integer and value of the second expression is a Unsigned16 integer.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Unsigned32, int:Unsigned16, additive-expr, object-type, record-type, optional-type

function init() {
    int:Unsigned32 startIndex = 1;
    int:Unsigned16 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are of 
             user-defined subtypes of int.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        singleton-type, union-type, module-type-decl, additive-expr, object-type, record-type, optional-type

type Ints 1|10;

function init() {
    Ints startIndex = 1;
    Ints endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when values of both expressions are of union of 
             int subtypes.
Fail-Issue: ballerina-platform/ballerina-lang#33139  
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        int:Signed8, int:Unsigned32, union-type, additive-expr, object-type, record-type, optional-type

function init() {
    int:Signed8|int:Unsigned32 startIndex = 1;
    int:Signed8|int:Unsigned32 endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when the value of the first expression and the value of the
             second expression is equal.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, object-type, record-type, optional-type

function init() {
    int startIndex = 5;
    int endIndex = 5;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 0
    io:println(arr); // @output []
}

Test-Case: output
Description: Test range expression (exclusive)  when the value of the first expression is less than the
             value of the second expression.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, object-type, record-type, optional-type

function init() {
    int startIndex = 5;
    int endIndex = 3;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 0
    io:println(arr); // @output []
}

Test-Case: output
Description: Test range expression (exclusive) with iterable object when the types of the expressions are inferred.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, object-type, record-type, optional-type, var

function init() {
    var startIndex = 1;
    var endIndex = 10;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) when the types of the expressions and type of the range expression are inferred.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, var

function init() {
    var startIndex = 1;
    var endIndex = 10;
    int count = 0;
    int[] arr = [];

    var range = startIndex ..< endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) at module level.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, object-type, record-type, optional-type, var

int startIndex = 1;
int endIndex = 10;

object {
    *object:Iterable;
    public isolated function iterator() returns object {
        public isolated function next() returns (record {|int value;|}?);
    };
} range = startIndex ..< endIndex;

function init() {
    int count = 0;
    int[] arr = [];

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test range expression (exclusive) at module level.
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber,
        additive-expr, var

int startIndex = 1;
int endIndex = 10;

var range = startIndex ..< endIndex;

function init() {
    int count = 0;
    int[] arr = [];

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test iterable object returned by the range expression (exclusive).
Labels: range-expr, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber, object-type,
        optional-type, var, value:toBalString, method-call-expr

function init() {
    object {
        public isolated function iterator() returns (object {
            public isolated function next() returns (record {|int value;|}?);
        });
    } range = 1 ..< 3;

    var iterator = range.iterator();

    record {| int value; |}? rec = iterator.next();
    io:println(rec); // @output {"value":1}
    io:println(rec?.value); // @output 1

    rec = iterator.next();
    io:println(rec); // @output {"value":2}
    io:println(rec?.value); // @output 2

    rec = iterator.next();
    io:println(rec.toBalString()); // @output ()
    io:println(rec?.value.toBalString()); // @output ()
}

Test-Case: output
Description: Test field and member access as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, array-type, list-constructor-expr, member-access-expr, field-access-expr,
        DecimalNumber, int, mapping-constructor-expr, module-type-defn, object-type, record-type, optional-type,
        additive-expr

type Record record {
    int x;
};

function init() {
    Record c = {x: 10};
    int[] d = [30, 40];
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = c.x ..< d[0];

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 20
    io:println(arr); // @output [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]
}

Test-Case: output
Description: Test function and method call as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, DecimalNumber, array-type, list-constructor-expr, member-access-expr,
        int, explicit-new-expr, function-call-expr, module-class-defn, method-call-expr, object-type, record-type,
        optional-type, additive-expr

class Class {
    function getInt() returns int {
        return 1;
    }
}

function init() {
    Class cls = new Class();
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = cls.getInt() ..< getInt();

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

function getInt() returns int {
    return 10;
}

Test-Case: output
Description: Test type cast expression as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, DecimalNumber, array-type, list-constructor-expr, member-access-expr,
        int, type-cast-expr, object-type, record-type, optional-type, additive-expr

function init() {
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = <int>1.0 ..< <int>10.0;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test unary expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, DecimalNumber, array-type, list-constructor-expr, member-access-expr,
        int, unary-complement, unary-minus, unary-plus, object-type, record-type, optional-type, additive-expr

function init() {
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = -10 ..< +2;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1]

    count = 0;
    arr = [];
    range = -10 ..< ~2;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 7
    io:println(arr); // @output [-10,-9,-8,-7,-6,-5,-4]
}

Test-Case: output
Description: Test additive expression as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, additive-expr, array-type, list-constructor-expr, member-access-expr, int,
        DecimalNumber, object-type, record-type, optional-type

function init() {
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = 0+1 ..< 12-2;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 9
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: output
Description: Test multiplicative expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, additive-expr, DecimalNumber, array-type, list-constructor-expr,
        member-access-expr, int, multiplicative-expr, object-type, record-type, optional-type

function init() {
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = 1*2 ..< 36/4;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 7
    io:println(arr); // @output [2,3,4,5,6,7,8]

    count = 0;
    arr = [];
    range = 34%5 ..< 4*5;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 16
    io:println(arr); // @output [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
}

Test-Case: output
Description: Test binary bitwise expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, binary-bitwise-expr, DecimalNumber, array-type, list-constructor-expr,
        member-access-expr, int, additive-expr, object-type, record-type,  optional-type

function init() {
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = (1&2) ..< (4|8);

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 12
    io:println(arr); // @output [0,1,2,3,4,5,6,7,8,9,10,11]

    count = 0;
    arr = [];
    range = (6|3) ..< (2^8);

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 3
    io:println(arr); // @output [7,8,9]
}

Test-Case: output
Description: Test checking expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, check, checkpanic, DecimalNumber, error, additive-expr, array-type,
       list-constructor-expr, member-access-expr, int, union-type, object-type, record-type, optional-type

function init() returns error? {
    int|error startIndex = 2;
    int|error endIndex = 12;
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = check startIndex ..< checkpanic endIndex;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 10
    io:println(arr); // @output [2,3,4,5,6,7,8,9,10,11]
}

Test-Case: output
Description: Test let expression as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, DecimalNumber, array-type, list-constructor-expr, member-access-expr, int, let-expr,
        additive-expr, object-type, record-type, optional-type

function init() {
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = (let int h1 = 10 in h1) ..< (let int h1 = 25 in h1);

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 15
    io:println(arr); // @output [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
}

Test-Case: output
Description: Test shift expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, DecimalNumber, array-type, list-constructor-expr, member-access-expr, int,
        shift-expr, additive-expr, object-type, record-type,  optional-type

function init() {
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = 1<<2 ..< 100>>4;

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 2
    io:println(arr); // @output [4,5]
}

Test-Case: output
Description: Test conditional expressions as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, conditional-expr, DecimalNumber, error, array-type, list-constructor-expr,
        member-access-expr, int, additive-expr, nil-literal, optional-type, union-type, object-type, record-type

function init() {
    int|error a = 10;
    int? b = ();
    int count = 0;
    int[] arr = [];

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = (a is error ? 5 : a) ..< (b ?: 25);

    foreach int i in range {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 15
    io:println(arr); // @output [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
}

Test-Case: output
Description: Test lang.int constants as expressions in range expression (exclusive).
Labels: range-expr, iterable-object, int, DecimalNumber, int:SIGNED8_MAX_VALUE, int:UNSIGNED8_MAX_VALUE, additive-expr,
        object-type, record-type, optional-type

function init() {
    int count = 0;

    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = int:SIGNED8_MAX_VALUE ..< int:UNSIGNED8_MAX_VALUE;

    foreach int i in range {
          count = count + i;
    }
    io:println(count); // @output 24384
}

Test-Case: output
Description: Test isolatedness of range expression (exclusive).
Fail-Issue: ballerina-platform/ballerina-lang#33163
Labels: range-expr, iterable-object, object-type, additive-expr, array-type, list-constructor-expr, member-access-expr,
        int, DecimalNumber, function-call-expr, record-type, optional-type, lock-stmt

isolated int j = 1;

function init() {
    int count = 0;
    int[] arr = [];
    foreach int i in getRange() {
          arr[count] = i;  
          count = count + 1;
    }
    io:println(count); // @output 10
    io:println(arr); // @output [1,2,3,4,5,6,7,8,9,10]
}

function getRange() returns object {
    *object:Iterable;
    public isolated function iterator() returns object {
        public isolated function next() returns (record {|int value;|}?);
    };
} {
    lock {
        return j ..< j + 9;
    }
}

Test-Case: output
Description: Test isolatedness of the resultant object of the range expression (exclusive).
Fail-Issue: ballerina-platform/ballerina-lang#33163
Labels: range-expr, object-type, record-type, array-type, list-constructor-expr, member-access-expr, int, optional-type,
        is-expr, any, type-cast-expr

function init() {
    object {
        *object:Iterable;
        public isolated function iterator() returns object {
            public isolated function next() returns (record {|int value;|}?);
        };
    } range = 1 ..< 10;

    io:println(<any>range is isolated object {}); // @output true
}

Test-Case: output
Description: Test isolatedness of the iterator() and next() methods of range expression (exclusive).
Fail-Issue: ballerina-platform/ballerina-lang#33163
Labels: range-expr, object-type, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber, record-type,
        optional-type, is-expr, method-call-expr

function init() {
    object {
        public isolated function iterator() returns (object {
            public isolated function next() returns (record {|int value;|}?);
        });
    } range = 1 ..< 10;


    io:println(<any>range.iterator() is isolated function); // @output true
    io:println(<any>range.iterator().next() is isolated function); // @output true
}

Test-Case: output
Description: Test range expression (exclusive) with query expression.
Labels: range-expr, array-type, list-constructor-expr, member-access-expr, int, DecimalNumber, query-expr

function init() {
    int[] a = from int i in 1 ..< 10
              select i;

    io:println(a); // @output [1,2,3,4,5,6,7,8,9]
}

Test-Case: error
Description: Test range expression (exclusive) when static type of either of the expression is not a subtype of int.
Labels: range-expr, int, DecimalFloatingPointNumber, string

function init() {
    _ = 1.0  ..<  10; // @error  ..<  not defined when static type of either of the expression is not a subtype of int
    _ = 1  ..<  10.0; // @error  ..<  not defined when static type of either of the expression is not a subtype of int
    _ = 1.0  ..<  10.0; // @error  ..<  not defined when static type of either of the expression is not a subtype of int

    _ = "1"  ..<  10; // @error  ..<  not defined when static type of either of the expression is not a subtype of int
    _ = 1  ..<  "10"; // @error  ..<  not defined when static type of either of the expression is not a subtype of int
    _ = "1"  ..<  "10"; // @error  ..<  not defined when static type of either of the expression is not a subtype of int
}

Test-Case: error
Description: Test assigning the result of range expression (exclusive) to an incompatible type.
Labels: range-expr, int, DecimalNumber, object-type, float, record-type, optional-type

function init() {
    int _ = 1  ..<  10; // @error result of a range expression is an object

    object {
        public isolated function iterator() returns (object {
            public isolated function next() returns (record {|float value;|}?);
        });
    } _ = 1  ..<  10; // @error next() of range expression's iterable object returns a record {|int value;|}
}

Test-Case: error
Description: Test assigning the result of range expression (exclusive) to an incompatible type when the static
             type of the range expression is inferred.
Labels: range-expr, int, DecimalNumber, object-type, var, record-type, optional-type, float

function init() {
    var a = 1  ..<  10;

    int _ = a; // @error result of a range expression is an object

    object {
        public isolated function iterator() returns (object {
            public isolated function next() returns (record {|float value;|}?);
        });
    } _ = a; // @error next() of range expression's iterable object returns a record {|int value;|}
}
