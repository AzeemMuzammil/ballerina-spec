Test-Case: output
Description: Test basic bitwise and expression
Label: binary-bitwise-expr, bitwise-and-expr

public function main() {
    io:println(9 & 6); // @output 0
    io:println(6 & 9); // @output 0
    io:println(99999999 & 6); // @output 6
    io:println(5 & 7568888); // @output 0
    io:println(54545 & 7568888); // @output 21776
    io:println(0xAB55 & 0x0032); // @output 16
    io:println(0xABF5 & 50); // @output 48
}

Test-Case: output
Description: Test basic bitwise xor expression
Label: binary-bitwise-expr, bitwise-xor-expr

public function main() {
    io:println(5 ^ 6); // @output 3
    io:println(6 ^ 5); // @output 3
    io:println(33333 ^ 4); // @output 33329
    io:println(8 ^ 99999); // @output 99991
    io:println(435545 ^ 434343); // @output 1534
    io:println(0xAB55 ^ 0x0032); // @output 43879
    io:println(0xABF5 ^ 50); // @output 43975
}

Test-Case: output
Description: Test basic bitwise or expression
Label: binary-bitwise-expr, bitwise-or-expr

public function main() {
    io:println(9 | 6); // @output 15
    io:println(6 | 9); // @output 15
    io:println(99999999 | 6); // @output 99999999
    io:println(5 | 7568888); // @output 7568893
    io:println(54545 | 7568888); // @output 7601657
    io:println(0xAB55 | 0x0032); // @output 43895
    io:println(0xABF5 | 50); // @output 44023
}

Test-Case: error
Description: Test the static type of both operands must be a subtype of int in bitwise and expression
Label: binary-bitwise-expr, bitwise-and-expr

public function main(map<int> a, map<int> b, int? d, int? e) {
    int a1 = 5 & 7.5; // @error static type of both operands must be a subtype of int
    int a2 = "5" & "6"; // @error static type of both operands must be a subtype of int
    int a3 = [1] & [2]; // @error static type of both operands must be a subtype of int
    int a4 = {name: "mike"} & {name: "Jone"}; // @error static type of both operands must be a subtype of int
    int a5 = a & b; // @error static type of both operands must be a subtype of int
    int a6 = d & e; // @error static type of both operands must be a subtype of int
    int a7 = getFloat1() & getFloat2(); // @error static type of both operands must be a subtype of int
}

function getFloat1() returns float => 99.4;

function getFloat2() returns float => 43.8;

Test-Case: error
Description: Test the static type of both operands must be a subtype of int in bitwise xor expression
Label: binary-bitwise-expr, bitwise-xor-expr

public function main(map<int> a, map<int> b, int? d, int? e) {
    int a1 = 5 ^ 7.5; // @error static type of both operands must be a subtype of int
    int a2 = "5" ^ "6"; // @error static type of both operands must be a subtype of int
    int a3 = [1] ^ [2]; // @error static type of both operands must be a subtype of int
    int a4 = {name: "mike"} ^ {name: "Jone"}; // @error static type of both operands must be a subtype of int
    int a5 = a ^ b; // @error static type of both operands must be a subtype of int
    int a6 = d ^ e; // @error static type of both operands must be a subtype of int
    int a7 = getFloat1() ^ getFloat2(); // @error static type of both operands must be a subtype of int
}

function getFloat1() returns float => 99.4;

function getFloat2() returns float => 43.8;

Test-Case: error
Description: Test the static type of both operands must be a subtype of int in bitwise or expression
Label: binary-bitwise-expr, bitwise-or-expr

public function main(map<int> a, map<int> b, int? d, int? e) {
    int a1 = 5 | 7.5; // @error static type of both operands must be a subtype of int
    int a2 = "5" | "6"; // @error static type of both operands must be a subtype of int
    int a3 = [1] | [2]; // @error static type of both operands must be a subtype of int
    int a4 = {name: "mike"} | {name: "Jone"}; // @error static type of both operands must be a subtype of int
    int a5 = a | b; // @error static type of both operands must be a subtype of int
    int a6 = d | e; // @error static type of both operands must be a subtype of int
    int a7 = getFloat1() | getFloat2(); // @error static type of both operands must be a subtype of int
}

function getFloat1() returns float => 99.4;

function getFloat2() returns float => 43.8;