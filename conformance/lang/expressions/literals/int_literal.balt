Test-Case: output
Description: Test DecimalNumbers with int-type-descriptor.
Labels: int

public function main() {
    int x = 101;
    io:println(x); // @output 101

    x = 0;
    io:println(x); // @output 0

    x = 3;
    io:println(x); // @output 3

    x = 9223372036854775807;
    io:println(x); // @output 9223372036854775807
}

Test-Case: output
Description: Test DecimalNumbers with function call.
Labels: int

public function main() {
    printInt(101); // @output 101

    printInt(0); // @output 0

    printInt(3); // @output 3

    printInt(9223372036854775807); // @output 9223372036854775807
}

function printInt(int x) {
    io:println(x);
}

Test-Case: error
Description: Test DecimalNumbers with leading zeros.
Labels: int

public function main() {
    int x = 00; // @error invalid DecimalNumber with leading '0'

    x = 012345; // @error invalid DecimalNumber with leading '0'
}

Test-Case: output
Description: Test HexIntLiterals with int-type-descriptor and function call.
Labels: int

public function main() {
    int x = 0x1;
    printInt(x); // @output 1

    x = 0xa;
    printInt(x); // @output 10

    x = 0xA;
    printInt(x); // @output 10

    x = 0x000000a;
    printInt(x); // @output 10

    x = 0x1fed12cba7;
    printInt(x); // @output 137121418151

    x = 0xABCDEF81;
    printInt(x); // @output 2882400129

    x = 0x192AAce;
    printInt(x); // @output 26389198

    x = 0X1;
    printInt(x); // @output 1

    x = 0Xa;
    printInt(x); // @output 10

    x = 0XA;
    printInt(x); // @output 10

    x = 0XABCDEF81;
    printInt(x); // @output 2882400129

    printInt(0X1fedcba7); // @output 535677863

    printInt(0X192AAc5); // @output 26389189
}

function printInt(int x) {
    io:println(x);
}

Test-Case: error
Description: Test invalid HexInLiteral.
Fail-Issue: ballerina-lang#32559
Labels: int

public function main() {
    int x = 0x; // @error invalid HexIntLiteral due to absence of HexDigits

    x = 0X; // @error invalid HexIntLiteral due to absence of HexDigits

    x = 0x 12fa; // @error invalid HexIntLiteral

    x = 0x123g; // @error invalid HexIntLiteral due to incorrect HexDigits

    x = 0X123G; // @error invalid HexIntLiteral due to incorrect HexDigits

    x = 123ab; // @error undefined symbol 'ab'
}

Test-Case: output
Description: Test int-literals with toString().
Fail-Issue: ballerina-lang#32769
Labels: int

public function main() {
    io:println((101).toString()); // @output 101

    io:println(0.toString()); // @output 0

    io:println(9223372036854775807.toString()); // @output 9223372036854775807

    io:println(0x12ab.toString()); // @output 4779
}

Test-Case: output
Description: Test DecimalNumbers with toBalString().
Fail-Issue: ballerina-lang#32769
Labels: int, value:toBalString

public function main() {
    io:println((101).toBalString()); // @output 101

    io:println(0.toBalString()); // @output 0

    io:println(9223372036854775807.toBalString()); // @output 9223372036854775807

    io:println(0x12ab.toBalString()); // @output 4779
}

Test-Case: output
Description: Test int literals with return statement.
Labels: int

public function main() {
    io:println(printDecimalNumber()); // @output 5674

    io:println(printHexIntLiteral()); // @output 77739
}

function printDecimalNumber() returns int {
    return 5674;
}

function printHexIntLiteral() returns int {
    return 0x12fab;
}

Test-Case: error
Description: Test possible invalid int-literal scenarios.
Labels: int

public function main() {
    int x = 0b10111; // @error expected a 'int', but found an undefined symbol '0b10111' // Note - multiple errors for this

    x = 123 456 789; // @error invalid expression // Note - multiple errors for this

    x = 1,123,456,789; // @error invalid expression // Note - multiple errors for this

    x = 0h123ca; // @error expected a 'int', but found an undefined symbol '0h123ca' // Note - multiple errors for this

    x = Ox456fa; // @error expected a 'int', but found an undefined symbol 'Ox456fa'
}

Test-Case: error
Description: Numeric value is greater than upper bound.
Labels: decimal

public function main() {
    decimal d = 10092233720368547758081009223372036854775; // @error number '10092233720368547758081009223372036854775' is too large
}

Test-Case: output
Description: Test int-literals with equality.
Labels: equality

public function main() {
    io:println(10 == 10); // @output true

    io:println(10 != 10); // @output false

    io:println(0x1a == 0x1a); // @output true

    io:println(0x1a != 0x1a); // @output false

    io:println(0x1234abdef1 == 78193090289); // @output true

    io:println(0x1234abdef1 != 7819309028); // @output true
}

Test-Case: output
Description: Test the basic type when the numeric-literal includes a FloatTypeSuffix.
Labels: any, decimal, float, int, is-expr

public function main() {
    any x = 0f;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    x = 1234567890F;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    x = 786.218f;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false
}

Test-Case: error
Description: Test the basic type when the numeric-literal includes a FloatTypeSuffix.
Labels: decimal, float, int

public function main() {
    int x = 0f; // @error expected an 'int' but found a 'float'

    decimal y = 12345678.90F; // @error expected a 'decimal' but found a 'float'

    int z = 786f; // @error expected an 'int' but found a 'float'
}

Test-Case: output
Description: Test the basic type when the numeric-literal includes a DecimalTypeSuffix.
Labels: any, decimal, float, int, is-expr

public function main() {
    any x = 0d;
    io:println(x is int); // @output false
    io:println(x is float); // @output false
    io:println(x is decimal); // @output true

    x = 1234567890D;
    io:println(x is int); // @output false
    io:println(x is float); // @output false
    io:println(x is decimal); // @output true

    x = 786.218d;
    io:println(x is int); // @output false
    io:println(x is float); // @output false
    io:println(x is decimal); // @output true
}

Test-Case: error
Description: Test the basic type when the numeric-literal includes a DecimalTypeSuffix.
Labels: decimal, float, int

public function main() {
    int x = 0d; // @error expected an 'int' but found a 'decimal'

    float y = 12345678.90D; // @error expected an 'float' but found a 'decimal'

    int z = 786d; // @error expected an 'int' but found a 'decimal'
}

Test-Case: output
Description: Test the basic type when the numeric-literal is a HexFloatingPointLiteral.
Labels: any, decimal, float, int, is-expr

public function main() {
    any x = 0xabc12.def;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    x = 0x.2131ef;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    x = 0x123.456cP4;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false
}

Test-Case: error
Description: Test the basic type when the numeric-literal is a HexFloatingPointLiteral.
Labels: decimal, float, int

public function main() {
    decimal x = 0xabc12.def; // @error expected an 'decimal' but found a 'float'

    decimal y = 0x.2131ef; // @error expected an 'decimal' but found a 'float'

    int z = 0x123.456cP4; // @error expected an 'int' but found a 'float'
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected type is a subtype of decimal.
Labels: decimal, int, is-expr, null, string

public function main() {
    int|decimal a = 1.212;
    io:println(a is int); // @output false
    io:println(a is decimal); // @output true

    int|decimal b = 0.0;
    io:println(b is int); // @output false
    io:println(b is decimal); // @output true

    string|decimal c = 32.12;
    io:println(c is decimal); // @output true

    ()|decimal d = 10;
    io:println(d is decimal); // @output true
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected type is a subtype of float.
Labels: decimal, float, int, null, is-expr, string

public function main() {
    int|float x = 1.212;
    io:println(x is int); // @output false
    io:println(x is float); // @output true

    int|float y = 0.0;
    io:println(y is int); // @output false
    io:println(y is float); // @output true

    decimal|float z = 0x123;
    io:println(z is decimal); // @output false
    io:println(z is float); // @output true

    string|float a = 32.12;
    io:println(a is float); // @output true

    ()|float b = 10;
    io:println(b is float); // @output true

    ()|float c = 0x12ab;
    io:println(c is float); // @output true
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected type is not a subtype of either decimal or
             float and the numeric literal is an int-literal.
Labels: any, decimal, float, int, is-expr

public function main() {
    int|float|decimal x = 212;
    io:println(x is int); // @output true
    io:println(x is float); // @output false
    io:println(x is decimal); // @output false

    any y = 971;
    io:println(y is int); // @output true
    io:println(y is float); // @output false
    io:println(y is decimal); // @output false

    any z = 0x12aB;
    io:println(z is int); // @output true
    io:println(z is float); // @output false
    io:println(z is decimal); // @output false
}

Test-Case: error
Description: Test the basic type when the applicable contextually expected type is not a subtype of either decimal or
             float and the numeric literal is an int-literal.
Fail-Issue: ballerina-lang#32698
Labels: decimal, float, int

public function main() {
    float|decimal a = 1; // @error expected a '(float|decimal)' but found a 'int'
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected type is not a subtype of either decimal or
             float and the numeric literal is not an int-literal.
Labels: any, decimal, float, int, is-expr

public function main() {
    int|float|decimal x = 4311.1;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    float|decimal y = 932.32e11;
    io:println(y is float); // @output true
    io:println(y is decimal); // @output false

    any z = 123.654;
    io:println(z is int); // @output false
    io:println(z is float); // @output true
    io:println(z is decimal); // @output false
}

Test-Case: output
Description: Test int literals with valid type casts.
Labels: decimal, float, int, type-cast-expr

public function main() {
    io:println(<int> 13245); // @output 13245

    io:println(<int> 0xabde12a); // @output 180216106

    io:println(<decimal> 13245); // @output 13245

    io:println(<decimal> 0xabde12a); // @output 180216106.0

    io:println(<float> 13245); // @output 13245.0

    io:println(<float> 0xabde12a); // @output 1.80216106E8
}

Test-Case: error
Description: Test nil literal '()' with invalid type casts.
Fail-Issue: ballerina-lang#32716
Labels: any, boolean, int, nil-literal, string, type-cast-expr

public function main() {
    any x = <boolean> 0; // @error 'int' cannot be cast to 'boolean'

    x = <boolean> 0x0; // @error 'int' cannot be cast to 'boolean'

    x = <()> 123; // @error 'int' cannot be cast to '()'

    x = <()> 0X42af; // @error 'int' cannot be cast to '()'

    x = <string> 456; // @error 'int' cannot be cast to 'string'

    x = <string> 0xa21bd; // @error 'int' cannot be cast to 'string'
}

Test-Case: output
Description: Test int literals with interpolation in template expressions.
Labels: int, raw-template-expr

public function main() {
    io:println(`${124}`); // @output 124

    io:println(`${0x7ab1}`); // @output 31409
}

Test-Case: output
Description: Test int literals as member of structural constructors.
Labels: list-constructor-expr, mapping-constructor-expr

public function main() {
    io:println([123, 0x12a3]); // @output [123,4771]

    io:println({"c" : 987, "b" : 0X92c1}); // @output {"c":987,"b":37569}
}
