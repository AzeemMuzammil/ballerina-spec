Test-Case: output
Description: Test nil literal '()' with nil type descriptor and toBalString().
Labels: nil-literal, null, value:toBalString

public function main() {
    () x = ();
    io:println(x.toBalString()); // @output ()

    io:println(().toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literal 'null' with nil type descriptor and toBalString().
Labels: nil-literal, null, value:toBalString

public function main() {
    () x = null;
    io:println(x.toBalString()); // @output ()

    io:println(null.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literal 'null' with toString().
Labels: nil-literal, null

public function main() {
    () x = ();
    io:println(x); // @output

    io:println(().toString()); // @output
}

Test-Case: output
Description: Test nil literal 'null' with toString().
Labels: nil-literal, null

public function main() {
    () x = null;
    io:println(x); // @output

    io:println(null.toString()); // @output
}

Test-Case: output
Description: Test equality of the nil literals.
Labels: equality, nil-literal, null, value:toBalString

public function main() {
    io:println(null == ()); // @output true

    io:println(null != ()); // @output false
}

Test-Case: output
Description: Test exact-equality of the nil literalS.
Labels: exact-equality, nil-literal, null, value:toBalString

public function main() {
    io:println(null === ()); // @output true

    io:println(null !== ()); // @output false
}

Test-Case: output
Description: Test nil literal with is-expr.
Labels: is-expr, nil-literal, null

public function main() {
    io:println(() is ()); // @output true

    io:println(null is ()); // @output true
}

Test-Case: output
Description: Test different nil literal representations with nil type descriptor.
Labels: nil-literal, null, value:toBalString

public function main() {
    () x = ( );
    io:println(x.toBalString()); // @output ()

    x = (    );
    io:println(x.toBalString()); // @output ()

    x = (
    );
    io:println(x.toBalString()); // @output ()

    x = (());
    io:println(x.toBalString()); // @output ()

    x = (null);
    io:println(x.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literal '()' with function call.
Labels: nil-literal, null, value:toBalString

public function main() {
    testNil(());
}

function testNil(() x) {
    io:println(x.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literal 'null' with function call.
Labels: nil-literal, null, value:toBalString

public function main() {
    testNil(null);
}

function testNil(() x) {
    io:println(x.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literal '()' with return statement.
Labels: nil-literal, null, value:toBalString

public function main() {
    io:println(testNil().toBalString()); // @output ()
}

function testNil() returns () {
    return ();
}

Test-Case: output
Description: Test nil literal 'null' with return statement.
Labels: nil-literal, null, value:toBalString

public function main() {
    io:println(testNil().toBalString()); // @output ()
}

function testNil() returns () {
    return null;
}

Test-Case: output
Description: Test nil literal '()' with optional type descriptor.
Labels: boolean, decimal, float, int, nil-literal, optional-type, value:toBalString

public function main() {
    boolean? a = ();
    io:println(a.toBalString()); // @output ()

    decimal? b = ();
    io:println(b.toBalString()); // @output ()

    float? c = ();
    io:println(c.toBalString()); // @output ()

    int? d = ();
    io:println(d.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literal 'null' with optional type descriptor.
Labels: boolean, decimal, float, int, nil-literal, optional-type, value:toBalString

public function main() {
    boolean? a = null;
    io:println(a.toBalString()); // @output ()

    decimal? b = null;
    io:println(b.toBalString()); // @output ()

    float? c = null;
    io:println(c.toBalString()); // @output ()

    int? d = null;
    io:println(d.toBalString()); // @output ()
}

Test-Case: output
Description: Test nil literals with valid type casts.
Labels: nil-literal, null, type-cast-expr, value:toBalString

public function main() {
    io:println((<()> ()).toBalString()); // @output ()

    io:println((<()> null).toBalString()); // @output ()
}

Test-Case: error
Description: Test nil literal '()' with invalid type casts.
Labels: any, boolean, decimal, float, int, nil-literal, string, type-cast-expr

public function main() {
    any x = <boolean> (); // @error '()' cannot be cast to 'boolean'

    x = <decimal> (); // @error '()' cannot be cast to 'decimal'

    x = <float> (); // @error '()' cannot be cast to 'float'

    x = <int> (); // @error '()' cannot be cast to 'int'

    x = <string> (); // @error '()' cannot be cast to 'string'
}

Test-Case: error
Description: Test nil literal 'null' with invalid type casts.
Labels: any, boolean, decimal, float, int, nil-literal, string, type-cast-expr

public function main() {
    any x = <boolean> null; // @error '()' cannot be cast to 'boolean'

    x = <decimal> null; // @error '()' cannot be cast to 'decimal'

    x = <float> null; // @error '()' cannot be cast to 'float'

    x = <int> null; // @error '()' cannot be cast to 'int'

    x = <string> null; // @error '()' cannot be cast to 'string'
}

Test-Case: output
Description: Test nil literals with interpolation in template expressions.
Labels: nil-literal, raw-template-expr

public function main() {
    io:println(`${()}`); // @output

    io:println(`${null}`); // @output
}

Test-Case: output
Description: Test nil literals as member of structural constructors.
Labels: list-constructor-expr, mapping-constructor-expr, nil-literal, value:toBalString

public function main() {
    io:println([(), null].toBalString()); // @output () ()

    io:println({"c" : (), "b" : null}.toBalString()); // @output {"c":(),"b":()}
}

Test-Case: error
Description: Test invalid nil literals.
Labels: null

public function main() {
    () a = Null; // @error expected a '()', but found an undefined symbol 'Null'

    () b = NULL; // @error expected a '()', but found an undefined symbol 'NULL'

    () c = nul; // @error expected a '()', but found an undefined symbol 'nul'

    () d = nil; // @error expected a '()', but found an undefined symbol 'nil'

    () e = Nil; // @error expected a '()', but found an undefined symbol 'Nil'

    () f = ()); // @error missing '(' token

    () g = ); // @error missing '(' token
}
