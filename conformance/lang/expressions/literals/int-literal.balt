Test-Case: output
Description: Test DecimalNumbers with int type descriptor.
Labels: int

public function main() {
   int x = 101;
   io:println(x); // @output 101

   x = 0;
   io:println(x); // @output 0

   x = 3;
   io:println(x); @output 3

   x = 9223372036854775807;
   io:println(x); // @output 9223372036854775807
}

Test-Case: output
Description: Test DecimalNumbers with function call.
Labels: int

public function main() {
   int x = 101;
   printInt(x);

   x = 0;
   printInt(x);

   x = 3;
   printInt(x);

   x = 9223372036854775807;
   printInt(x);
}

function printInt(int x) {
   io:println(x); // @output 101
                  // @output 0
                  // @output 3
                  // @output 9223372036854775807
}

/// to string

Test-Case: output
Description: Test DecimalNumbers with toBalString.
Labels: int, value:toBalString

public function main() {
   int x = 101;
   io:println(x.toBalString()); // @output 101

   x = 0;
   io:println(x.toBalString()); // @ouftput 0

   x = 3;
   io:println(x.toBalString()); // @output 3

   x = 9223372036854775807;
   io:println(x.toBalString()); // @output 9223372036854775807
}

Test-Case: error
Description: Test DecimalNumbers with leading zeros.
Labels: int

public function main() {
    int x = 00; // @error invalid DecimalNumber with leading '0'

    x = 012345; // @error invalid DecimalNumber with leading '0'
}

Test-Case: output
Description: Test HexIntLiterals with function call.
Labels: int

public function main() {
    int x = 0x1;
    printInt(x);

    x = 0xa;
    printInt(x);

    x = 0xA;
    printInt(x);

    x = 0x000000a;
    printInt(x);

    x = 0x1fed12cba7;
    printInt(x);

    x = 0xABCDEF81;
    printInt(x);

    x = 0x192AAce;
    printInt(x);

    int x = 0X1;
    printInt(x);

    x = 0Xa;
    printInt(x);

    x = 0XA;
    printInt(x);

    x = 0XABCDEF81;
    printInt(x);

    x = 0X1fedcba7;
    printInt(0xA);

    x = 0X192AAc5;
    printInt(0xA);
}

function printInt(int x) {
    io:println(x); // @output 1
                   // @output 10
                   // @output 10
                   // @output 10
                   // @output 137121418151
                   // @output 2882400129
                   // @output 26389198
                   // @output 1
                   // @output 10
                   // @output 10
                   // @output 2882400129
                   // @output 535677863
                   // @output 26389189
}

Test-Case: output
Description: Test HexIntLiterals with toBalString.
Labels: int, value:toBalString

public function main() {
    int x = 0x1;
    io:println(x.toBalString()); // @output 1

    x = 0x7FFFFFFFFFFFFFFF;
    io:println(x.toBalString()); // @output 9223372036854775807
}

Test-Case: error
Description: Test invalid HexInLiteral literals.
Fail-Issue: ballerina-lang #32559
Labels: int

public function main() {
    int x = 0x; // @error invalid HexIntLiteral due to absence of HexDigits

    x = 0X; // @error invalid HexIntLiteral due to absence of HexDigits

    x = 0x 12fa; // @error invalid HexIntLiteral

    x = 0x123g; // @error invalid HexIntLiteral due to incorrect HexDigits

    x = 0X123G; // @error invalid HexIntLiteral due to incorrect HexDigits

    x = 123Fab; // @error invalid HexIntLiteral due to missing HexIndicator
}

Test-Case: output
Description: Test int type descriptor with DecimalNumbers.
Labels: int

public function main() {
    io:println(printInt(123)); // @output 123

    io:println(printInt(0)); // @output 0

    io:println(printInt(0xabe123)); // @output 11264291

    io:println(printInt(0X12edf)); // @output 77535
}

function printInt(int x) returns int {
    return x;
}

Test-Case: error
Description: Test possible invalid int-literal scenarios.
Labels: int

public function main() {
    int x = 0b10111; // @error expected a 'int', but found an undefined symbol '0b10111'

    x = 123 456 789; // @error invalid expression

    x = 1,123,456,789; // @error invalid expression

    x = 0h123ca; // @error expected a 'int', but found an undefined symbol '0h123ca'

    x = Ox456fa; // @error expected a 'int', but found an undefined symbol 'Ox456fa'
}

Test-Case: error
Description: Numeric value is greater than upper bound.
Labels: decimal

public function main() {
    decimal d = 10092233720368547758081009223372036854775; // @error number
                                                               '10092233720368547758081009223372036854775' is too large
}

Test-Case: output
Description: Test the basic type when the numeric-literal includes a FloatTypeSuffix.
Labels: any, decimal, float, int, is-expr

public function main() {
    any x = 0f;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    x = 1234567890F;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    x = 786.218f;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false
}

Test-Case: error
Description: Test the basic type when the numeric-literal includes a FloatTypeSuffix.
Labels: float, decimal, int

public function main() {
    int x = 0f; // @error expected an 'int' but found a 'float'

    decimal y = 12345678.90F; // @error expected a 'decimal' but found a 'float'

    int z = 786f; // @error expected an 'int' but found a 'float'
}

Test-Case: output
Description: Test the basic type when the numeric-literal includes a DecimalTypeSuffix.
Labels: any, float, int, is-expr

public function main() {
    any x = 0d;
    io:println(x is int); // @output false
    io:println(x is float); // @output false
    io:println(x is decimal); // @output true

    x = 1234567890D;
    io:println(x is int); // @output false
    io:println(x is float); // @output false
    io:println(x is decimal); // @output true

    x = 786.218d;
    io:println(x is int); // @output false
    io:println(x is float); // @output false
    io:println(x is decimal); // @output true
}

Test-Case: error
Description: Test the basic type when the numeric-literal includes a DecimalTypeSuffix.
Labels: decimal, float, int, is-expr

public function main() {
    int x = 0d; // @error expected an 'int' but found a 'decimal'

    float y = 12345678.90D; // @error expected an 'float' but found a 'decimal'

    int z = 786d; // @error expected an 'int' but found a 'decimal'
}

Test-Case: output
Description: Test the basic type when the numeric-literal is a HexFloatingPointLiteral.
Labels: any, decimal, float, int, is-expr

public function main() {
    any x = 0xabc12.def;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    x = 0x.2131ef;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    x = 0x123.456cP4;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false
}

Test-Case: error
Description: Test the basic type when the numeric-literal is a HexFloatingPointLiteral.
Labels: any, decimal, float, int, is-expr

public function main() {
    decimal x = 0xabc12.def; // @error expected an 'decimal' but found a 'float'

    decimal y = 0x.2131ef; // @error expected an 'decimal' but found a 'float'

    int z = 0x123.456cP4; // @error expected an 'int' but found a 'float'
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected type is a subtype of decimal.
Labels: any, decimal, float, int, is-expr

public function main() {
    int|decimal x = 1.212;
    io:println(x is int); // @output false
    io:println(x is decimal); // @output true

    int|decimal y = 0.0;
    io:println(y is int); // @output false
    io:println(y is decimal); // @output true

    string|decimal z = 32.12;

}

Test-Case: output
Description: Test the basic when the applicable contextually expected type is a subtype of float.
Labels: any, decimal, float, int, is-expr

public function main() {
    int|float x = 1.212;
    io:println(x is int); // @output false
    io:println(x is float); // @output true

    int|float y = 0.0;
    io:println(y is int); // @output false
    io:println(y is float); // @output true
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected type is not a subtype of decimal|float and
             the numeric literal is an int-literal.
Labels: any, decimal, float, int, is-expr

public function main() {
    int|float|decimal x = 212;
    io:println(x is int); // @output true
    io:println(x is float); // @output false
    io:println(x is decimal); // @output false

    any y = 971;
    io:println(y is int); // @output true
    io:println(y is float); // @output false
    io:println(y is decimal); // @output false

    any z = 0x12aB;
    io:println(z is int); // @output true
    io:println(z is float); // @output false
    io:println(z is decimal); // @output false
}

Test-Case: output
Description: Test the basic type when the applicable contextually expected type is not a subtype of decimal|float and
             the numeric literal is not an int-literal.
Labels: any, decimal, float, int, is-expr

public function main() {
    int|float|decimal x = 4311.1;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    x = 932.32e11;
    io:println(x is int); // @output false
    io:println(x is float); // @output true
    io:println(x is decimal); // @output false

    any y = 123.654;
    io:println(y is int); // @output false
    io:println(y is float); // @output true
    io:println(y is decimal); // @output false

    float|decimal z = 1;
    io:println(z is float); // @output true
    io:println(z is decimal); // @output false
}
