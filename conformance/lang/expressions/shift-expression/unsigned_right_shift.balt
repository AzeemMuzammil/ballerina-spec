Test-Case: output
Description: Test '>>>' expression with zero and positive 'int' DecimalNumbers as operands.
Labels: int, shift-expr

function init() {
    int a = 9223372036854775804;
    int b = 21;
    int c = 0;

    io:println(a >>> b); // @output 4398046511103
    io:println(a >>> c); // @output 9223372036854775804
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int' HexIntLiterals as operands.
Labels: HexIntLiterals, int, shift-expr

function init() {
    int a = 0x75;
    int b = 0x15;
    int c = 0x0;

    io:println(a >>> b); // @output 0
    io:println(a >>> c); // @output 117
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int' IntLiterals as operands.
Labels: HexIntLiterals, int, shift-expr

function init() {
    int a = 9223372036854775804;
    int b = 21;
    int c = 0x7ffffffffffffffd;
    int d = 0x15;
    int e = 0;
    int f = 0x0;

    io:println(a >>> d); // @output 4398046511103
    io:println(c >>> b); // @output 4398046511103
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int' DecimalNumbers as operands.
Labels: int, shift-expr, unary-minus

function init() {
    int a = -9223372036854775802;
    int b = -9223372036854775805;
    int c = 0;

    io:println(a >>> b); // @output 1152921504606846976
    io:println(a >>> c); // @output -9223372036854775802
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int' HexIntLiterals as operands.
Labels: HexIntLiterals, int, shift-expr, unary-minus

function init() {
    int a = -0x7ffffffffffffffa;
    int b = -0x7ffffffffffffff8;
    int c = 0x0;

    io:println(a >>> b); // @output 36028797018963968
    io:println(a >>> c); // @output -9223372036854775802
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int' IntLiterals as operands.
Labels: HexIntLiterals, int, shift-expr, unary-minus

function init() {
    int a = -9223372036854775798;
    int b = -21;
    int c = -0x7ffffffffffffff6;
    int d = -0x15;
    int e = 0;
    int f = 0x0;

    io:println(a >>> d); // @output 1048576
    io:println(c >>> b); // @output 1048576
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int' DedcimalNumbers as operands.
Labels: int, shift-expr, unary-minus

function init() {
    int a = -111;
    int b = -92;
    int c = 1;
    int d = 2;

    io:println(a >>> d); // @output 4611686018427387876
    io:println(c >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int' HexIntLiterals as operands.
Labels: HexIntliteral, int, shift-expr, unary-minus

function init() {
    int a = -0x1f;
    int b = -0x7ffffffffffffff5;
    int c = 0x1f;
    int d = 0x1a;

    io:println(a >>> d); // @output 274877906943
    io:println(c >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int' IntLiterals as operands.
Labels: HexIntliteral, int, shift-expr, unary-minus

function init() {
    int a = -111;
    int b = -92;
    int c = 1;
    int d = 2;
    int e = -0x1f;
    int f = -0x7fffffffffffffff;
    int g = 0x1f;
    int h = 0x1a;

    io:println(a >>> d); // @output 4611686018427387876
    io:println(c >>> b); // @output 0

    io:println(e >>> g); // @output 8589934591
    io:println(g >>> f); // @output 15

    io:println(a >>> h); // @output 274877906943
    io:println(g >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int' as the LHS operand and builtin subtypes of integer as the RHS operand.
Labels: int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr,
        unary-minus, var

function init() {
    int a = 128;
    int:Signed8 b = 1;
    int:Signed8 c = -124;
    int:Unsigned8 d = 5;
    int:Signed16 e = 6;
    int:Signed16 f = -32750;
    int:Unsigned16 g = 3;
    int:Signed32 h = 4;
    int:Signed32 i = -2147483646;
    int:Unsigned32 j = 2;

    io:println(a >>> b); // @output 64
    io:println(a >>> c); // @output 8

    io:println(a >>> d); // @output 4

    io:println(a >>> e); // @output 2
    io:println(a >>> f); // @output 0

    io:println(a >>> g); // @output 16

    io:println(a >>> h); // @output 8
    io:println(a >>> i); // @output 32

    io:println(a >>> j); // @output 32

    io:println(11 >>> b); // @output 5
}

Test-Case: output
Description: Test '>>>' expression for optional zero and positive 'int' operands.
Labels: int, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    int? a = 256;
    int? b = 5;
    int? c = 0;
    int? d = ();
    int e = 133;
    int f = 2;

    int? x1 = a >>> b;
    io:println(x1); // @output 8
    int? x2 = f >>> b;
    io:println(x2); // @output 0
    int? x3 = a >>> f;
    io:println(x3); // @output 64
    int? x4 = e >>> b;
    io:println(x4); // @output 4

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()
    int? x7 = d >>> b;
    io:println(x7.toBalString()); // @output ()

    io:println(a >>> b); // @output 8
    io:println(a >>> c); // @output 256

    io:println(a >>> f); // @output 64
    io:println(e >>> b); // @output 4

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
    io:println((d >>> d).toBalString()); // @output ()
}

Test-Case: output
Description: Test '>>>' expression for optional zero and negative 'int' operands.
Labels: int, nil-literal, optional-type, shift-expr, unary-minus, value:toBalString()

function init() {
    int? a = -256;
    int? b = -9223372036854775803;
    int? c = 0;
    int? d = ();
    int e = -133;
    int f = -9223372036854775806;

    int? x1 = a >>> b;
    io:println(x1); // @output 576460752303423480
    int? x2 = f >>> b;
    io:println(x2); // @output 288230376151711744
    int? x3 = a >>> f;
    io:println(x3); // @output 4611686018427387840
    int? x4 = e >>> b;
    io:println(x4); // @output 576460752303423483

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()

    io:println(a >>> b); // @output 576460752303423480
    io:println(a >>> c); // @output -256

    io:println(a >>> f); // @output 4611686018427387840
    io:println(e >>> b); // @output 576460752303423483

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
    io:println((d >>> d).toBalString()); // @output ()
}

Test-Case: output
Description: Test '>>>' expression for optional positive and negative 'int' operands.
Labels: int, optional-type, shift-expr, unary-minus

function init() {
    int? a = 256;
    int? b = 5;
    int? c = -256;
    int? d = -9223372036854775799;
    int e = 133;
    int f = 7;
    int g = -133;
    int h = -9223372036854775801;

    io:println(a >>> d); // @output 0
    io:println(c >>> b); // @output 576460752303423480

    io:println(a >>> h); // @output 2
    io:println(c >>> f); // @output 144115188075855870

    io:println(e >>> d); // @output 0
    io:println(g >>> b); // @output 576460752303423483
}

Test-Case: output
Description: Test 0x3F mask of 'int' RHS operand in '>>>' expression.
Labels: int, shift-expr, unary-minus

function init() {
    int a = -1;
    int b = 63;
    int c = 64;
    int d = 122;
    int e = -65;
    int f = -64;

    io:println(a >>> b); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(a >>> c); // @output -1
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    //        = In decimal: (-1)

    io:println(a >>> d); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01111010, In decimal: 122
    //                After applying mask, In binary: 111010, In decimal: 58
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    //        = In decimal: (63)

    io:println(b >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    //        = In decimal: (0)

    io:println(b >>> c); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    //        = In decimal: (63)

    io:println(a >>> e); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111, In decimal: -65
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(a >>> f); // @output -1
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11000000, In decimal: -64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    //        = In decimal: (-1)

    io:println(a >>> a); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111, In decimal: -1
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(e >>> c); // @output -65
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111
    //        = In decimal: (-65)
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int' operands.
Labels: decimal, float, int, shift-expr, unary-minus, var

function errorFunction() {
    int a = 128;
    int b = 7;
    int c = -120;
    int d = -9223372036854775794;

    var x1 = a >>> b;
    decimal _ = x1; // @error expected 'decimal' but found 'int'
    var x2 = a >>> d;
    float _ = x2; // @error expected 'float' but found 'int'
    var x3 = c >>> d;
    decimal _ = x3; // @error expected 'decimal' but found 'int'
    var x4 = c >>> b;
    float _ = x4; // @error expected 'float' but found 'int'

    var x5 = 511 >>> 8;
    float _ = x5; // @error expected 'float' but found 'int'
    var x6 = -197 >>> -9223372036854775807;
    float _ = x6; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int' as the LHS operand and builtin subtype of integer as
             the RHS operand.
Labels: decimal, float, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, unary-minus, var

function errorFunction() {
    int a = 128;
    int:Signed8 b = 7;
    int:Signed8 c = -120;
    int:Unsigned8 d = 5;
    int:Signed16 e = 8;
    int:Signed16 f = -32750;
    int:Unsigned16 g = 3;
    int:Signed32 h = 9;
    int:Signed32 i = -2147483641;
    int:Unsigned32 j = 17;

    var x1 = a >>> b;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int'
    var x2 = a >>> c;
    float _ = x2; // @error expected 'float' but found 'int'

    var x3 = a >>> d;
    int:Unsigned8 _ = x3; // @error expected 'int:Unsigned8' but found 'int'

    var x4 = a >>> e;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int'
    var x5 = a >>> f;
    decimal _ = x5; // @error expected 'decimal' but found 'int'

    var x6 = a >>> g;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int'

    var x7 = a >>> h;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int'
    var x8 = a >>> i;
    float _ = x8; // @error expected 'float' but found 'int'

    var x9 = a >>> j;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int'

    var x10 = 11 >>> b;
    float _ = x10; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int' as the LHS operand and byte as the RHS operand.
Labels: decimal, float, byte, int, shift-expr, unary-minus, var

function errorFunction() {
    int a = 128;
    int b = -7;
    byte c = 20;

    var x1 = a >>> c;
    float _ = x1; // @error expected 'float' but found 'int'
    var x2 = b >>> c;
    decimal _ = x2; // @error expected 'decimal' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int' as the LHS operand and user-defined subtype of
             integer as the RHS operand.
Labels: DecimalNumber, decimal, float, int, int:MIN_VALUE, shift-expr, type, unary-minus, var

type Ints -1|2|int:MIN_VALUE;

function errorFunction() {
    int a = 128;
    Ints b = 2;
    Ints c = -1;
    Ints d = int:MIN_VALUE;

    var x1 = a >>> b;
    decimal _ = x1; // @error expected 'decimal' but found 'int'
    var x2 = a >>> c;
    float _ = x2; // @error expected 'float' but found 'int'
    var x3 = a >>> d;
    float _ = x3; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int' as the LHS operand and user-defined subtype of
             integer as the RHS operand.
Fail-Issue: ballerina-platform/ballerina-lang#32995
Labels: DecimalNumber, decimal, float, int, int:MIN_VALUE, shift-expr, type, unary-minus, var

type Ints -1|int:MIN_VALUE;

function errorFunction() {
    int a = 128;
    Ints b = -1;

    var x1 = a >>> b;
    Ints _ = x1; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int' and optional 'int' as the operands.
Labels: decimal, float, int, nil-literal, optional-type, shift-expr, unary-minus

function errorFunction() {
    int a = 128;
    int? b = 2;
    int? c = -9223372036854775794;
    int? d = ();

    var x1 = a >>> b;
    int _ = x1; // @error expected 'int' but found 'int?'
    var x2 = a >>> c;
    decimal _ = x2; // @error expected 'decimal' but found 'int?'
    var x3 = b >>> c;
    float _ = x3; // @error expected 'float' but found 'int?'

    var x4 = a >>> d;
    float _ = x4; // @error expected 'float' but found 'int?'
    var x5 = d >>> d;
    float _ = x5; // @error expected 'float' but found 'int?'
    var x6 = d >>> b;
    float _ = x6; // @error expected 'float' but found 'int?'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int' as the LHS operand and optional builtin subtype of
             integer as the RHS operand.
Labels: decimal, float, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int a = 128;
    int:Signed8? b = 7;
    int:Signed8? c = -120;
    int:Unsigned8? d = 5;
    int:Signed16? e = 7;
    int:Signed16? f = -120;
    int:Unsigned16? g = 5;
    int:Signed32? h = 7;
    int:Signed32? i = -120;
    int:Unsigned32? j = 5;
    int:Signed8? k = ();
    int:Unsigned8? l = ();
    int:Signed16? m = ();
    int:Unsigned16? n = ();
    int:Signed32? p = ();
    int:Unsigned32? q = ();

    var x1 = a >>> b;
    int _ = x1; // @error expected 'int' but found 'int?'
    var x2 = a >>> c;
    decimal _ = x2; // @error expected 'decimal' but found 'int?'

    var x3 = a >>> d;
    float _ = x3; // @error expected 'float' but found 'int?'

    var x4 = a >>> e;
    int _ = x4; // @error expected 'int' but found 'int?'
    var x5 = a >>> f;
    int _ = x5; // @error expected 'int' but found 'int?'

    var x6 = a >>> g;
    int _ = x6; // @error expected 'int' but found 'int?'

    var x7 = a >>> h;
    int _ = x7; // @error expected 'int' but found 'int?'
    var x8 = a >>> i;
    int _ = x8; // @error expected 'int' but found 'int?'

    var x9 = a >>> j;
    int _ = x9; // @error expected 'int' but found 'int?'

    var x10 = 11 >>> b;
    int _ = x10; // @error expected 'int' but found 'int?'

    var x11 = 11 >>> k;
    int _ = x11; // @error expected 'int' but found 'int?'
    var x12 = 11 >>> l;
    int _ = x12; // @error expected 'int' but found 'int?'
    var x13 = 11 >>> m;
    int _ = x13; // @error expected 'int' but found 'int?'
    var x14 = 11 >>> n;
    int _ = x14; // @error expected 'int' but found 'int?'
    var x15 = 11 >>> p;
    float _ = x15; // @error expected 'float' but found 'int?'
    var x16 = 11 >>> q;
    decimal _ = x16; // @error expected 'decimal' but found 'int?'
}


Test-Case: output
Description: Test '>>>' expression with 'int' operands in function call and method call.
Labels: int, shift-expr, unary-minus, value:toString(), value:toBalString()

function init() {
    int a = -1137;
    int b = -9223372036854775807;
    int c = 128;
    int d = 2;

    rightShiftExpr(a >>> b); // @output 9223372036854775239
    rightShiftExpr(a >>> d); // @output 4611686018427387619
    rightShiftExpr(c >>> d); // @output 32
    rightShiftExpr(c >>> b); // @output 64

    io:println((a >>> b).toString()); // @output 9223372036854775239
    io:println((a >>> d).toString()); // @output 4611686018427387619
    io:println((c >>> d).toString()); // @output 32
    io:println((c >>> b).toString()); // @output 64

    io:println((a >>> b).toBalString()); // @output 9223372036854775239
    io:println((a >>> d).toBalString()); // @output 4611686018427387619
    io:println((c >>> d).toBalString()); // @output 32
    io:println((c >>> b).toBalString()); // @output 64
}

function rightShiftExpr(int x) {
    io:println(x);
}

Test-Case: output
Description: Test '>>>' expression with 'int' operands as a return statement.
Labels: int, return-stmt, shift-expr, unary-minus

function init() {
    int a = -1137;
    int b = -9223372036854775807;
    int c = 128;
    int d = 2;

    io:println(rightShiftExpr(a, b)); // @output 9223372036854775239
    io:println(rightShiftExpr(a, d)); // @output 4611686018427387619
    io:println(rightShiftExpr(c, d)); // @output 32
    io:println(rightShiftExpr(c, b)); // @output 64
}

function rightShiftExpr(int x, int y) returns int {
    return x >>> y;
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int:Signed8' DecimalNumbers as operands.
Labels: int:Signed8, shift-expr

function init() {
    int:Signed8 a = 125;
    int:Signed8 b = 5;
    int:Signed8 c = 0;

    io:println(a >>> b); // @output 3
    io:println(a >>> c); // @output 125
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int:Signed8' HexIntLiterals as operands.
Labels: HexIntLiterals, int:Signed8, shift-expr

function init() {
    int:Signed8 a = 0x75;
    int:Signed8 b = 0x3;
    int:Signed8 c = 0x0;

    io:println(a >>> b); // @output 14
    io:println(a >>> c); // @output 117
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int:Signed8' IntLiterals as operands.
Labels: HexIntLiterals, int:Signed8, shift-expr

function init() {
    int:Signed8 a = 127;
    int:Signed8 b = 2;
    int:Signed8 c = 0x7e;
    int:Signed8 d = 0x5;
    int:Signed8 e = 0;
    int:Signed8 f = 0x0;

    io:println(a >>> d); // @output 3
    io:println(c >>> b); // @output 31
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int:Signed8' DecimalNumbers as operands.
Labels: int:Signed8, shift-expr, unary-minus

function init() {
    int:Signed8 a = -122;
    int:Signed8 b = -125;
    int:Signed8 c = -0;

    io:println(a >>> b); // @output 2305843009213693936
    io:println(a >>> c); // @output -122
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int:Signed8' HexIntLiterals as operands.
Labels: HexIntLiterals, int:Signed8, shift-expr, unary-minus

function init() {
    int:Signed8 a = -0x7d;
    int:Signed8 b = -0x7d;
    int:Signed8 c = -0x0;

    io:println(a >>> b); // @output 2305843009213693936
    io:println(a >>> c); // @output -125
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int:Signed8' IntLiterals as operands.
Labels: HexIntLiterals, int:Signed8, shift-expr, unary-minus

function init() {
    int:Signed8 a = -119;
    int:Signed8 b = -2;
    int:Signed8 c = -0x7e;
    int:Signed8 d = -0x2;
    int:Signed8 e = -0;
    int:Signed8 f = -0x0;

    io:println(a >>> d); // @output 3
    io:println(c >>> b); // @output 3
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int:Signed8' DedcimalNumbers as operands.
Labels: int:Signed8, shift-expr, unary-minus

function init() {
    int:Signed8 a = -124;
    int:Signed8 b = -126;
    int:Signed8 c = 100;
    int:Signed8 d = 2;

    io:println(a >>> d); // @output 4611686018427387873
    io:println(c >>> b); // @output 25
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int:Signed8' HexIntLiterals as operands.
Labels: HexIntliteral, int:Signed8, shift-expr, unary-minus

function init() {
    int:Signed8 a = -0x1f;
    int:Signed8 b = -0x3;
    int:Signed8 c = 0x1f;
    int:Signed8 d = 0x1;

    io:println(a >>> d); // @output 9223372036854775792
    io:println(c >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int:Signed8' IntLiterals as operands.
Labels: HexIntliteral, int:Signed8, shift-expr, unary-minus

function init() {
    int:Signed8 a = -111;
    int:Signed8 b = -126;
    int:Signed8 c = 100;
    int:Signed8 d = 2;
    int:Signed8 e = -0x1f;
    int:Signed8 f = -0x4;
    int:Signed8 g = 0x1f;
    int:Signed8 h = 0x1;

    io:println(a >>> d); // @output 4611686018427387876
    io:println(c >>> b); // @output 25

    io:println(e >>> g); // @output 8589934591
    io:println(g >>> f); // @output 0

    io:println(a >>> h); // @output 9223372036854775752
    io:println(g >>> b); // @output 7
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed8' as the LHS operand and 'int' as the RHS operand.
Labels: int, int:Signed8, shift-expr, unary-minus

function init() {
    int:Signed8 x = 127;
    int:Signed8 y = -127;
    int a = 3;
    int b = -9223372036854775804;

    io:println(x >>> a); // @output 15
    io:println(x >>> b); // @output 7

    io:println(y >>> a); // @output 2305843009213693936
    io:println(y >>> b); // @output 1152921504606846968
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed8' as the LHS operand and builtin subtypes of integer as the RHS
             operand.
Labels: int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr, unary-minus

function init() {
    int:Signed8 x = 122;
    int:Signed8 y = -126;
    int:Signed8 a = 2;
    int:Signed8 b = -124;
    int:Unsigned8 c = 5;
    int:Signed16 d = 2;
    int:Signed16 e = -32765;
    int:Unsigned16 f = 3;
    int:Signed32 g = 3;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 1;

    io:println(x >>> a); // @output 30
    io:println(x >>> b); // @output 7
    io:println(y >>> a); // @output 4611686018427387872
    io:println(y >>> b); // @output 1152921504606846968

    io:println(x >>> c); // @output 3
    io:println(y >>> c); // @output 576460752303423484

    io:println(x >>> d); // @output 30
    io:println(x >>> e); // @output 15
    io:println(y >>> d); // @output 4611686018427387872
    io:println(y >>> e); // @output 2305843009213693936

    io:println(x >>> f); // @output 15
    io:println(y >>> f); // @output 2305843009213693936

    io:println(x >>> g); // @output 15
    io:println(x >>> h); // @output 0
    io:println(y >>> g); // @output 2305843009213693936
    io:println(y >>> h); // @output 144115188075855871

    io:println(x >>> i); // @output 61
    io:println(y >>> i); // @output 9223372036854775745
}

Test-Case: output
Description: Test '>>>' expression for optional zero and positive 'int:Signed8' operands.
Labels: int, int:Signed8, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    int:Signed8? a = 127;
    int:Signed8? b = 2;
    int:Signed8? c = 0;
    int:Signed8? d = ();
    int:Signed8 e = 5;
    int:Signed8 f = 1;

    int? x1 = a >>> b;
    io:println(x1); // @output 31
    int? x2 = f >>> b;
    io:println(x2); // @output 0
    int? x3 = a >>> f;
    io:println(x3); // @output 63
    int? x4 = e >>> b;
    io:println(x4); // @output 1

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()
    int? x7 = d >>> b;
    io:println(x7.toBalString()); // @output ()

    io:println(a >>> b); // @output 31
    io:println(a >>> c); // @output 127

    io:println(a >>> f); // @output 63
    io:println(e >>> b); // @output 1

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
    io:println((d >>> d).toBalString()); // @output ()
}

Test-Case: output
Description: Test '>>>' expression for optional zero and negative 'int:Signed8' operands.
Labels: int, int:Signed8, nil-literal, optional-type, shift-expr, unary-minus, value:toBalString()

function init() {
    int:Signed8? a = -123;
    int:Signed8? b = -125;
    int:Signed8? c = 0;
    int:Signed8? d = ();
    int:Signed8 e = -2;
    int:Signed8 f = -126;

    int? x1 = a >>> b;
    io:println(x1); // @output 2305843009213693936
    int? x2 = f >>> b;
    io:println(x2); // @output 2305843009213693936
    int? x3 = a >>> f;
    io:println(x3); // @output 4611686018427387873
    int? x4 = e >>> b;
    io:println(x4); // @output 2305843009213693951

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()

    io:println(a >>> b); // @output 2305843009213693936
    io:println(a >>> c); // @output -123

    io:println(a >>> f); // @output 4611686018427387873
    io:println(e >>> b); // @output 2305843009213693951

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
}

Test-Case: output
Description: Test '>>>' expression for optional positive and negative 'int:Signed8'.
Labels: int:Signed8, optional-type, shift-expr, unary-minus

function init() {
    int:Signed8? a = 127;
    int:Signed8? b = 5;
    int:Signed8? c = -2;
    int:Signed8? d = -127;
    int:Signed8 e = 100;
    int:Signed8 f = 7;
    int:Signed8 g = -23;
    int:Signed8 h = -126;

    io:println(a >>> d); // @output 63
    io:println(c >>> b); // @output 576460752303423487

    io:println(a >>> h); // @output 31
    io:println(c >>> f); // @output 144115188075855871

    io:println(e >>> d); // @output 50
    io:println(g >>> b); // @output 576460752303423487
}

Test-Case: output
Description: Test 0x3F mask of 'int:Signed8' RHS operand in '>>>' expression.
Labels: int:Signed8, shift-expr, unary-minus

function init() {
    int:Signed8 a = -1;
    int:Signed8 b = 63;
    int:Signed8 c = 64;
    int:Signed8 d = 122;
    int:Signed8 e = -65;
    int:Signed8 f = -64;

    io:println(a >>> b); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed8): 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(a >>> c); // @output -1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed8): 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    //        = In decimal: (-1)

    io:println(a >>> d); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed8): 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 01111010, In decimal: 122
    //                After applying mask, In binary: 111010, In decimal: 58
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    //        = In decimal: (63)

    io:println(b >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed8): 00111111
    //                     = Equivalent binary representation (basic type): 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    //        = In decimal: (0)

    io:println(b >>> c); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed8): 00111111
    //                     = Equivalent binary representation (basic type): 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    //        = In decimal: (63)

    io:println(a >>> e); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed8): 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 10111111, In decimal: -65
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(a >>> f); // @output -1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed8): 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11000000, In decimal: -64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    //        = In decimal: (-1)

    io:println(a >>> a); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed8): 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111, In decimal: -1
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(e >>> c); // @output -65
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed8): 10111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111
    // Shift amount = Before applying mask, In binary: 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111
    //        = In decimal: (-65)
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed8' as the LHS operand and 'int' as the RHS
             operand.
Labels: decimal, float, int, int:Signed8, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed8 x = 121;
    int:Signed8 y = -125;
    int a = 7;
    int b = -12;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int'
    var x2 = x >>> b;
    float _ = x2; // @error expected 'float' but found 'int'
    var x3 = y >>> a;
    decimal _ = x3; // @error expected 'decimal' but found 'int'
    var x4 = y >>> b;
    float _ = x4; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed8' as the LHS operand and builtin subtypes of
             integer as the RHS operand.
Labels: decimal, float, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16, int:Unsigned32, int:Unsigned8,
        shift-expr, unary-minus, var

function errorFunction() {
    int:Signed8 x = 127;
    int:Signed8 a = 7;
    int:Signed8 b = -120;
    int:Unsigned8 c = 5;
    int:Signed16 d = 8;
    int:Signed16 e = -32750;
    int:Unsigned16 f = 3;
    int:Signed32 g = 9;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int'
    var x2 = x >>> b;
    decimal _ = x2; // @error expected 'decimal' but found 'int'

    var x3 = x >>> c;
    int:Unsigned16 _ = x3; // @error expected 'int:Unsigned16' but found 'int'

    var x4 = x >>> d;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int'
    var x5 = x >>> e;
    float _ = x5; // @error expected 'float' but found 'int'

    var x6 = x >>> f;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int'

    var x7 = x >>> g;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int'
    var x8 = x >>> h;
    decimal _ = x8; // @error expected 'decimal' but found 'int'

    var x9 = x >>> i;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed8' as the LHS operand and byte as the RHS
             operand.
Labels: byte, int:Signed8, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed8 x = 12;
    int:Signed8 y = -7;
    byte a = 20;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int'
    var x2 = y >>> a;
    byte _ = x2; // @error expected 'byte' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed8' as the LHS operand and user-defined subtype
             of integer as the RHS operand.
Labels: DecimalNumber, float, int:Signed8, shift-expr, type, unary-minus, var

type Ints -1|2|-128;

function errorFunction() {
    int:Signed8 x = 80;
    int:Signed8 y = -100;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int'
    var x2 = y >>> a;
    int:Signed8 _ = x2; // @error expected 'int:Signed8' but found 'int'
    var x3 = x >>> b;
    Ints _ = x3; // @error expected '-1|2|-128' but found 'int'
    var x4 = y >>> b;
    Ints _ = x4; // @error expected '-1|2|-128' but found 'int'
    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int'
    var x6 = y >>> c;
    float _ = x6; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed8' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: float, int, int:Signed8, nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed8 x = 12;
    int:Signed8 y = -12;
    int? a = 2;
    int? b = -9223372036854775794;
    int? c = ();

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error  expected 'int:Signed8' but found 'int?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int?'
    var x3 = y >>> a;
    int:Signed8 _ = x3; // @error  expected 'int:Signed8' but found 'int?'
    var x4 = y >>> b;
    int _ = x4; // @error expected 'int' but found 'int?'

    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int?'
    var x6 = y >>> c;
    float _ = x6; // @error expected 'float' but found 'int?'
}

Test-Case: error
Description: Test resultant type of the '<<' expression with 'int:Signed8' as the LHS operand and optional builtin
             subtypes of integer as the RHS operand.
Labels: decimal, float, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, unary-minus, var

function errorFunction() {
    int:Signed8 a = 127;
    int:Signed8? b = 7;
    int:Signed8? c = -120;
    int:Unsigned8? d = 5;
    int:Signed16? e = 7;
    int:Signed16? f = -120;
    int:Unsigned16? g = 5;
    int:Signed32? h = 7;
    int:Signed32? i = -120;
    int:Unsigned32? j = 5;
    int:Signed8? k = ();
    int:Unsigned8? l = ();
    int:Signed16? m = ();
    int:Unsigned16? n = ();
    int:Signed32? p = ();
    int:Unsigned32? q = ();

    var x1 = a >>> b;
    int:Signed16 _ = x1; // @error expected 'int:Signed16' but found 'int?'
    var x2 = a >>> c;
    float _ = x2; // @error expected 'float' but found 'int?'

    var x3 = a >>> d;
    int:Unsigned16 _ = x3; // @error expected 'int:Unsigned16' but found 'int?'

    var x4 = a >>> e;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int?'
    var x5 = a >>> f;
    decimal _ = x5; // @error expected 'decimal' but found 'int?'

    var x6 = a >>> g;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int?'

    var x7 = a >>> h;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int?'
    var x8 = a >>> i;
    float _ = x8; // @error expected 'float' but found 'int?'

    var x9 = a >>> j;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int?'

    var x11 = a >>> k;
    int:Signed16 _ = x11; // @error expected 'int:Signed16' but found 'int?'
    var x12 = a >>> l;
    int:Signed16 _ = x12; // @error expected 'int:Signed16' but found 'int?'
    var x13 = a >>> m;
    int:Signed16 _ = x13; // @error expected 'int:Signed16' but found 'int?'
    var x14 = a >>> n;
    int:Signed8 _ = x14; // @error expected 'int:Signed8' but found 'int?'
    var x15 = a >>> p;
    int:Signed8 _ = x15; // @error expected 'int:Signed8' but found 'int?'
    var x16 = a >>> q;
    int:Signed8 _ = x16; // @error expected 'int:Signed8' but found 'int?'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed8' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, float, int, int:Signed8, nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed8 x = 12;
    int:Signed8 y = -22;
    byte? a = 2;
    byte? b = 255;
    byte? c = ();

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error  expected 'int:Signed8' but found 'int?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int?'
    var x3 = y >>> a;
    int:Signed8 _ = x3; // @error  expected 'int:Signed8' but found 'int?'
    var x4 = y >>> b;
    int _ = x4; // @error expected 'int' but found 'int?'

    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int?'
    var x6 = y >>> c;
    byte _ = x6; // @error expected 'byte' but found 'int?'
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed8' operands in function call and method call.
Labels: function-call-expr, int:Signed8, shift-expr, unary-minus, value:toBalString(), value:toString()

function init() {
    int:Signed8 a = -122;
    int:Signed8 b = -123;
    int:Signed8 c = 12;
    int:Signed8 d = 2;

    rightShiftExpr(a >>> b); // @output 576460752303423484
    rightShiftExpr(a >>> d); // @output 4611686018427387873
    rightShiftExpr(c >>> d); // @output 3
    rightShiftExpr(c >>> b); // @output 0

    io:println((a >>> b).toString()); // @output 576460752303423484
    io:println((a >>> d).toString()); // @output 4611686018427387873
    io:println((c >>> d).toString()); // @output 3
    io:println((c >>> b).toString()); // @output 0

    io:println((a >>> b).toBalString()); // @output 576460752303423484
    io:println((a >>> d).toBalString()); // @output 4611686018427387873
    io:println((c >>> d).toBalString()); // @output 3
    io:println((c >>> b).toBalString()); // @output 0
}

function rightShiftExpr(int x) {
    io:println(x);
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed8' operands as a return statement.
Labels: int, int:Signed8, return-stmt, shift-expr, unary-minus

function init() {
    int:Signed8 a = -122;
    int:Signed8 b = -123;
    int:Signed8 c = 12;
    int:Signed8 d = 2;

    io:println(rightShiftExpr(a, b)); // @output 576460752303423484
    io:println(rightShiftExpr(a, d)); // @output 4611686018427387873
    io:println(rightShiftExpr(c, d)); // @output 3
    io:println(rightShiftExpr(c, b)); // @output 0
}

function rightShiftExpr(int:Signed8 x, int:Signed8 y) returns int {
    return x >>> y;
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned8' DecimalNumbers as operands.
Labels: int:Unsigned8, shift-expr

function init() {
    int:Unsigned8 a = 247;
    int:Unsigned8 b = 3;
    int:Unsigned8 c = 0;

    io:println(a >>> b); // @output 30
    io:println(a >>> c); // @output 247
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned8' HexIntLiterals as operands.
Labels: HexIntLiterals, int:Unsigned8, shift-expr

function init() {
    int:Unsigned8 a = 0xf5;
    int:Unsigned8 b = 0x3;
    int:Unsigned8 c = 0x0;

    io:println(a >>> b); // @output 30
    io:println(a >>> c); // @output 245
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned8' IntLiterals as operands.
Labels: HexIntLiterals, int:Unsigned8, shift-expr

function init() {
    int:Unsigned8 a = 253;
    int:Unsigned8 b = 4;
    int:Unsigned8 c = 0xf5;
    int:Unsigned8 d = 0x1;
    int:Unsigned8 e = 0;
    int:Unsigned8 f = 0x0;

    io:println(a >>> d); // @output 126
    io:println(c >>> b); // @output 15
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned8' as the LHS operand and 'int' as the RHS operand.
Labels: int, int:Unsigned8, shift-expr, unary-minus

function init() {
    int:Unsigned8 x = 250;
    int a = 3;
    int b = -9223372036854775800;

    io:println(x >>> a); // @output 31

    io:println(x >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned8' as the LHS operand and builtin subtypes of integer as the RHS
             operand.
Labels: int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr, unary-minus

function init() {
    int:Unsigned8 x = 246;
    int:Signed8 a = 2;
    int:Signed8 b = -128;
    int:Unsigned8 c = 5;
    int:Signed16 d = 32750;
    int:Signed16 e = -32752;
    int:Unsigned16 f = 3;
    int:Signed32 g = 1;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    io:println(x >>> a); // @output 61
    io:println(x >>> b); // @output 246

    io:println(x >>> c); // @output 7

    io:println(x >>> d); // @output 0
    io:println(x >>> e); // @output 0

    io:println(x >>> f); // @output 30

    io:println(x >>> g); // @output 123
    io:println(x >>> h); // @output 1

    io:println(x >>> i); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for optional 'int:Unsigned8' operands.
Labels: int, int:Unsigned8, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    int:Unsigned8? a = 246;
    int:Unsigned8? b = 5;
    int:Unsigned8? c = 0;
    int:Unsigned8? d = ();
    int:Unsigned8 e = 50;
    int:Unsigned8 f = 7;

    int? x1 = a >>> b;
    io:println(x1); // @output 7
    int? x2 = f >>> b;
    io:println(x2); // @output 0
    int? x3 = a >>> f;
    io:println(x3); // @output 1
    int? x4 = e >>> b;
    io:println(x4); // @output 1

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()
    int? x7 = d >>> b;
    io:println(x7.toBalString()); // @output ()

    io:println(a >>> b); // @output 7
    io:println(a >>> c); // @output 246

    io:println(a >>> f); // @output 1
    io:println(e >>> b); // @output 1

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
    io:println((d >>> d).toBalString()); // @output ()
}

Test-Case: output
Description: Test 0x3F mask of 'int:Unsigned8' RHS operand in '>>>' expression.
Labels: int:Unsigned8, shift-expr

function init() {
    int:Unsigned8 a = 255;
    int:Unsigned8 b = 63;
    int:Unsigned8 c = 64;
    int:Unsigned8 d = 122;

    io:println(a >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned8): 11111111
    // Shift amount = Before applying mask, In binary: 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000
    //        = In decimal: (0)

    io:println(a >>> c); // @output 255
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned8): 11111111
    // Shift amount = Before applying mask, In binary: 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111
    //        = In decimal: (255)

    io:println(a >>> d); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned8): 11111111
    // Shift amount = Before applying mask, In binary: 01111010, In decimal: 122
    //                After applying mask, In binary: 111010, In decimal: 58
    // Result = In binary: 00000000
    //        = In decimal: (0)

    io:println(b >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned8): 00111111
    // Shift amount = Before applying mask, In binary: 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000
    //        = In decimal: (0)

    io:println(b >>> c); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned8): 00111111
    // Shift amount = Before applying mask, In binary: 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 00111111
    //        = In decimal: (63)

    io:println(a >>> a); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned8): 11111111
    // Shift amount = Before applying mask, In binary: 11111111, In decimal: 255
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000
    //        = In decimal: (0)
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and 'int' as the RHS
             operand.
Labels: int, int:Unsigned8, shift-expr, unary-minus

function init() {
    int:Unsigned8 x = 250;
    int a = 3;
    int b = -9223372036854775805;

    int:Unsigned8 x1 = x >>> a;
    io:println(x1); // @output 31
    int:Unsigned8 x2 = x >>> a;
    io:println(x2); // @output 31
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and 'int' as the RHS
             operand.
Labels: float, int, int:Unsigned8, shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned8 x = 251;
    int a = 2;
    int b = -124;

    var x1 = x >>> a;
    float _ = x1; // @error expected 'float' but found 'int:Unsigned8'
    var x2 = x >>> a;
    float _ = x2; // @error expected 'float' but found 'int:Unsigned8'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and builtin subtype of
             integer as the RHS operand.
Labels: int:Signed8, int:Signed16, int:Unsigned32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr,
        unary-minus

function init() {
    int:Unsigned8 x = 250;
    int:Signed8 a = 2;
    int:Signed8 b = -120;
    int:Unsigned8 c = 1;
    int:Signed16 d = 8;
    int:Signed16 e = -32755;
    int:Unsigned16 f = 3;
    int:Signed32 g = 6;
    int:Signed32 h = -2147483647;
    int:Unsigned32 i = 5;

    int:Unsigned8 x1 = x >>> a;
    io:println(x1); // @output 62
    int:Unsigned8 x2 = x >>> b;
    io:println(x2); // @output 0

    int:Unsigned8 x3 = x >>> c;
    io:println(x3); // @output 125

    int:Unsigned8 x4 = x >>> d;
    io:println(x4); // @output 0
    int:Unsigned8 x5 = x >>> e;
    io:println(x5); // @output 0

    int:Unsigned8 x6 = x >>> f;
    io:println(x6); // @output 31

    int:Unsigned8 x7 = x >>> g;
    io:println(x7); // @output 3
    int:Unsigned8 x8 = x >>> h;
    io:println(x8); // @output 125

    int:Unsigned8 x9 = x >>> i;
    io:println(x9); // @output 7
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and builtin subtypes of
             integer as the RHS operand.
Labels: decimal, float, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned8 x = 255;
    int:Signed8 a = 1;
    int:Signed8 b = -124;
    int:Unsigned8 c = 5;
    int:Signed16 d = 8;
    int:Signed16 e = -32765;
    int:Unsigned16 f = 3;
    int:Signed32 g = 9;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int:Unsigned8'
    var x2 = x >>> b;
    decimal _ = x2; // @error expected 'decimal' but found 'int:Unsigned8'

    var x3 = x >>> c;
    int:Signed8 _ = x3; // @error expected 'int:Signed8' but found 'int:Unsigned8'

    var x4 = x >>> d;
    int:Signed8 _ = x4; // @error expected 'int:Signed8' but found 'int:Unsigned8'
    var x5 = x >>> e;
    float _ = x5; // @error expected 'float' but found 'int:Unsigned8'

    var x6 = x >>> f;
    int:Signed8 _ = x6; // @error expected 'int:Signed8' but found 'int:Unsigned8'

    var x7 = x >>> g;
    int:Signed8 _ = x7; // @error expected 'int:Signed8' but found 'int:Unsigned8'
    var x8 = x >>> h;
    decimal _ = x8; // @error expected 'decimal' but found 'int:Unsigned8'

    var x9 = x >>> i;
    int:Signed8 _ = x9; // @error expected 'int:Signed8' but found 'int:Unsigned8'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and byte as the RHS
             operand.
Labels: byte, int:Unsigned8, shift-expr, var

function init() {
    int:Unsigned8 x = 253;
    byte a = 2;

    var x1 = x >>> a;
    int:Unsigned8 y1 = x1;
    io:println(y1); // @output 63
    byte y2 = x1;
    io:println(y2); // @output 63
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and byte as the RHS
             operand.
Labels: byte, int:Unsigned8, shift-expr, var

function errorFunction() {
    int:Unsigned8 x = 254;
    byte a = 2;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Unsigned8' but found 'int:Unsigned8'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and user-defined
             subtype of integer as the RHS operand.
Labels: DecimalNumber, int:Unsigned8, shift-expr, type, unary-minus, union-type

type Ints -1|2|-128;

function init() {
    int:Unsigned8 x = 248;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    int:Unsigned8 x1 = x >>> a;
    io:println(x1); // @output 62
    int:Unsigned8|float x2 = x >>> b;
    io:println(x2); // @output 0
    int:Unsigned8|decimal x3 = x >>> c;
    io:println(x3); // @output 248
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and user-defined
             subtype of integer as the RHS operand.
Labels: DecimalNumber, float, int:Unsigned8, shift-expr, type, unary-minus, var

type Ints -1|2|-128;

function errorFunction() {
    int:Unsigned8 x = 247;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int:Unsigned8'
    var x2 = x >>> b;
    Ints _ = x2; // @error expected '-1|2|-128' but found 'int:Unsigned8'
    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'int:Unsigned8'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: int, int:Unsigned8, nil-literal, optional-type, shift-expr, unary-minus, value:toBalString()

function init() {
    int:Unsigned8 x = 246;
    int? a = 2;
    int? b = -9223372036854775806;
    int? c = ();

    int:Unsigned8? x1 = x >>> a;
    io:println(x1); // @output 61
    int:Unsigned8? x2 = x >>> b;
    io:println(x2); // @output 61
    int:Unsigned8? x3 = x >>> c;
    io:println(x3.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: float, int, int:Unsigned8, nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned8 x = 12;
    int? a = 2;
    int? b = -9223372036854775794;
    int? c = ();

    var x1 = x >>> a;
    int:Unsigned8 _ = x1; // @error  expected 'int:Unsigned8' but found 'int:Unsigned8?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int:Unsigned8?'

    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'int:Unsigned8?'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and optional builtin
             subtype of integer as the RHS operand.
Labels: int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, optional-type,
        shift-expr, unary-minus, union-type, value:toBalString()

function init() {
    int:Unsigned8 x = 251;
    int:Signed8? a = 3;
    int:Signed8? b = -123;
    int:Unsigned8? c = 3;
    int:Signed16? d = 2;
    int:Signed16? e = -32758;
    int:Unsigned16? f = 5;
    int:Signed32? g = 3;
    int:Signed32? h = -2147483641;
    int:Unsigned32? i = 1;
    int:Unsigned8? j = ();
    int:Unsigned8? k = ();
    int:Signed16? l = ();
    int:Unsigned16? m = ();
    int:Signed32? n = ();
    int:Unsigned32? o = ();

    int:Unsigned8|() x1 = x >>> a;
    io:println(x1); // @output 31
    int:Unsigned8?|float x2 = x >>> b;
    io:println(x2); // @output 7

    int:Unsigned8? x3 = x >>> c;
    io:println(x3); // @output 31

    int:Unsigned8? x4 = x >>> d;
    io:println(x4); // @output 62
    int:Unsigned8? x5 = x >>> e;
    io:println(x5); // @output 0

    int:Unsigned8? x6 = x >>> f;
    io:println(x6); // @output 7

    int:Unsigned8? x7 = x >>> g;
    io:println(x7); // @output 31
    int:Unsigned8? x8 = x >>> h;
    io:println(x8); // @output 1

    int:Unsigned8|() x9 = x >>> i;
    io:println(x9); // @output 125

    int:Unsigned8|() x11 = x >>> j;
    io:println(x11.toBalString()); // @output ()
    int:Unsigned8|() x12 = x >>> k;
    io:println(x12.toBalString()); // @output ()
    int:Unsigned8|() x13 = x >>> l;
    io:println(x13.toBalString()); // @output ()
    int:Unsigned8|() x14 = x >>> m;
    io:println(x14.toBalString()); // @output ()
    int:Unsigned8|() x15 = x >>> n;
    io:println(x15.toBalString()); // @output ()
    int:Unsigned8|() x16 = x >>> o;
    io:println(x16.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and optional builtin
             subtypes of integer as the RHS operand.
Labels: decimal, float, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned16,
        optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned8 a = 127;
    int:Signed8? b = 7;
    int:Signed8? c = -120;
    int:Unsigned8? d = 5;
    int:Signed16? e = 7;
    int:Signed16? f = -120;
    int:Unsigned16? g = 5;
    int:Signed32? h = 7;
    int:Signed32? i = -120;
    int:Unsigned32? j = 5;
    int:Signed8? k = ();
    int:Unsigned8? l = ();
    int:Signed16? m = ();
    int:Unsigned16? n = ();
    int:Signed32? p = ();
    int:Unsigned32? q = ();

    var x1 = a >>> b;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int:Unsigned8?'
    var x2 = a >>> c;
    float _ = x2; // @error expected 'float' but found 'int:Unsigned8?'

    var x3 = a >>> d;
    int:Unsigned8 _ = x3; // @error expected 'int:Unsigned8' but found 'int:Unsigned8?'

    var x4 = a >>> e;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int:Unsigned8?'
    var x5 = a >>> f;
    decimal _ = x5; // @error expected 'decimal' but found 'int:Unsigned8?'

    var x6 = a >>> g;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int:Unsigned8?'

    var x7 = a >>> h;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int:Unsigned8?'
    var x8 = a >>> i;
    float _ = x8; // @error expected 'float' but found 'int:Unsigned8?'

    var x9 = a >>> j;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int:Unsigned8?'

    var x11 = a >>> k;
    int:Unsigned16 _ = x11; // @error expected 'int:Unsigned16' but found 'int:Unsigned8?'
    var x12 = a >>> l;
    int:Signed16 _ = x12; // @error expected 'int:Signed16' but found 'int:Unsigned8?'
    var x13 = a >>> m;
    int:Signed16 _ = x13; // @error expected 'int:Signed16' but found 'int:Unsigned8?'
    var x14 = a >>> n;
    int:Signed16 _ = x14; // @error expected 'int:Signed16' but found 'int:Unsigned8?'
    var x15 = a >>> p;
    int:Signed16 _ = x15; // @error expected 'int:Signed16' but found 'int:Unsigned8?'
    var x16 = a >>> q;
    int:Signed16 _ = x16; // @error expected 'int:Signed16' but found 'int:Unsigned8?'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, int, int:Unsigned8, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    int:Unsigned8 x = 251;
    byte? a = 2;
    byte? b = 255;
    byte? c = ();

    int:Unsigned8? x1 = x >>> a;
    io:println(x1); // @output 62
    byte? x2 = x >>> b;
    io:println(x2); // @output 0

    int? x3 = x >>> c;
    io:println(x3.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned8' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, float, int, int:Unsigned8, nil-literal, optional-type, shift-expr,var

function errorFunction() {
    int:Unsigned8 x = 12;
    byte? a = 2;
    byte? b = 255;
    byte? c = ();

    var x1 = x >>> a;
    int:Unsigned8 _ = x1; // @error  expected 'int:Unsigned8' but found 'int:Unsigned8?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int:Unsigned8?'

    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'int:Unsigned8?'
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned8' operands in function call and method call.
Labels: function-call-expr, int, int:Unsigned8, shift-expr, unary-minus, value:toBalString(), value:toString()

function init() {
    int:Unsigned8 a = 125;
    int:Unsigned8 b = 3;
    int:Unsigned8 c = 12;
    int:Unsigned8 d = 2;

    rightShiftExpr(a >>> b); // @output 15
    rightShiftExpr(a >>> d); // @output 31
    rightShiftExpr(c >>> d); // @output 3
    rightShiftExpr(c >>> b); // @output 1

    io:println((a >>> b).toString()); // @output 15
    io:println((a >>> d).toString()); // @output 31
    io:println((c >>> d).toString()); // @output 3
    io:println((c >>> b).toString()); // @output 1

    io:println((a >>> b).toBalString()); // @output 15
    io:println((a >>> d).toBalString()); // @output 31
    io:println((c >>> d).toBalString()); // @output 3
    io:println((c >>> b).toBalString()); // @output 1
}

function rightShiftExpr(int:Unsigned8 x) {
    io:println(x);
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned8' operands as a return statement.
Labels: int:Unsigned8, return-stmt, shift-expr, unary-minus

function init() {
    int:Unsigned8 a = 125;
    int:Unsigned8 b = 3;
    int:Unsigned8 c = 12;
    int:Unsigned8 d = 2;

    io:println(rightShiftExpr(a, b)); // @output 15
    io:println(rightShiftExpr(a, d)); // @output 31
    io:println(rightShiftExpr(c, d)); // @output 3
    io:println(rightShiftExpr(c, b)); // @output 1
}

function rightShiftExpr(int:Unsigned8 x, int:Unsigned8 y) returns int:Unsigned8 {
    return x >>> y;
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int:Signed16' DecimalNumbers as operands.
Labels: int:Signed16, shift-expr

function init() {
    int:Signed16 a = 32761;
    int:Signed16 b = 5;
    int:Signed16 c = 0;

    io:println(a >>> b); // @output 1023
    io:println(a >>> c); // @output 32761
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int:Signed16' HexIntLiterals as operands.
Labels: HexIntLiterals, int:Signed16, shift-expr

function init() {
    int:Signed16 a = 0x75;
    int:Signed16 b = 0x3;
    int:Signed16 c = 0x0;

    io:println(a >>> b); // @output 14
    io:println(a >>> c); // @output 117
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int:Signed16' IntLiterals as operands.
Labels: HexIntLiterals, int:Signed16, shift-expr

function init() {
    int:Signed16 a = 32759;
    int:Signed16 b = 2;
    int:Signed16 c = 0x7ffc;
    int:Signed16 d = 0x5;
    int:Signed16 e = 0;
    int:Signed16 f = 0x0;

    io:println(a >>> d); // @output 1023
    io:println(c >>> b); // @output 8191
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int:Signed16' DecimalNumbers as operands.
Labels: int:Signed16, shift-expr, unary-minus

function init() {
    int:Signed16 a = -32763;
    int:Signed16 b = -32767;
    int:Signed16 c = -0;

    io:println(a >>> b); // @output 9223372036854759426
    io:println(a >>> c); // @output -32763
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int:Signed16' HexIntLiterals as operands.
Labels: HexIntLiterals, int:Signed16, shift-expr, unary-minus

function init() {
    int:Signed16 a = -0x7ff5;
    int:Signed16 b = -0x7ffe;
    int:Signed16 c = -0x0;

    io:println(a >>> b); // @output 4611686018427379714
    io:println(a >>> c); // @output -32757
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int:Signed16' IntLiterals as operands.
Labels: HexIntLiterals, int:Signed16, shift-expr, unary-minus

function init() {
    int:Signed16 a = -32765;
    int:Signed16 b = -2;
    int:Signed16 c = -0x7ffb;
    int:Signed16 d = -0x2;
    int:Signed16 e = -0;
    int:Signed16 f = -0x0;

    io:println(a >>> d); // @output 3
    io:println(c >>> b); // @output 3
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int:Signed16' DedcimalNumbers as operands.
Labels: int:Signed16, shift-expr, unary-minus

function init() {
    int:Signed16 a = -32763;
    int:Signed16 b = -32760;
    int:Signed16 c = 100;
    int:Signed16 d = 2;

    io:println(a >>> d); // @output 4611686018427379713
    io:println(c >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int:Signed16' HexIntLiterals as operands.
Labels: HexIntliteral, int:Signed16, shift-expr, unary-minus

function init() {
    int:Signed16 a = -0x1f;
    int:Signed16 b = -0x3;
    int:Signed16 c = 0x1f;
    int:Signed16 d = 0x1;

    io:println(a >>> d); // @output 9223372036854775792
    io:println(c >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int:Signed16' IntLiterals as operands.
Labels: HexIntliteral, int:Signed16, shift-expr, unary-minus

function init() {
    int:Signed16 a = -111;
    int:Signed16 b = -32759;
    int:Signed16 c = 100;
    int:Signed16 d = 2;
    int:Signed16 e = -0x1f;
    int:Signed16 f = -0x4;
    int:Signed16 g = 0x1f;
    int:Signed16 h = 0x1;

    io:println(a >>> d); // @output 4611686018427387876
    io:println(c >>> b); // @output 0

    io:println(e >>> g); // @output 8589934591
    io:println(g >>> f); // @output 0

    io:println(a >>> h); // @output 9223372036854775752
    io:println(g >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed16' as the LHS operand and 'int' as the RHS operand.
Labels: int, int:Signed16, shift-expr, unary-minus

function init() {
    int:Signed16 x = 32760;
    int:Signed16 y = -32760;
    int a = 3;
    int b = -9223372036854775804;

    io:println(x >>> a); // @output 4095
    io:println(x >>> b); // @output 2047

    io:println(y >>> a); // @output 2305843009213689857
    io:println(y >>> b); // @output 1152921504606844928
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed16' as the LHS operand and builtin subtypes of integer as the RHS
             operand.
Labels: int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr, unary-minus

function init() {
    int:Signed16 x = 32767;
    int:Signed16 y = -32764;
    int:Signed8 a = 2;
    int:Signed8 b = -124;
    int:Unsigned8 c = 5;
    int:Signed16 d = 2;
    int:Signed16 e = -32765;
    int:Unsigned16 f = 3;
    int:Signed32 g = 3;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 1;

    io:println(x >>> a); // @output 8191
    io:println(x >>> b); // @output 2047
    io:println(y >>> a); // @output 4611686018427379713
    io:println(y >>> b); // @output 1152921504606844928

    io:println(x >>> c); // @output 1023
    io:println(y >>> c); // @output 576460752303422464

    io:println(x >>> d); // @output 8191
    io:println(x >>> e); // @output 4095
    io:println(y >>> d); // @output 4611686018427379713
    io:println(y >>> e); // @output 2305843009213689856

    io:println(x >>> f); // @output 4095
    io:println(y >>> f); // @output 2305843009213689856

    io:println(x >>> g); // @output 4095
    io:println(x >>> h); // @output 255
    io:println(y >>> g); // @output 2305843009213689856
    io:println(y >>> h); // @output 144115188075855616

    io:println(x >>> i); // @output 16383
    io:println(y >>> i); // @output 9223372036854759426
}

Test-Case: output
Description: Test '>>>' expression for optional zero and positive 'int:Signed16' operands.
Labels: int, int:Signed16, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    int:Signed16? a = 32767;
    int:Signed16? b = 2;
    int:Signed16? c = 0;
    int:Signed16? d = ();
    int:Signed16 e = 5;
    int:Signed16 f = 1;

    int? x1 = a >>> b;
    io:println(x1); // @output 8191
    int? x2 = f >>> b;
    io:println(x2); // @output 0
    int? x3 = a >>> f;
    io:println(x3); // @output 16383
    int? x4 = e >>> b;
    io:println(x4); // @output 1

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()
    int? x7 = d >>> b;
    io:println(x7.toBalString()); // @output ()

    io:println(a >>> b); // @output 8191
    io:println(a >>> c); // @output 32767

    io:println(a >>> f); // @output 16383
    io:println(e >>> b); // @output 1

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
    io:println((d >>> d).toBalString()); // @output ()
}

Test-Case: output
Description: Test '>>>' expression for optional zero and negative 'int:Signed16' operands.
Labels: int, int:Signed16, nil-literal, optional-type, shift-expr, unary-minus, value:toBalString()

function init() {
    int:Signed16? a = -32766;
    int:Signed16? b = -32760;
    int:Signed16? c = 0;
    int:Signed16? d = ();
    int:Signed16 e = -2;
    int:Signed16 f = -32763;

    int? x1 = a >>> b;
    io:println(x1); // @output 72057594037927808
    int? x2 = f >>> b;
    io:println(x2); // @output 72057594037927808
    int? x3 = a >>> f;
    io:println(x3); // @output 576460752303422464
    int? x4 = e >>> b;
    io:println(x4); // @output 72057594037927935

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()

    io:println(a >>> b); // @output 72057594037927808
    io:println(a >>> c); // @output -32766

    io:println(a >>> f); // @output 576460752303422464
    io:println(e >>> b); // @output 72057594037927935

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
}

Test-Case: output
Description: Test '>>>' expression for optional positive and negative 'int:Signed16'.
Labels: int:Signed16, optional-type, shift-expr, unary-minus

function init() {
    int:Signed16? a = 32761;
    int:Signed16? b = 5;
    int:Signed16? c = -2;
    int:Signed16? d = -32767;
    int:Signed16 e = 100;
    int:Signed16 f = 7;
    int:Signed16 g = -23;
    int:Signed16 h = -32764;

    io:println(a >>> d); // @output 16380
    io:println(c >>> b); // @output 576460752303423487

    io:println(a >>> h); // @output 2047
    io:println(c >>> f); // @output 144115188075855871

    io:println(e >>> d); // @output 50
    io:println(g >>> b); // @output 576460752303423487
}

Test-Case: output
Description: Test 0x3F mask of 'int:Signed16' RHS operand in '>>>' expression.
Labels: int:Signed16, shift-expr, unary-minus

function init() {
    int:Signed16 a = -1;
    int:Signed16 b = 63;
    int:Signed16 c = 64;
    int:Signed16 d = 32758;
    int:Signed16 e = -65;
    int:Signed16 f = -64;

    io:println(a >>> b); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed16): 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(a >>> c); // @output -1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed16): 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    //        = In decimal: (-1)

    io:println(a >>> d); // @output 1023
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed16): 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 01111111 11110110, In decimal: 32758
    //                After applying mask, In binary: 110110, In decimal: 54
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000011 11111111
    //        = In decimal: (1023)

    io:println(b >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed16): 00000000 00111111
    //                     = Equivalent binary representation (basic type): 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    //        = In decimal: (0)

    io:println(b >>> c); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed16): 00000000 00111111
    //                     = Equivalent binary representation (basic type): 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    //        = In decimal: (63)

    io:println(a >>> e); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed16): 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 10111111, In decimal: -65
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(a >>> f); // @output -1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed16): 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11000000, In decimal: -64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    //        = In decimal: (-1)

    io:println(a >>> a); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed16): 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111, In decimal: -1
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(e >>> c); // @output -65
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed16): 11111111 10111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111
    // Shift amount = Before applying mask, In binary: 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111
    //        = In decimal: (-65)
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed16' as the LHS operand and 'int' as the RHS
             operand.
Labels: decimal, float, int, int:Signed16, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed16 x = 32757;
    int:Signed16 y = -32764;
    int a = 7;
    int b = -12;

    var x1 = x >>> a;
    int:Signed16 _ = x1; // @error expected 'int:Signed16' but found 'int'
    var x2 = x >>> b;
    float _ = x2; // @error expected 'float' but found 'int'
    var x3 = y >>> a;
    decimal _ = x3; // @error expected 'decimal' but found 'int'
    var x4 = y >>> b;
    float _ = x4; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed16' as the LHS operand and builtin subtypes of
             integer as the RHS operand.
Labels: decimal, float, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, unary-minus, var

function errorFunction() {
    int:Signed16 x = 32760;
    int:Signed8 a = 7;
    int:Signed8 b = -32;
    int:Unsigned8 c = 5;
    int:Signed16 d = 8;
    int:Signed16 e = -32750;
    int:Unsigned16 f = 3;
    int:Signed32 g = 9;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int'
    var x2 = x >>> b;
    decimal _ = x2; // @error expected 'decimal' but found 'int'

    var x3 = x >>> c;
    int:Unsigned16 _ = x3; // @error expected 'int:Unsigned16' but found 'int'

    var x4 = x >>> d;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int'
    var x5 = x >>> e;
    float _ = x5; // @error expected 'float' but found 'int'

    var x6 = x >>> f;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int'

    var x7 = x >>> g;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int'
    var x8 = x >>> h;
    decimal _ = x8; // @error expected 'decimal' but found 'int'

    var x9 = x >>> i;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed16' as the LHS operand and byte as the RHS
             operand.
Labels: byte, int:Signed16, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed16 x = 12;
    int:Signed16 y = -7;
    byte a = 20;

    var x1 = x >>> a;
    int:Signed16 _ = x1; // @error expected 'int:Signed16' but found 'int'
    var x2 = y >>> a;
    byte _ = x2; // @error expected 'byte' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed16' as the LHS operand and user-defined subtype
             of integer as the RHS operand.
Labels: DecimalNumber, float, int:Signed8, int:Signed16, shift-expr, type, unary-minus, var

type Ints -1|2|-128;

function errorFunction() {
    int:Signed16 x = 80;
    int:Signed16 y = -100;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int'
    var x2 = y >>> a;
    int:Signed16 _ = x2; // @error expected 'int:Signed16' but found 'int'
    var x3 = x >>> b;
    Ints _ = x3; // @error expected '-1|2|-128' but found 'int'
    var x4 = y >>> b;
    Ints _ = x4; // @error expected '-1|2|-128' but found 'int'
    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int'
    var x6 = y >>> c;
    float _ = x6; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed16' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: float, int, int:Signed8, int:Signed16, nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed16 x = 12;
    int:Signed16 y = -12;
    int? a = 2;
    int? b = -9223372036854775794;
    int? c = ();

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error  expected 'int:Signed8' but found 'int?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int?'
    var x3 = y >>> a;
    int:Signed16 _ = x3; // @error  expected 'int:Signed16' but found 'int?'
    var x4 = y >>> b;
    int _ = x4; // @error expected 'int' but found 'int?'

    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int?'
    var x6 = y >>> c;
    float _ = x6; // @error expected 'float' but found 'int?'
}

Test-Case: error
Description: Test resultant type of the '<<' expression with 'int:Signed16' as the LHS operand and optional builtin
             subtypes of integer as the RHS operand.
Labels: decimal, float, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, unary-minus, var

function errorFunction() {
    int:Signed16 a = 32763;
    int:Signed8? b = 7;
    int:Signed8? c = -121;
    int:Unsigned8? d = 5;
    int:Signed16? e = 7;
    int:Signed16? f = -120;
    int:Unsigned16? g = 5;
    int:Signed32? h = 7;
    int:Signed32? i = -120;
    int:Unsigned32? j = 5;
    int:Signed8? k = ();
    int:Unsigned8? l = ();
    int:Signed16? m = ();
    int:Unsigned16? n = ();
    int:Signed32? p = ();
    int:Unsigned32? q = ();

    var x1 = a >>> b;
    int:Signed16 _ = x1; // @error expected 'int:Signed16' but found 'int?'
    var x2 = a >>> c;
    float _ = x2; // @error expected 'float' but found 'int?'

    var x3 = a >>> d;
    int:Unsigned16 _ = x3; // @error expected 'int:Unsigned16' but found 'int?'

    var x4 = a >>> e;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int?'
    var x5 = a >>> f;
    decimal _ = x5; // @error expected 'decimal' but found 'int?'

    var x6 = a >>> g;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int?'

    var x7 = a >>> h;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int?'
    var x8 = a >>> i;
    float _ = x8; // @error expected 'float' but found 'int?'

    var x9 = a >>> j;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int?'

    var x11 = a >>> k;
    int:Signed16 _ = x11; // @error expected 'int:Signed16' but found 'int?'
    var x12 = a >>> l;
    int:Signed16 _ = x12; // @error expected 'int:Signed16' but found 'int?'
    var x13 = a >>> m;
    int:Signed16 _ = x13; // @error expected 'int:Signed16' but found 'int?'
    var x14 = a >>> n;
    int:Signed8 _ = x14; // @error expected 'int:Signed8' but found 'int?'
    var x15 = a >>> p;
    int:Signed8 _ = x15; // @error expected 'int:Signed8' but found 'int?'
    var x16 = a >>> q;
    int:Signed8 _ = x16; // @error expected 'int:Signed8' but found 'int?'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed16' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, float, int, int:Signed16, nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed16 x = 12;
    int:Signed16 y = -22;
    byte? a = 2;
    byte? b = 255;
    byte? c = ();

    var x1 = x >>> a;
    int:Signed16 _ = x1; // @error  expected 'int:Signed16' but found 'int?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int?'
    var x3 = y >>> a;
    int:Signed16 _ = x3; // @error  expected 'int:Signed16' but found 'int?'
    var x4 = y >>> b;
    int _ = x4; // @error expected 'int' but found 'int?'

    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int?'
    var x6 = y >>> c;
    byte _ = x6; // @error expected 'byte' but found 'int?'
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed16' operands in function call and method call.
Labels: function-call-expr, int:Signed16, shift-expr, unary-minus, value:toBalString(), value:toString()

function init() {
    int:Signed16 a = -32763;
    int:Signed16 b = -32757;
    int:Signed16 c = 12;
    int:Signed16 d = 2;

    rightShiftExpr(a >>> b); // @output 9007199254740976
    rightShiftExpr(a >>> d); // @output 4611686018427379713
    rightShiftExpr(c >>> d); // @output 3
    rightShiftExpr(c >>> b); // @output 0

    io:println((a >>> b).toString()); // @output 9007199254740976
    io:println((a >>> d).toString()); // @output 4611686018427379713
    io:println((c >>> d).toString()); // @output 3
    io:println((c >>> b).toString()); // @output 0

    io:println((a >>> b).toBalString()); // @output 9007199254740976
    io:println((a >>> d).toBalString()); // @output 4611686018427379713
    io:println((c >>> d).toBalString()); // @output 3
    io:println((c >>> b).toBalString()); // @output 0
}

function rightShiftExpr(int x) {
    io:println(x);
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed16' operands as a return statement.
Labels: int, int:Signed16, return-stmt, shift-expr, unary-minus

function init() {
    int:Signed16 a = -32758;
    int:Signed16 b = -32764;
    int:Signed16 c = 12;
    int:Signed16 d = 2;

    io:println(rightShiftExpr(a, b)); // @output 1152921504606844928
    io:println(rightShiftExpr(a, d)); // @output 4611686018427379714
    io:println(rightShiftExpr(c, d)); // @output 3
    io:println(rightShiftExpr(c, b)); // @output 0
}

function rightShiftExpr(int:Signed16 x, int:Signed16 y) returns int {
    return x >>> y;
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned16' DecimalNumbers as operands.
Labels: int:Unsigned16, shift-expr

function init() {
    int:Unsigned16 a = 65533;
    int:Unsigned16 b = 3;
    int:Unsigned16 c = 0;

    io:println(a >>> b); // @output 8191
    io:println(a >>> c); // @output 65533
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned16' HexIntLiterals as operands.
Labels: HexIntLiterals, int:Unsigned16, shift-expr

function init() {
    int:Unsigned16 a = 0xf5;
    int:Unsigned16 b = 0x3;
    int:Unsigned16 c = 0x0;

    io:println(a >>> b); // @output 30
    io:println(a >>> c); // @output 245
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned16' IntLiterals as operands.
Labels: HexIntLiterals, int:Unsigned16, shift-expr

function init() {
    int:Unsigned16 a = 65528;
    int:Unsigned16 b = 4;
    int:Unsigned16 c = 0xf5;
    int:Unsigned16 d = 0x1;
    int:Unsigned16 e = 0;
    int:Unsigned16 f = 0x0;

    io:println(a >>> d); // @output 32764
    io:println(c >>> b); // @output 15
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned16' as the LHS operand and 'int' as the RHS operand.
Labels: int:Unsigned16, int, shift-expr, unary-minus

function init() {
    int:Unsigned16 x = 65531;
    int a = 3;
    int b = -9223372036854775800;

    io:println(x >>> a); // @output 8191

    io:println(x >>> b); // @output 255
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned16' as the LHS operand and builtin subtypes of integer as the RHS
             operand.
Labels: int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr, unary-minus

function init() {
    int:Unsigned16 x = 65535;
    int:Signed8 a = 2;
    int:Signed8 b = -128;
    int:Unsigned8 c = 5;
    int:Signed16 d = 32750;
    int:Signed16 e = -32752;
    int:Unsigned16 f = 3;
    int:Signed32 g = 1;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    io:println(x >>> a); // @output 16383
    io:println(x >>> b); // @output 65535

    io:println(x >>> c); // @output 2047

    io:println(x >>> d); // @output 0
    io:println(x >>> e); // @output 0

    io:println(x >>> f); // @output 8191

    io:println(x >>> g); // @output 32767
    io:println(x >>> h); // @output 511

    io:println(x >>> i); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for optional 'int:Unsigned16' operands.
Labels: int:Unsigned16, int, nil-literal, optional-type, shift-expr, Value:toBalString()

function init() {
    int:Unsigned16? a = 65530;
    int:Unsigned16? b = 5;
    int:Unsigned16? c = 0;
    int:Unsigned16? d = ();
    int:Unsigned16 e = 50;
    int:Unsigned16 f = 7;

    int? x1 = a >>> b;
    io:println(x1); // @output 2047
    int? x2 = f >>> b;
    io:println(x2); // @output 0
    int? x3 = a >>> f;
    io:println(x3); // @output 511
    int? x4 = e >>> b;
    io:println(x4); // @output 1

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()
    int? x7 = d >>> b;
    io:println(x7.toBalString()); // @output ()

    io:println(a >>> b); // @output 2047
    io:println(a >>> c); // @output 65530

    io:println(a >>> f); // @output 511
    io:println(e >>> b); // @output 1

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
    io:println((d >>> d).toBalString()); // @output ()
}

Test-Case: output
Description: Test 0x3F mask of 'int:Unsigned16' RHS operand in '>>>' expression.
Labels: int:Unsigned16, shift-expr

function init() {
    int:Unsigned16 a = 65535;
    int:Unsigned16 b = 63;
    int:Unsigned16 c = 64;
    int:Unsigned16 d = 122;

    io:println(a >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned16): 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000
    //        = In decimal: (0)

    io:println(a >>> c); // @output 65535
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned16): 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111
    //        = In decimal: (65535)

    io:println(a >>> d); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned16): 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 01111010, In decimal: 122
    //                After applying mask, In binary: 111010, In decimal: 58
    // Result = In binary: 00000000 00000000
    //        = In decimal: (0)

    io:println(b >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned16): 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000
    //        = In decimal: (0)

    io:println(b >>> c); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned16): 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 00000000 00111111
    //        = In decimal: (63)

    io:println(a >>> a); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned16): 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111, In decimal: 65535
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000
    //        = In decimal: (0)
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and 'int' as the RHS
             operand.
Labels: int:Unsigned16, int, shift-expr, unary-minus

function init() {
    int:Unsigned16 x = 65528;
    int a = 3;
    int b = -9223372036854775805;

    int:Unsigned16 x1 = x >>> a;
    io:println(x1); // @output 8191
    int:Unsigned16 x2 = x >>> b;
    io:println(x2); // @output 8191
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and 'int' as the RHS
             operand.
Labels: decimal, float, int:Unsigned16, int, shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned16 x = 65534;
    int a = 2;
    int b = -124;

    var x1 = x >>> a;
    decimal _ = x1; // @error expected 'decimal' but found 'int:Unsigned16'
    var x2 = x >>> a;
    float _ = x2; // @error expected 'float' but found 'int:Unsigned16'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and builtin subtype of
             integer as the RHS operand.
Labels: int:Signed8, int:Signed16, int:Unsigned32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr,
        unary-minus

function init() {
    int:Unsigned16 x = 245;
    int:Signed8 a = 2;
    int:Signed8 b = -120;
    int:Unsigned8 c = 1;
    int:Signed16 d = 8;
    int:Signed16 e = -32755;
    int:Unsigned16 f = 3;
    int:Signed32 g = 6;
    int:Signed32 h = -2147483647;
    int:Unsigned32 i = 5;

    int:Unsigned16 x1 = x >>> a;
    io:println(x1); // @output 61
    int:Unsigned16 x2 = x >>> b;
    io:println(x2); // @output 0

    int:Unsigned16 x3 = x >>> c;
    io:println(x3); // @output 122

    int:Unsigned16 x4 = x >>> d;
    io:println(x4); // @output 0
    int:Unsigned16 x5 = x >>> e;
    io:println(x5); // @output 0

    int:Unsigned16 x6 = x >>> f;
    io:println(x6); // @output 30

    int:Unsigned16 x7 = x >>> g;
    io:println(x7); // @output 3
    int:Unsigned16 x8 = x >>> h;
    io:println(x8); // @output 122

    int:Unsigned16 x9 = x >>> i;
    io:println(x9); // @output 7
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and builtin subtypes of
             integer as the RHS operand.
Labels: decimal, float, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned16 x = 65535;
    int:Signed8 a = 1;
    int:Signed8 b = -124;
    int:Unsigned8 c = 5;
    int:Signed16 d = 8;
    int:Signed16 e = -32765;
    int:Unsigned16 f = 3;
    int:Signed32 g = 9;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int:Unsigned16'
    var x2 = x >>> b;
    decimal _ = x2; // @error expected 'decimal' but found 'int:Unsigned16'

    var x3 = x >>> c;
    int:Signed8 _ = x3; // @error expected 'int:Signed8' but found 'int:Unsigned16'

    var x4 = x >>> d;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int:Unsigned16'
    var x5 = x >>> e;
    float _ = x5; // @error expected 'float' but found 'int:Unsigned16'

    var x6 = x >>> f;
    int:Signed16 _ = x6; // @error expected 'int:Signed16' but found 'int:Unsigned16'

    var x7 = x >>> g;
    int:Signed8 _ = x7; // @error expected 'int:Signed8' but found 'int:Unsigned16'
    var x8 = x >>> h;
    decimal _ = x8; // @error expected 'decimal' but found 'int:Unsigned16'

    var x9 = x >>> i;
    int:Signed16 _ = x9; // @error expected 'int:Signed16' but found 'int:Unsigned16'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and byte as the RHS
             operand.
Labels: byte, int:Unsigned16, shift-expr, var

function init() {
    int:Unsigned16 x = 65527;
    byte a = 2;

    var x1 = x >>> a;
    int:Unsigned16 y1 = x1;
    io:println(y1); // @output 16381
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and byte as the RHS
             operand.
Labels: byte, int:Signed8, int:Unsigned16, shift-expr, var

function errorFunction() {
    int:Unsigned16 x = 65531;
    byte a = 2;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int:Unsigned16'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and user-defined
             subtype of integer as the RHS operand.
Labels: DecimalNumber, decimal, float, int:Unsigned16, shift-expr, type, unary-minus, union-type

type Ints -1|2|-128;

function init() {
    int:Unsigned16 x = 65533;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    int:Unsigned16 x1 = x >>> a;
    io:println(x1); // @output 16383
    int:Unsigned16|float x2 = x >>> b;
    io:println(x2); // @output 0
    int:Unsigned16|decimal x3 = x >>> c;
    io:println(x3); // @output 65533
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and user-defined
             subtype of integer as the RHS operand.
Labels: DecimalNumber, float, int:Unsigned16, shift-expr, type, unary-minus, var

type Ints -1|2|-128;

function errorFunction() {
    int:Unsigned16 x = 65532;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int:Unsigned16'
    var x2 = x >>> b;
    Ints _ = x2; // @error expected '-1|2|-128' but found 'int:Unsigned16'
    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'int:Unsigned16'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: int, int:Unsigned16, nil-literal, optional-type, shift-expr, unary-minus, value:toBalString()

function init() {
    int:Unsigned16 x = 65525;
    int? a = 2;
    int? b = -9223372036854775806;
    int? c = ();

    int:Unsigned16? x1 = x >>> a;
    io:println(x1); // @output 16381
    int:Unsigned16? x2 = x >>> b;
    io:println(x2); // @output 16381
    int? x3 = x >>> c;
    io:println(x3.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: float, int, int:Unsigned8, int:Unsigned16, nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned16 x = 12;
    int? a = 2;
    int? b = -9223372036854775794;
    int? c = ();

    var x1 = x >>> a;
    int:Unsigned8 _ = x1; // @error  expected 'int:Unsigned8' but found 'int:Unsigned16?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int:Unsigned16?'

    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'int:Unsigned16?'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and optional builtin
             subtype of integer as the RHS operand.
Labels: int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, optional-type,
        shift-expr, unary-minus, union-type, value:toBalString()

function init() {
    int:Unsigned16 x = 65531;
    int:Signed8? a = 3;
    int:Signed8? b = -123;
    int:Unsigned8? c = 3;
    int:Signed16? d = 2;
    int:Signed16? e = -32758;
    int:Unsigned16? f = 5;
    int:Signed32? g = 3;
    int:Signed32? h = -2147483641;
    int:Unsigned32? i = 1;
    int:Unsigned8? j = ();
    int:Unsigned8? k = ();
    int:Signed16? l = ();
    int:Unsigned16? m = ();
    int:Signed32? n = ();
    int:Unsigned32? o = ();

    int:Unsigned16|() x1 = x >>> a;
    io:println(x1); // @output 8191
    int:Unsigned16?|float x2 = x >>> b;
    io:println(x2); // @output 2047

    int:Unsigned16? x3 = x >>> c;
    io:println(x3); // @output 8191

    int:Unsigned16? x4 = x >>> d;
    io:println(x4); // @output 16382
    int:Unsigned16? x5 = x >>> e;
    io:println(x5); // @output 63

    int:Unsigned16? x6 = x >>> f;
    io:println(x6); // @output 2047

    int:Unsigned16? x7 = x >>> g;
    io:println(x7); // @output 8191
    int:Unsigned16? x8 = x >>> h;
    io:println(x8); // @output 511

    int:Unsigned16|() x9 = x >>> i;
    io:println(x9); // @output 32765

    int:Unsigned16|() x11 = x >>> j;
    io:println(x11.toBalString()); // @output ()
    int:Unsigned16|() x12 = x >>> k;
    io:println(x12.toBalString()); // @output ()
    int:Unsigned16|() x13 = x >>> l;
    io:println(x13.toBalString()); // @output ()
    int:Unsigned16|() x14 = x >>> m;
    io:println(x14.toBalString()); // @output ()
    int:Unsigned16|() x15 = x >>> n;
    io:println(x15.toBalString()); // @output ()
    int:Unsigned16|() x16 = x >>> o;
    io:println(x16.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and optional builtin
             subtypes of integer as the RHS operand.
Labels: decimal, float, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned16 a = 127;
    int:Signed8? b = 7;
    int:Signed8? c = -120;
    int:Unsigned8? d = 5;
    int:Signed16? e = 7;
    int:Signed16? f = -120;
    int:Unsigned16? g = 5;
    int:Signed32? h = 7;
    int:Signed32? i = -120;
    int:Unsigned32? j = 5;
    int:Signed8? k = ();
    int:Unsigned8? l = ();
    int:Signed16? m = ();
    int:Unsigned16? n = ();
    int:Signed32? p = ();
    int:Unsigned32? q = ();

    var x1 = a >>> b;
    int:Unsigned8 _ = x1; // @error expected 'int:Unsigned8' but found 'int:Unsigned16?'
    var x2 = a >>> c;
    float _ = x2; // @error expected 'float' but found 'int:Unsigned16?'

    var x3 = a >>> d;
    int:Unsigned8 _ = x3; // @error expected 'int:Unsigned8' but found 'int:Unsigned16?'

    var x4 = a >>> e;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int:Unsigned16?'
    var x5 = a >>> f;
    decimal _ = x5; // @error expected 'decimal' but found 'int:Unsigned16?'

    var x6 = a >>> g;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int:Unsigned16?'

    var x7 = a >>> h;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int:Unsigned16?'
    var x8 = a >>> i;
    float _ = x8; // @error expected 'float' but found 'int:Unsigned16?'

    var x9 = a >>> j;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int:Unsigned16?'

    var x11 = a >>> k;
    int:Unsigned16 _ = x11; // @error expected 'int:Unsigned16' but found 'int:Unsigned16?'
    var x12 = a >>> l;
    int:Signed16 _ = x12; // @error expected 'int:Signed16' but found 'int:Unsigned16?'
    var x13 = a >>> m;
    int:Signed16 _ = x13; // @error expected 'int:Signed16' but found 'int:Unsigned16?'
    var x14 = a >>> n;
    int:Signed16 _ = x14; // @error expected 'int:Signed16' but found 'int:Unsigned16?'
    var x15 = a >>> p;
    int:Signed16 _ = x15; // @error expected 'int:Signed16' but found 'int:Unsigned16?'
    var x16 = a >>> q;
    int:Signed16 _ = x16; // @error expected 'int:Signed16' but found 'int:Unsigned16?'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, int, int:Unsigned16, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    int:Unsigned16 x = 65530;
    byte? a = 2;
    byte? b = 5;
    byte? c = ();

    int:Unsigned16? x1 = x >>> a;
    io:println(x1); // @output 16382
    int:Unsigned16? x2 = x >>> b;
    io:println(x2); // @output 2047

    int? x3 = x >>> c;
    io:println(x3.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned16' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, float, int, int:Unsigned16, nil-literal, optional-type, shift-expr, var

function errorFunction() {
    int:Unsigned16 x = 12;
    byte? a = 2;
    byte? b = 234;
    byte? c = ();

    var x1 = x >>> a;
    int:Unsigned8 _ = x1; // @error  expected 'int:Unsigned8' but found 'int:Unsigned16?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int:Unsigned16?'

    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'int:Unsigned16?'
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned16' operands in function call and method call.
Labels: function-call-expr, int, int:Unsigned16, shift-expr, unary-minus, value:toBalString(), value:toString()

function init() {
    int:Unsigned16 a = 125;
    int:Unsigned16 b = 3;
    int:Unsigned16 c = 12;
    int:Unsigned16 d = 2;

    rightShiftExpr(a >>> b); // @output 15
    rightShiftExpr(a >>> d); // @output 31
    rightShiftExpr(c >>> d); // @output 3
    rightShiftExpr(c >>> b); // @output 1

    io:println((a >>> b).toString()); // @output 15
    io:println((a >>> d).toString()); // @output 31
    io:println((c >>> d).toString()); // @output 3
    io:println((c >>> b).toString()); // @output 1

    io:println((a >>> b).toBalString()); // @output 15
    io:println((a >>> d).toBalString()); // @output 31
    io:println((c >>> d).toBalString()); // @output 3
    io:println((c >>> b).toBalString()); // @output 1
}

function rightShiftExpr(int:Unsigned16 x) {
    io:println(x);
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned16' operands as a return statement.
Labels: int:Unsigned16, return-stmt, shift-expr, unary-minus

function init() {
    int:Unsigned16 a = 125;
    int:Unsigned16 b = 3;
    int:Unsigned16 c = 12;
    int:Unsigned16 d = 2;

    io:println(rightShiftExpr(a, b)); // @output 15
    io:println(rightShiftExpr(a, d)); // @output 31
    io:println(rightShiftExpr(c, d)); // @output 3
    io:println(rightShiftExpr(c, b)); // @output 1
}

function rightShiftExpr(int:Unsigned16 x, int:Unsigned16 y) returns int:Unsigned16 {
    return x >>> y;
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int:Signed32' DecimalNumbers as operands.
Labels: int:Signed32, shift-expr

function init() {
    int:Signed32 a = 2147483646;
    int:Signed32 b = 5;
    int:Signed32 c = 0;

    io:println(a >>> b); // @output 67108863
    io:println(a >>> c); // @output 2147483646
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int:Signed32' HexIntLiterals as operands.
Labels: HexIntLiterals, int:Signed32, shift-expr

function init() {
    int:Signed32 a = 0x75;
    int:Signed32 b = 0x3;
    int:Signed32 c = 0x0;

    io:println(a >>> b); // @output 14
    io:println(a >>> c); // @output 117
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and positive 'int:Signed32' IntLiterals as operands.
Labels: HexIntLiterals, int:Signed32, shift-expr

function init() {
    int:Signed32 a = 2147483643;
    int:Signed32 b = 2;
    int:Signed32 c = 0x7ffffff5;
    int:Signed32 d = 0x5;
    int:Signed32 e = 0;
    int:Signed32 f = 0x0;

    io:println(a >>> d); // @output 67108863
    io:println(c >>> b); // @output 536870909
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int:Signed32' DecimalNumbers as operands.
Labels: int:Signed32, shift-expr, unary-minus

function init() {
    int:Signed32 a = -2147483643;
    int:Signed32 b = -2147483646;
    int:Signed32 c = -0;

    io:println(a >>> b); // @output 4611686017890516993
    io:println(a >>> c); // @output -2147483643
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int:Signed32' HexIntLiterals as operands.
Labels: HexIntLiterals, int:Signed32, shift-expr, unary-minus

function init() {
    int:Signed32 a = -0x7ff5;
    int:Signed32 b = -0x7ffffffe;
    int:Signed32 c = -0x0;

    io:println(a >>> b); // @output 4611686018427379714
    io:println(a >>> c); // @output -32757
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative 'int:Signed32' IntLiterals as operands.
Labels: HexIntLiterals, int:Signed32, shift-expr, unary-minus

function init() {
    int:Signed32 a = -2147483640;
    int:Signed32 b = -2;
    int:Signed32 c = -0x7ffffff8;
    int:Signed32 d = -0x2;
    int:Signed32 e = -0;
    int:Signed32 f = -0x0;

    io:println(a >>> d); // @output 3
    io:println(c >>> b); // @output 3
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int:Signed32' DedcimalNumbers as operands.
Labels: int:Signed32, shift-expr, unary-minus

function init() {
    int:Signed32 a = -2147483646;
    int:Signed32 b = -2147483638;
    int:Signed32 c = 100;
    int:Signed32 d = 2;

    io:println(a >>> d); // @output 4611686017890516992
    io:println(c >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int:Signed32' HexIntLiterals as operands.
Labels: HexIntliteral, int:Signed32, shift-expr, unary-minus

function init() {
    int:Signed32 a = -0x1f;
    int:Signed32 b = -0x3;
    int:Signed32 c = 0x1f;
    int:Signed32 d = 0x1;

    io:println(a >>> d); // @output 9223372036854775792
    io:println(c >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative 'int:Signed32' IntLiterals as operands.
Labels: HexIntliteral, int:Signed32, shift-expr, unary-minus

function init() {
    int:Signed32 a = -111;
    int:Signed32 b = -2147483640;
    int:Signed32 c = 100;
    int:Signed32 d = 2;
    int:Signed32 e = -0x1f;
    int:Signed32 f = -0x4;
    int:Signed32 g = 0x1f;
    int:Signed32 h = 0x1;

    io:println(a >>> d); // @output 4611686018427387876
    io:println(c >>> b); // @output 0

    io:println(e >>> g); // @output 8589934591
    io:println(g >>> f); // @output 0

    io:println(a >>> h); // @output 9223372036854775752
    io:println(g >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed32' as the LHS operand and 'int' as the RHS operand.
Labels: int, int:Signed32, shift-expr, unary-minus

function init() {
    int:Signed32 x = 2147483641;
    int:Signed32 y = -2147483643;
    int a = 3;
    int b = -9223372036854775804;

    io:println(x >>> a); // @output 268435455
    io:println(x >>> b); // @output 134217727

    io:println(y >>> a); // @output 2305843008945258496
    io:println(y >>> b); // @output 1152921504472629248
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed32' as the LHS operand and builtin subtypes of integer as the RHS
             operand.
Labels: int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr, unary-minus

function init() {
    int:Signed32 x = 2147483641;
    int:Signed32 y = -2147483639;
    int:Signed8 a = 2;
    int:Signed8 b = -21;
    int:Unsigned8 c = 5;
    int:Signed16 d = 2;
    int:Signed16 e = -32765;
    int:Unsigned16 f = 3;
    int:Signed32 g = 3;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 1;

    io:println(x >>> a); // @output 536870910
    io:println(x >>> b); // @output 0
    io:println(y >>> a); // @output 4611686017890516994
    io:println(y >>> b); // @output 2097151

    io:println(x >>> c); // @output 67108863
    io:println(y >>> c); // @output 576460752236314624

    io:println(x >>> d); // @output 536870910
    io:println(x >>> e); // @output 268435455
    io:println(y >>> d); // @output 4611686017890516994
    io:println(y >>> e); // @output 2305843008945258497

    io:println(x >>> f); // @output 268435455
    io:println(y >>> f); // @output 2305843008945258497

    io:println(x >>> g); // @output 268435455
    io:println(x >>> h); // @output 16777215
    io:println(y >>> g); // @output 2305843008945258497
    io:println(y >>> h); // @output 144115188059078656

    io:println(x >>> i); // @output 1073741820
    io:println(y >>> i); // @output 9223372035781033988
}

Test-Case: output
Description: Test '>>>' expression for optional zero and positive 'int:Signed32' operands.
Labels: int, int:Signed32, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    int:Signed32? a = 2147483644;
    int:Signed32? b = 2;
    int:Signed32? c = 0;
    int:Signed32? d = ();
    int:Signed32 e = 5;
    int:Signed32 f = 1;

    int? x1 = a >>> b;
    io:println(x1); // @output 536870911
    int? x2 = f >>> b;
    io:println(x2); // @output 0
    int? x3 = a >>> f;
    io:println(x3); // @output 1073741822
    int? x4 = e >>> b;
    io:println(x4); // @output 1

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()
    int? x7 = d >>> b;
    io:println(x7.toBalString()); // @output ()

    io:println(a >>> b); // @output 536870911
    io:println(a >>> c); // @output 2147483644

    io:println(a >>> f); // @output 1073741822
    io:println(e >>> b); // @output 1

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
    io:println((d >>> d).toBalString()); // @output ()
}

Test-Case: output
Description: Test '>>>' expression for optional zero and negative 'int:Signed32' operands.
Labels: int, int:Signed32, nil-literal, optional-type, shift-expr, unary-minus, value:toBalString()

function init() {
    int:Signed32? a = -2147483644;
    int:Signed32? b = -2147483647;
    int:Signed32? c = 0;
    int:Signed32? d = ();
    int:Signed32 e = -2;
    int:Signed32 f = -2147483643;

    int? x1 = a >>> b;
    io:println(x1); // @output 9223372035781033986
    int? x2 = f >>> b;
    io:println(x2); // @output 9223372035781033986
    int? x3 = a >>> f;
    io:println(x3); // @output 576460752236314624
    int? x4 = e >>> b;
    io:println(x4); // @output 9223372036854775807

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()

    io:println(a >>> b); // @output 9223372035781033986
    io:println(a >>> c); // @output -2147483644

    io:println(a >>> f); // @output 576460752236314624
    io:println(e >>> b); // @output 9223372036854775807

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
}

Test-Case: output
Description: Test '>>>' expression for optional positive and negative 'int:Signed32'.
Labels: int:Signed32, optional-type, shift-expr, unary-minus

function init() {
    int:Signed32? a = 2147483637;
    int:Signed32? b = 5;
    int:Signed32? c = -2;
    int:Signed32? d = -2147483643;
    int:Signed32 e = 100;
    int:Signed32 f = 7;
    int:Signed32 g = -23;
    int:Signed32 h = -2147483641;

    io:println(a >>> d); // @output 67108863
    io:println(c >>> b); // @output 576460752303423487

    io:println(a >>> h); // @output 16777215
    io:println(c >>> f); // @output 144115188075855871

    io:println(e >>> d); // @output 3
    io:println(g >>> b); // @output 576460752303423487
}

Test-Case: output
Description: Test 0x3F mask of 'int:Signed32' RHS operand in '>>>' expression.
Labels: int:Signed32, shift-expr, unary-minus

function init() {
    int:Signed32 a = -1;
    int:Signed32 b = 63;
    int:Signed32 c = 64;
    int:Signed32 d = 2147483637;
    int:Signed32 e = -65;
    int:Signed32 f = -64;

    io:println(a >>> b); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed32): 11111111 11111111 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(a >>> c); // @output -1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed32): 11111111 11111111 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    //        = In decimal: (-1)

    io:println(a >>> d); // @output 2047
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed32): 11111111 11111111 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 01111111 11111111 11111111 11110101, In decimal: 2147483637
    //                After applying mask, In binary: 110101, In decimal: 53
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000111 11111111
    //        = In decimal: (2047)

    io:println(b >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed32): 00000000 00000000 00000000 00111111
    //                     = Equivalent binary representation (basic type): 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    //        = In decimal: (63)

    io:println(b >>> c); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed32): 00000000 00000000 00000000 00111111
    //                     = Equivalent binary representation (basic type): 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    //        = In decimal: (63)

    io:println(a >>> e); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed32): 11111111 11111111 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111  11111111 10111111, In decimal: -65
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(a >>> f); // @output -1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed32): 11111111 11111111 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111 11111111 11000000, In decimal: -64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    //        = In decimal: (-1)

    io:println(a >>> a); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed32): 11111111 11111111 11111111 11111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111 11111111 11111111, In decimal: -1
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(e >>> c); // @output -65
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Signed32): 11111111 11111111 11111111 10111111
    //                     = Equivalent binary representation (basic type): 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111
    //        = In decimal: (-65)
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed32' as the LHS operand and 'int' as the RHS
             operand.
Labels: decimal, float, int, int:Signed32, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed32 x = 32757;
    int:Signed32 y = -2147483644;
    int a = 7;
    int b = -12;

    var x1 = x >>> a;
    int:Signed32 _ = x1; // @error expected 'int:Signed32' but found 'int'
    var x2 = x >>> b;
    float _ = x2; // @error expected 'float' but found 'int'
    var x3 = y >>> a;
    decimal _ = x3; // @error expected 'decimal' but found 'int'
    var x4 = y >>> b;
    float _ = x4; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed32' as the LHS operand and builtin subtypes of
             integer as the RHS operand.
Labels: decimal, float, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, unary-minus, var

function errorFunction() {
    int:Signed32 x = 2147483642;
    int:Signed8 a = 7;
    int:Signed8 b = -32;
    int:Unsigned8 c = 5;
    int:Signed16 d = 8;
    int:Signed16 e = -32750;
    int:Unsigned16 f = 3;
    int:Signed32 g = 9;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int'
    var x2 = x >>> b;
    decimal _ = x2; // @error expected 'decimal' but found 'int'

    var x3 = x >>> c;
    int:Unsigned16 _ = x3; // @error expected 'int:Unsigned16' but found 'int'

    var x4 = x >>> d;
    int:Signed32 _ = x4; // @error expected 'int:Signed32' but found 'int'
    var x5 = x >>> e;
    float _ = x5; // @error expected 'float' but found 'int'

    var x6 = x >>> f;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int'

    var x7 = x >>> g;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int'
    var x8 = x >>> h;
    decimal _ = x8; // @error expected 'decimal' but found 'int'

    var x9 = x >>> i;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed32' as the LHS operand and byte as the RHS
             operand.
Labels: byte, int:Signed32, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed32 x = 12;
    int:Signed32 y = -7;
    byte a = 20;

    var x1 = x >>> a;
    int:Signed32 _ = x1; // @error expected 'int:Signed32' but found 'int'
    var x2 = y >>> a;
    byte _ = x2; // @error expected 'byte' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed32' as the LHS operand and user-defined subtype
             of integer as the RHS operand.
Labels: DecimalNumber, float, int:Signed8, int:Signed32, shift-expr, type, unary-minus, var

type Ints -1|2|-128;

function errorFunction() {
    int:Signed32 x = 80;
    int:Signed32 y = -100;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int'
    var x2 = y >>> a;
    int:Signed32 _ = x2; // @error expected 'int:Signed32' but found 'int'
    var x3 = x >>> b;
    Ints _ = x3; // @error expected '-1|2|-128' but found 'int'
    var x4 = y >>> b;
    Ints _ = x4; // @error expected '-1|2|-128' but found 'int'
    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int'
    var x6 = y >>> c;
    float _ = x6; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed32' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: float, int, int:Signed8, int:Signed32, nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed32 x = 12;
    int:Signed32 y = -12;
    int? a = 2;
    int? b = -9223372036854775794;
    int? c = ();

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error  expected 'int:Signed8' but found 'int?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int?'
    var x3 = y >>> a;
    int:Signed32 _ = x3; // @error  expected 'int:Signed32' but found 'int?'
    var x4 = y >>> b;
    int _ = x4; // @error expected 'int' but found 'int?'

    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int?'
    var x6 = y >>> c;
    float _ = x6; // @error expected 'float' but found 'int?'
}

Test-Case: error
Description: Test resultant type of the '<<' expression with 'int:Signed32' as the LHS operand and optional builtin
             subtypes of integer as the RHS operand.
Labels: decimal, float, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, unary-minus, var

function errorFunction() {
    int:Signed32 a = 2147483644;
    int:Signed8? b = 7;
    int:Signed8? c = -127;
    int:Unsigned8? d = 5;
    int:Signed16? e = 7;
    int:Signed16? f = -120;
    int:Unsigned16? g = 5;
    int:Signed32? h = 7;
    int:Signed32? i = -120;
    int:Unsigned32? j = 5;
    int:Signed8? k = ();
    int:Unsigned8? l = ();
    int:Signed16? m = ();
    int:Unsigned16? n = ();
    int:Signed32? p = ();
    int:Unsigned32? q = ();

    var x1 = a >>> b;
    int:Signed32 _ = x1; // @error expected 'int:Signed32' but found 'int?'
    var x2 = a >>> c;
    float _ = x2; // @error expected 'float' but found 'int?'

    var x3 = a >>> d;
    int:Unsigned16 _ = x3; // @error expected 'int:Unsigned16' but found 'int?'

    var x4 = a >>> e;
    int:Signed32 _ = x4; // @error expected 'int:Signed32' but found 'int?'
    var x5 = a >>> f;
    decimal _ = x5; // @error expected 'decimal' but found 'int?'

    var x6 = a >>> g;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int?'

    var x7 = a >>> h;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int?'
    var x8 = a >>> i;
    float _ = x8; // @error expected 'float' but found 'int?'

    var x9 = a >>> j;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int?'

    var x11 = a >>> k;
    int:Signed32 _ = x11; // @error expected 'int:Signed32' but found 'int?'
    var x12 = a >>> l;
    int:Signed32 _ = x12; // @error expected 'int:Signed32' but found 'int?'
    var x13 = a >>> m;
    int:Signed32 _ = x13; // @error expected 'int:Signed32' but found 'int?'
    var x14 = a >>> n;
    int:Signed8 _ = x14; // @error expected 'int:Signed8' but found 'int?'
    var x15 = a >>> p;
    int:Signed8 _ = x15; // @error expected 'int:Signed8' but found 'int?'
    var x16 = a >>> q;
    int:Signed8 _ = x16; // @error expected 'int:Signed8' but found 'int?'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Signed32' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, float, int, int:Signed32, nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Signed32 x = 12;
    int:Signed32 y = -22;
    byte? a = 2;
    byte? b = 255;
    byte? c = ();

    var x1 = x >>> a;
    int:Signed32 _ = x1; // @error  expected 'int:Signed32' but found 'int?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int?'
    var x3 = y >>> a;
    int:Signed32 _ = x3; // @error  expected 'int:Signed32' but found 'int?'
    var x4 = y >>> b;
    int _ = x4; // @error expected 'int' but found 'int?'

    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int?'
    var x6 = y >>> c;
    byte _ = x6; // @error expected 'byte' but found 'int?'
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed32' operands in function call and method call.
Labels: function-call-expr, int:Signed32, shift-expr, unary-minus, value:toBalString(), value:toString()

function init() {
    int:Signed32 a = -2147483639;
    int:Signed32 b = -32757;
    int:Signed32 c = 12;
    int:Signed32 d = 2;

    rightShiftExpr(a >>> b); // @output 9007199253692416
    rightShiftExpr(a >>> d); // @output 4611686017890516994
    rightShiftExpr(c >>> d); // @output 3
    rightShiftExpr(c >>> b); // @output 0

    io:println((a >>> b).toString()); // @output 9007199253692416
    io:println((a >>> d).toString()); // @output 4611686017890516994
    io:println((c >>> d).toString()); // @output 3
    io:println((c >>> b).toString()); // @output 0

    io:println((a >>> b).toBalString()); // @output 9007199253692416
    io:println((a >>> d).toBalString()); // @output 4611686017890516994
    io:println((c >>> d).toBalString()); // @output 3
    io:println((c >>> b).toBalString()); // @output 0
}

function rightShiftExpr(int x) {
    io:println(x);
}

Test-Case: output
Description: Test '>>>' expression with 'int:Signed32' operands as a return statement.
Labels: int, int:Signed32, return-stmt, shift-expr, unary-minus

function init() {
    int:Signed32 a = -2147483642;
    int:Signed32 b = -2147483641;
    int:Signed32 c = 12;
    int:Signed32 d = 2;

    io:println(rightShiftExpr(a, b)); // @output 144115188059078656
    io:println(rightShiftExpr(a, d)); // @output 4611686017890516993
    io:println(rightShiftExpr(c, d)); // @output 3
    io:println(rightShiftExpr(c, b)); // @output 0
}

function rightShiftExpr(int:Signed32 x, int:Signed32 y) returns int {
    return x >>> y;
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned32' DecimalNumbers as operands.
Labels: int:Unsigned32, shift-expr

function init() {
    int:Unsigned32 a = 4294967286;
    int:Unsigned32 b = 3;
    int:Unsigned32 c = 0;

    io:println(a >>> b); // @output 536870910
    io:println(a >>> c); // @output 4294967286
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned32' HexIntLiterals as operands.
Labels: HexIntLiterals, int:Unsigned32, shift-expr

function init() {
    int:Unsigned32 a = 0xf5;
    int:Unsigned32 b = 0x3;
    int:Unsigned32 c = 0x0;

    io:println(a >>> b); // @output 30
    io:println(a >>> c); // @output 245
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned32' IntLiterals as operands.
Labels: HexIntLiterals, int:Unsigned32, shift-expr

function init() {
    int:Unsigned32 a = 4294967293;
    int:Unsigned32 b = 4;
    int:Unsigned32 c = 0xf5;
    int:Unsigned32 d = 0x1;
    int:Unsigned32 e = 0;
    int:Unsigned32 f = 0x0;

    io:println(a >>> d); // @output 2147483646
    io:println(c >>> b); // @output 15
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned32' as the LHS operand and 'int' as the RHS operand.
Labels: int:Unsigned32, int, shift-expr, unary-minus

function init() {
    int:Unsigned32 x = 4294967291;
    int a = 3;
    int b = -9223372036854775800;

    io:println(x >>> a); // @output 536870911

    io:println(x >>> b); // @output 16777215
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned32' as the LHS operand and builtin subtypes of integer as the RHS
             operand.
Labels: int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr, unary-minus

function init() {
    int:Unsigned32 x = 4294967288;
    int:Signed8 a = 2;
    int:Signed8 b = -128;
    int:Unsigned8 c = 5;
    int:Signed16 d = 32750;
    int:Signed16 e = -32752;
    int:Unsigned16 f = 3;
    int:Signed32 g = 1;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    io:println(x >>> a); // @output 1073741822
    io:println(x >>> b); // @output 4294967288

    io:println(x >>> c); // @output 134217727

    io:println(x >>> d); // @output 0
    io:println(x >>> e); // @output 65535

    io:println(x >>> f); // @output 536870911

    io:println(x >>> g); // @output 2147483644
    io:println(x >>> h); // @output 33554431

    io:println(x >>> i); // @output 32767
}

Test-Case: output
Description: Test '>>>' expression for optional 'int:Unsigned32' operands.
Labels: int:Unsigned32, int, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    int:Unsigned32? a = 4294967290;
    int:Unsigned32? b = 5;
    int:Unsigned32? c = 0;
    int:Unsigned32? d = ();
    int:Unsigned32 e = 50;
    int:Unsigned32 f = 7;

    int? x1 = a >>> b;
    io:println(x1); // @output 134217727
    int? x2 = f >>> b;
    io:println(x2); // @output 0
    int? x3 = a >>> f;
    io:println(x3); // @output 33554431
    int? x4 = e >>> b;
    io:println(x4); // @output 1

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()
    int? x7 = d >>> b;
    io:println(x7.toBalString()); // @output ()

    io:println(a >>> b); // @output 134217727
    io:println(a >>> c); // @output 4294967290

    io:println(a >>> f); // @output 33554431
    io:println(e >>> b); // @output 1

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
    io:println((d >>> d).toBalString()); // @output ()
}

Test-Case: output
Description: Test 0x3F mask of 'int:Unsigned32' RHS operand in '>>>' expression.
Labels: int:Unsigned32, shift-expr

function init() {
    int:Unsigned32 a = 4294967295;
    int:Unsigned32 b = 63;
    int:Unsigned32 c = 64;
    int:Unsigned32 d = 122;

    io:println(a >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned32): 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000
    //        = In decimal: (0)

    io:println(a >>> c); // @output 4294967295
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned32): 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111
    //        = In decimal: (4294967295)

    io:println(a >>> d); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned32): 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 01111010, In decimal: 122
    //                After applying mask, In binary: 111010, In decimal: 58
    // Result = In binary: 00000000 00000000 00000000 00000000
    //        = In decimal: (0)

    io:println(b >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned32): 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000
    //        = In decimal: (0)

    io:println(b >>> c); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned32): 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 00000000 00000000 00000000 00111111
    //        = In decimal: (63)

    io:println(a >>> a); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (int:Unsigned32): 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111 11111111 11111111, In decimal: 4294967295
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000
    //        = In decimal: (0)
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and 'int' as the RHS
             operand.
Labels: int:Unsigned32, int, shift-expr, unary-minus

function init() {
    int:Unsigned32 x = 4294967293;
    int a = 3;
    int b = -9223372036854775805;

    int:Unsigned32 x1 = x >>> a;
    io:println(x1); // @output 536870911
    int:Unsigned32 x2 = x >>> b;
    io:println(x2); // @output 536870911
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and 'int' as the RHS
             operand.
Labels: decimal, float, int:Unsigned32, int, shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned32 x = 4294967287;
    int a = 2;
    int b = -124;

    var x1 = x >>> a;
    decimal _ = x1; // @error expected 'decimal' but found 'int:Unsigned32'
    var x2 = x >>> a;
    float _ = x2; // @error expected 'float' but found 'int:Unsigned32'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and builtin subtypes
             of integer as the RHS operand.
Labels: int:Signed8, int:Signed16, int:Unsigned32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr,
        unary-minus

function init() {
    int:Unsigned32 x = 245;
    int:Signed8 a = 2;
    int:Signed8 b = -120;
    int:Unsigned8 c = 1;
    int:Signed16 d = 8;
    int:Signed16 e = -32755;
    int:Unsigned16 f = 3;
    int:Signed32 g = 6;
    int:Signed32 h = -2147483647;
    int:Unsigned32 i = 5;

    int:Unsigned32 x1 = x >>> a;
    io:println(x1); // @output 61
    int:Unsigned32 x2 = x >>> b;
    io:println(x2); // @output 0

    int:Unsigned32 x3 = x >>> c;
    io:println(x3); // @output 122

    int:Unsigned32 x4 = x >>> d;
    io:println(x4); // @output 0
    int:Unsigned32 x5 = x >>> e;
    io:println(x5); // @output 0

    int:Unsigned32 x6 = x >>> f;
    io:println(x6); // @output 30

    int:Unsigned32 x7 = x >>> g;
    io:println(x7); // @output 3
    int:Unsigned32 x8 = x >>> h;
    io:println(x8); // @output 122

    int:Unsigned32 x9 = x >>> i;
    io:println(x9); // @output 7
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and builtin subtypes
             of integer as the RHS operand.
Labels: decimal, float, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned32 x = 4294967285;
    int:Signed8 a = 1;
    int:Signed8 b = -124;
    int:Unsigned8 c = 5;
    int:Signed16 d = 8;
    int:Signed16 e = -32765;
    int:Unsigned16 f = 3;
    int:Signed32 g = 9;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    var x1 = x >>> a;
    int:Signed16 _ = x1; // @error expected 'int:Signed16' but found 'int:Unsigned32'
    var x2 = x >>> b;
    decimal _ = x2; // @error expected 'decimal' but found 'int:Unsigned32'

    var x3 = x >>> c;
    int:Signed8 _ = x3; // @error expected 'int:Signed8' but found 'int:Unsigned32'

    var x4 = x >>> d;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int:Unsigned32'
    var x5 = x >>> e;
    float _ = x5; // @error expected 'float' but found 'int:Unsigned32'

    var x6 = x >>> f;
    int:Signed16 _ = x6; // @error expected 'int:Signed16' but found 'int:Unsigned32'

    var x7 = x >>> g;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int:Unsigned32'
    var x8 = x >>> h;
    decimal _ = x8; // @error expected 'decimal' but found 'int:Unsigned32'

    var x9 = x >>> i;
    int:Signed32 _ = x9; // @error expected 'int:Signed32' but found 'int:Unsigned32'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and byte as the RHS
             operand.
Labels: byte, int:Unsigned32, shift-expr, var

function init() {
    int:Unsigned32 x = 4294967287;
    byte a = 2;

    var x1 = x >>> a;
    int:Unsigned32 y1 = x1;
    io:println(y1); // @output 1073741821
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and byte as the RHS
             operand.
Labels: byte, int:Signed8, int:Unsigned32, shift-expr, var

function errorFunction() {
    int:Unsigned32 x = 4294967294;
    byte a = 2;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int:Unsigned32'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and user-defined
             subtypes of integer as the RHS operand.
Labels: DecimalNumber, int:Unsigned32, shift-expr, type, unary-minus, union-type

type Ints -1|2|-128;

function init() {
    int:Unsigned32 x = 4294967287;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    int:Unsigned32 x1 = x >>> a;
    io:println(x1); // @output 1073741821
    int:Unsigned32|float x2 = x >>> b;
    io:println(x2); // @output 0
    int:Unsigned32|decimal x3 = x >>> c;
    io:println(x3); // @output 4294967287
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and user-defined
             subtype of integer as the RHS operand.
Labels: DecimalNumber, float, int:Unsigned32, shift-expr, type, unary-minus, var

type Ints -1|2|-128;

function errorFunction() {
    int:Unsigned32 x = 4294967294;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'int:Unsigned32'
    var x2 = x >>> b;
    Ints _ = x2; // @error expected '-1|2|-128' but found 'int:Unsigned32'
    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'int:Unsigned32'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: int, int:Unsigned32, nil-literal, optional-type, shift-expr, unary-minus, value:toBalString()

function init() {
    int:Unsigned32 x = 4294967289;
    int? a = 2;
    int? b = -9223372036854775806;
    int? c = ();

    int:Unsigned32? x1 = x >>> a;
    io:println(x1); // @output 1073741822
    int:Unsigned32? x2 = x >>> b;
    io:println(x2); // @output 1073741822
    int? x3 = x >>> c;
    io:println(x3.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: float, int, int:Unsigned8, int:Unsigned32, nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned32 x = 12;
    int? a = 2;
    int? b = -9223372036854775794;
    int? c = ();

    var x1 = x >>> a;
    int:Unsigned8 _ = x1; // @error  expected 'int:Unsigned8' but found 'int:Unsigned32?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int:Unsigned32?'

    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'int:Unsigned32?'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and optional builtin
             subtype of integer as the RHS operand.
Labels: int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, optional-type,
        shift-expr, unary-minus, union-type, value:toBalString()

function init() {
    int:Unsigned32 x = 4294967285;
    int:Signed8? a = 3;
    int:Signed8? b = -123;
    int:Unsigned8? c = 3;
    int:Signed16? d = 2;
    int:Signed16? e = -32758;
    int:Unsigned16? f = 5;
    int:Signed32? g = 3;
    int:Signed32? h = -2147483641;
    int:Unsigned32? i = 1;
    int:Unsigned8? j = ();
    int:Unsigned8? k = ();
    int:Signed16? l = ();
    int:Unsigned16? m = ();
    int:Signed32? n = ();
    int:Unsigned32? o = ();

    int:Unsigned32|() x1 = x >>> a;
    io:println(x1); // @output 536870910
    int:Unsigned32?|float x2 = x >>> b;
    io:println(x2); // @output 134217727

    int:Unsigned32? x3 = x >>> c;
    io:println(x3); // @output 536870910

    int:Unsigned32? x4 = x >>> d;
    io:println(x4); // @output 1073741821
    int:Unsigned32? x5 = x >>> e;
    io:println(x5); // @output 4194303

    int:Unsigned32? x6 = x >>> f;
    io:println(x6); // @output 134217727

    int:Unsigned32? x7 = x >>> g;
    io:println(x7); // @output 536870910
    int:Unsigned32? x8 = x >>> h;
    io:println(x8); // @output 33554431

    int:Unsigned32|() x9 = x >>> i;
    io:println(x9); // @output 2147483642

    int:Unsigned32|() x11 = x >>> j;
    io:println(x11.toBalString()); // @output ()
    int:Unsigned32|() x12 = x >>> k;
    io:println(x12.toBalString()); // @output ()
    int:Unsigned32|() x13 = x >>> l;
    io:println(x13.toBalString()); // @output ()
    int:Unsigned32|() x14 = x >>> m;
    io:println(x14.toBalString()); // @output ()
    int:Unsigned32|() x15 = x >>> n;
    io:println(x15.toBalString()); // @output ()
    int:Unsigned32|() x16 = x >>> o;
    io:println(x16.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and optional builtin
             subtypes of integer as the RHS operand.
Labels: decimal, float, int, int:Signed8, int:Signed16, int:Unsigned32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        optional-type, shift-expr, unary-minus, var

function errorFunction() {
    int:Unsigned32 a = 127;
    int:Signed8? b = 7;
    int:Signed8? c = -120;
    int:Unsigned8? d = 5;
    int:Signed16? e = 7;
    int:Signed16? f = -120;
    int:Unsigned16? g = 5;
    int:Signed32? h = 7;
    int:Signed32? i = -120;
    int:Unsigned32? j = 5;
    int:Signed8? k = ();
    int:Unsigned8? l = ();
    int:Signed16? m = ();
    int:Unsigned16? n = ();
    int:Signed32? p = ();
    int:Unsigned32? q = ();

    var x1 = a >>> b;
    int:Unsigned8 _ = x1; // @error expected 'int:Unsigned8' but found 'int:Unsigned32?'
    var x2 = a >>> c;
    float _ = x2; // @error expected 'float' but found 'int:Unsigned32?'

    var x3 = a >>> d;
    int:Unsigned8 _ = x3; // @error expected 'int:Unsigned8' but found 'int:Unsigned32?'

    var x4 = a >>> e;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int:Unsigned32?'
    var x5 = a >>> f;
    decimal _ = x5; // @error expected 'decimal' but found 'int:Unsigned32?'

    var x6 = a >>> g;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int:Unsigned32?'

    var x7 = a >>> h;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int:Unsigned32?'
    var x8 = a >>> i;
    float _ = x8; // @error expected 'float' but found 'int:Unsigned32?'

    var x9 = a >>> j;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int:Unsigned32?'

    var x11 = a >>> k;
    int:Unsigned16 _ = x11; // @error expected 'int:Unsigned16' but found 'int:Unsigned32?'
    var x12 = a >>> l;
    int:Signed16 _ = x12; // @error expected 'int:Signed16' but found 'int:Unsigned32?'
    var x13 = a >>> m;
    int:Signed16 _ = x13; // @error expected 'int:Signed16' but found 'int:Unsigned32?'
    var x14 = a >>> n;
    int:Signed16 _ = x14; // @error expected 'int:Signed16' but found 'int:Unsigned32?'
    var x15 = a >>> p;
    int:Signed16 _ = x15; // @error expected 'int:Signed16' but found 'int:Unsigned32?'
    var x16 = a >>> q;
    int:Signed16 _ = x16; // @error expected 'int:Signed16' but found 'int:Unsigned32?'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, int, int:Unsigned32, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    int:Unsigned32 x = 4294967285;
    byte? a = 2;
    byte? b = 10;
    byte? c = ();

    int:Unsigned32? x1 = x >>> a;
    io:println(x1); // @output 1073741821
    int:Unsigned32? x2 = x >>> b;
    io:println(x2); // @output 4194303

    int? x3 = x >>> c;
    io:println(x3.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'int:Unsigned32' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, float, int, int:Unsigned32, nil-literal, optional-type, shift-expr, var

function errorFunction() {
    int:Unsigned32 x = 12;
    byte? a = 2;
    byte? b = 167;
    byte? c = ();

    var x1 = x >>> a;
    int:Unsigned8 _ = x1; // @error  expected 'int:Unsigned8' but found 'int:Unsigned32?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int:Unsigned32?'

    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'int:Unsigned32?'
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned32' operands in function call and method call.
Labels: function-call-expr, int, int:Unsigned32, shift-expr, unary-minus, value:toBalString(), value:toString()

function init() {
    int:Unsigned32 a = 125;
    int:Unsigned32 b = 3;
    int:Unsigned32 c = 12;
    int:Unsigned32 d = 2;

    rightShiftExpr(a >>> b); // @output 15
    rightShiftExpr(a >>> d); // @output 31
    rightShiftExpr(c >>> d); // @output 3
    rightShiftExpr(c >>> b); // @output 1

    io:println((a >>> b).toString()); // @output 15
    io:println((a >>> d).toString()); // @output 31
    io:println((c >>> d).toString()); // @output 3
    io:println((c >>> b).toString()); // @output 1

    io:println((a >>> b).toBalString()); // @output 15
    io:println((a >>> d).toBalString()); // @output 31
    io:println((c >>> d).toBalString()); // @output 3
    io:println((c >>> b).toBalString()); // @output 1
}

function rightShiftExpr(int:Unsigned32 x) {
    io:println(x);
}

Test-Case: output
Description: Test '>>>' expression with 'int:Unsigned32' operands as a return statement.
Labels: int:Unsigned32, return-stmt, shift-expr, unary-minus

function init() {
    int:Unsigned32 a = 125;
    int:Unsigned32 b = 3;
    int:Unsigned32 c = 12;
    int:Unsigned32 d = 2;

    io:println(rightShiftExpr(a, b)); // @output 15
    io:println(rightShiftExpr(a, d)); // @output 31
    io:println(rightShiftExpr(c, d)); // @output 3
    io:println(rightShiftExpr(c, b)); // @output 1
}

function rightShiftExpr(int:Unsigned32 x, int:Unsigned32 y) returns int:Unsigned32 {
    return x >>> y;
}

Test-Case: output
Description: Test '>>>' expression with 'byte' DecimalNumbers as operands.
Labels: byte, shift-expr

function init() {
    byte a = 247;
    byte b = 3;
    byte c = 0;

    io:println(a >>> b); // @output 30
    io:println(a >>> c); // @output 247
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'byte' HexIntLiterals as operands.
Labels: byte, HexIntLiterals, shift-expr

function init() {
    byte a = 0xf5;
    byte b = 0x3;
    byte c = 0x0;

    io:println(a >>> b); // @output 30
    io:println(a >>> c); // @output 245
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'byte' IntLiterals as operands.
Labels: byte, HexIntLiterals, shift-expr

function init() {
    byte a = 253;
    byte b = 4;
    byte c = 0xf5;
    byte d = 0x1;
    byte e = 0;
    byte f = 0x0;

    io:println(a >>> d); // @output 126
    io:println(c >>> b); // @output 15
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'byte' as the LHS operand and 'int' as the RHS operand.
Labels: byte, int, shift-expr, unary-minus

function init() {
    byte x = 250;
    int a = 3;
    int b = -9223372036854775800;

    io:println(x >>> a); // @output 31

    io:println(x >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with 'byte' as the LHS operand and builtin subtypes of integer as the RHS
             operand.
Labels: byte, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr, unary-minus

function init() {
    byte x = 246;
    int:Signed8 a = 2;
    int:Signed8 b = -128;
    int:Unsigned8 c = 5;
    int:Signed16 d = 32750;
    int:Signed16 e = -32752;
    int:Unsigned16 f = 3;
    int:Signed32 g = 1;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    io:println(x >>> a); // @output 61
    io:println(x >>> b); // @output 246

    io:println(x >>> c); // @output 7

    io:println(x >>> d); // @output 0
    io:println(x >>> e); // @output 0

    io:println(x >>> f); // @output 30

    io:println(x >>> g); // @output 123
    io:println(x >>> h); // @output 1

    io:println(x >>> i); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for optional 'byte' operands.
Labels: byte, int, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    byte? a = 246;
    byte? b = 5;
    byte? c = 0;
    byte? d = ();
    byte e = 50;
    byte f = 7;

    int? x1 = a >>> b;
    io:println(x1); // @output 7
    int? x2 = f >>> b;
    io:println(x2); // @output 0
    int? x3 = a >>> f;
    io:println(x3); // @output 1
    int? x4 = e >>> b;
    io:println(x4); // @output 1

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()
    int? x7 = d >>> b;
    io:println(x7.toBalString()); // @output ()

    io:println(a >>> b); // @output 7
    io:println(a >>> c); // @output 246

    io:println(a >>> f); // @output 1
    io:println(e >>> b); // @output 1

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
    io:println((d >>> d).toBalString()); // @output ()
}

Test-Case: output
Description: Test 0x3F mask of 'byte' RHS operand in '>>>' expression.
Labels: byte, shift-expr

function init() {
    byte a = 255;
    byte b = 63;
    byte c = 64;
    byte d = 122;

    io:println(a >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (byte): 11111111
    // Shift amount = Before applying mask, In binary: 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000
    //        = In decimal: (0)

    io:println(a >>> c); // @output 255
    // Explanation:
    // Value to be shifted = Equivalent binary representation (byte): 11111111
    // Shift amount = Before applying mask, In binary: 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111
    //        = In decimal: (255)

    io:println(a >>> d); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (byte): 11111111
    // Shift amount = Before applying mask, In binary: 01111010, In decimal: 122
    //                After applying mask, In binary: 111010, In decimal: 58
    // Result = In binary: 00000000
    //        = In decimal: (0)

    io:println(b >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (byte): 00111111
    // Shift amount = Before applying mask, In binary: 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000
    //        = In decimal: (0)

    io:println(b >>> c); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation (byte): 00111111
    // Shift amount = Before applying mask, In binary: 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 00111111
    //        = In decimal: (63)

    io:println(a >>> a); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation (byte): 11111111
    // Shift amount = Before applying mask, In binary: 11111111, In decimal: 255
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000
    //        = In decimal: (0)
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and 'int' as the RHS
             operand.
Labels: byte, int, shift-expr, unary-minus

function init() {
    byte x = 250;
    int a = 3;
    int b = -9223372036854775805;

    byte x1 = x >>> a;
    io:println(x1); // @output 31
    byte x2 = x >>> a;
    io:println(x2); // @output 31
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and 'int' as the RHS
             operand.
Labels: byte, float, int, shift-expr, unary-minus, var

function errorFunction() {
    byte x = 251;
    int a = 2;
    int b = -124;

    var x1 = x >>> a;
    float _ = x1; // @error expected 'float' but found 'byte'
    var x2 = x >>> a;
    float _ = x2; // @error expected 'float' but found 'byte'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and builtin subtype of
             integer as the RHS operand.
Labels: byte, int:Signed8, int:Signed16, int:Unsigned32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr,
        unary-minus

function init() {
    byte x = 250;
    int:Signed8 a = 2;
    int:Signed8 b = -120;
    int:Unsigned8 c = 1;
    int:Signed16 d = 8;
    int:Signed16 e = -32755;
    int:Unsigned16 f = 3;
    int:Signed32 g = 6;
    int:Signed32 h = -2147483647;
    int:Unsigned32 i = 5;

    byte x1 = x >>> a;
    io:println(x1); // @output 62
    byte x2 = x >>> b;
    io:println(x2); // @output 0

    byte x3 = x >>> c;
    io:println(x3); // @output 125

    byte x4 = x >>> d;
    io:println(x4); // @output 0
    byte x5 = x >>> e;
    io:println(x5); // @output 0

    byte x6 = x >>> f;
    io:println(x6); // @output 31

    byte x7 = x >>> g;
    io:println(x7); // @output 3
    byte x8 = x >>> h;
    io:println(x8); // @output 125

    int:Unsigned8 x9 = x >>> i;
    io:println(x9); // @output 7
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and builtin subtypes of
             integer as the RHS operand.
Labels: byte, decimal, float, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, unary-minus, var

function errorFunction() {
    byte x = 255;
    int:Signed8 a = 1;
    int:Signed8 b = -124;
    int:Unsigned8 c = 5;
    int:Signed16 d = 8;
    int:Signed16 e = -32765;
    int:Unsigned16 f = 3;
    int:Signed32 g = 9;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'byte'
    var x2 = x >>> b;
    decimal _ = x2; // @error expected 'decimal' but found 'byte'

    var x3 = x >>> c;
    int:Signed8 _ = x3; // @error expected 'int:Signed8' but found 'byte'

    var x4 = x >>> d;
    int:Signed8 _ = x4; // @error expected 'int:Signed8' but found 'byte'
    var x5 = x >>> e;
    float _ = x5; // @error expected 'float' but found 'byte'

    var x6 = x >>> f;
    int:Signed8 _ = x6; // @error expected 'int:Signed8' but found 'byte'

    var x7 = x >>> g;
    int:Signed8 _ = x7; // @error expected 'int:Signed8' but found 'byte'
    var x8 = x >>> h;
    decimal _ = x8; // @error expected 'decimal' but found 'byte'

    var x9 = x >>> i;
    int:Signed8 _ = x9; // @error expected 'int:Signed8' but found 'byte'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and byte as the RHS
             operand.
Labels: byte, shift-expr, var

function errorFunction() {
    byte x = 254;
    byte a = 2;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'byte'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and user-defined subtype
             of integer as the RHS operand.
Labels: byte, DecimalNumber, shift-expr, type, unary-minus, union-type

type Ints -1|2|-128;

function init() {
    byte x = 248;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    byte x1 = x >>> a;
    io:println(x1); // @output 62
    byte|float x2 = x >>> b;
    io:println(x2); // @output 0
    byte|decimal x3 = x >>> c;
    io:println(x3); // @output 248
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and user-defined subtype
             of integer as the RHS operand.
Labels: byte, DecimalNumber, float, shift-expr, type, unary-minus, var

type Ints -1|2|-128;

function errorFunction() {
    byte x = 247;
    Ints a = 2;
    Ints b = -1;
    Ints c = -128;

    var x1 = x >>> a;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'byte'
    var x2 = x >>> b;
    Ints _ = x2; // @error expected '-1|2|-128' but found 'byte'
    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'byte'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: byte, int, nil-literal, optional-type, shift-expr, unary-minus, value:toBalString()

function init() {
    byte x = 246;
    int? a = 2;
    int? b = -9223372036854775806;
    int? c = ();

    byte? x1 = x >>> a;
    io:println(x1); // @output 61
    byte? x2 = x >>> b;
    io:println(x2); // @output 61
    byte? x3 = x >>> c;
    io:println(x3.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and optional 'int' as
             the RHS operand.
Labels: byte, float, int, nil-literal, optional-type, shift-expr, unary-minus, var

function errorFunction() {
    byte x = 12;
    int? a = 2;
    int? b = -9223372036854775794;
    int? c = ();

    var x1 = x >>> a;
    byte _ = x1; // @error  expected 'byte' but found 'byte?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'byte?'

    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'byte?'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and optional builtin
             subtype of integer as the RHS operand.
Labels: byte, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, optional-type,
        shift-expr, unary-minus, union-type, value:toBalString()

function init() {
    byte x = 251;
    int:Signed8? a = 3;
    int:Signed8? b = -123;
    int:Unsigned8? c = 3;
    int:Signed16? d = 2;
    int:Signed16? e = -32758;
    int:Unsigned16? f = 5;
    int:Signed32? g = 3;
    int:Signed32? h = -2147483641;
    int:Unsigned32? i = 1;
    int:Unsigned8? j = ();
    int:Unsigned8? k = ();
    int:Signed16? l = ();
    int:Unsigned16? m = ();
    int:Signed32? n = ();
    int:Unsigned32? o = ();

    byte|() x1 = x >>> a;
    io:println(x1); // @output 31
    byte?|float x2 = x >>> b;
    io:println(x2); // @output 7

    byte? x3 = x >>> c;
    io:println(x3); // @output 31

    byte? x4 = x >>> d;
    io:println(x4); // @output 62
    byte? x5 = x >>> e;
    io:println(x5); // @output 0

    byte? x6 = x >>> f;
    io:println(x6); // @output 7

    byte? x7 = x >>> g;
    io:println(x7); // @output 31
    byte? x8 = x >>> h;
    io:println(x8); // @output 1

    byte|() x9 = x >>> i;
    io:println(x9); // @output 125

    byte|() x11 = x >>> j;
    io:println(x11.toBalString()); // @output ()
    byte|() x12 = x >>> k;
    io:println(x12.toBalString()); // @output ()
    byte|() x13 = x >>> l;
    io:println(x13.toBalString()); // @output ()
    byte|() x14 = x >>> m;
    io:println(x14.toBalString()); // @output ()
    int:Unsigned8|() x15 = x >>> n;
    io:println(x15.toBalString()); // @output ()
    int:Unsigned8|() x16 = x >>> o;
    io:println(x16.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and optional builtin
             subtypes of integer as the RHS operand.
Labels: byte, decimal, float, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned16,
        optional-type, shift-expr, unary-minus, var

function errorFunction() {
    byte a = 127;
    int:Signed8? b = 7;
    int:Signed8? c = -120;
    int:Unsigned8? d = 5;
    int:Signed16? e = 7;
    int:Signed16? f = -120;
    int:Unsigned16? g = 5;
    int:Signed32? h = 7;
    int:Signed32? i = -120;
    int:Unsigned32? j = 5;
    int:Signed8? k = ();
    int:Unsigned8? l = ();
    int:Signed16? m = ();
    int:Unsigned16? n = ();
    int:Signed32? p = ();
    int:Unsigned32? q = ();

    var x1 = a >>> b;
    int:Signed8 _ = x1; // @error expected 'int:Signed8' but found 'byte?'
    var x2 = a >>> c;
    float _ = x2; // @error expected 'float' but found 'byte?'

    var x3 = a >>> d;
    byte _ = x3; // @error expected 'byte' but found 'byte?'

    var x4 = a >>> e;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'byte?'
    var x5 = a >>> f;
    decimal _ = x5; // @error expected 'decimal' but found 'byte?'

    var x6 = a >>> g;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'byte?'

    var x7 = a >>> h;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'byte?'
    var x8 = a >>> i;
    float _ = x8; // @error expected 'float' but found 'byte?'

    var x9 = a >>> j;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'byte?'

    var x11 = a >>> k;
    int:Unsigned16 _ = x11; // @error expected 'int:Unsigned16' but found 'byte?'
    var x12 = a >>> l;
    int:Signed16 _ = x12; // @error expected 'int:Signed16' but found 'byte?'
    var x13 = a >>> m;
    int:Signed16 _ = x13; // @error expected 'int:Signed16' but found 'byte?'
    var x14 = a >>> n;
    int:Signed16 _ = x14; // @error expected 'int:Signed16' but found 'byte?'
    var x15 = a >>> p;
    int:Signed16 _ = x15; // @error expected 'int:Signed16' but found 'byte?'
    var x16 = a >>> q;
    int:Signed16 _ = x16; // @error expected 'int:Signed16' but found 'byte?'
}

Test-Case: output
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, int, byte, nil-literal, optional-type, shift-expr, value:toBalString()

function init() {
    byte x = 251;
    byte? a = 2;
    byte? b = 255;
    byte? c = ();

    byte? x1 = x >>> a;
    io:println(x1); // @output 62
    byte? x2 = x >>> b;
    io:println(x2); // @output 0

    int? x3 = x >>> c;
    io:println(x3.toBalString()); // @output ()
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with 'byte' as the LHS operand and optional byte as
             the RHS operand.
Labels: byte, float, int, byte, nil-literal, optional-type, shift-expr, var

function errorFunction() {
    byte x = 12;
    byte? a = 2;
    byte? b = 255;
    byte? c = ();

    var x1 = x >>> a;
    byte _ = x1; // @error  expected 'byte' but found 'byte?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'byte?'

    var x3 = x >>> c;
    float _ = x3; // @error expected 'float' but found 'byte?'
}

Test-Case: output
Description: Test '>>>' expression with 'byte' operands in function call and method call.
Labels: byte, function-call-expr, int, shift-expr, unary-minus, value:toBalString(), value:toString()

function init() {
    byte a = 125;
    byte b = 3;
    byte c = 12;
    byte d = 2;

    rightShiftExpr(a >>> b); // @output 15
    rightShiftExpr(a >>> d); // @output 31
    rightShiftExpr(c >>> d); // @output 3
    rightShiftExpr(c >>> b); // @output 1

    io:println((a >>> b).toString()); // @output 15
    io:println((a >>> d).toString()); // @output 31
    io:println((c >>> d).toString()); // @output 3
    io:println((c >>> b).toString()); // @output 1

    io:println((a >>> b).toBalString()); // @output 15
    io:println((a >>> d).toBalString()); // @output 31
    io:println((c >>> d).toBalString()); // @output 3
    io:println((c >>> b).toBalString()); // @output 1
}

function rightShiftExpr(byte x) {
    io:println(x);
}

Test-Case: output
Description: Test '>>>' expression with 'byte' operands as a return statement.
Labels: byte, return-stmt, shift-expr, unary-minus

function init() {
    byte a = 125;
    byte b = 3;
    byte c = 12;
    byte d = 2;

    io:println(rightShiftExpr(a, b)); // @output 15
    io:println(rightShiftExpr(a, d)); // @output 31
    io:println(rightShiftExpr(c, d)); // @output 3
    io:println(rightShiftExpr(c, b)); // @output 1
}

function rightShiftExpr(byte x, byte y) returns byte {
    return x >>> y;
}

Test-Case: output
Description: Test '>>>' expression with zero and positive user-defined subtypes of integer DecimalNumbers as operands.
Labels: DecimalNumbers, shift-expr, type

type Ints1 2147483642|5;
type Ints2 0;

function init() {
    Ints1 a = 2147483642;
    Ints1 b = 5;
    Ints2 c = 0;

    io:println(a >>> b); // @output 67108863
    io:println(a >>> c); // @output 2147483642
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and positive user-defined HexIntLiterals as operands.
Labels: HexIntLiterals, shift-expr, type

type Ints1 0x75|0x3;
type Ints2 0x0;

function init() {
    Ints1 a = 0x75;
    Ints1 b = 0x3;
    Ints2 c = 0x0;

    io:println(a >>> b); // @output 14
    io:println(a >>> c); // @output 117
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and positive user-defined IntLiterals as operands.
Labels: DecimalNumbers, HexIntLiterals, shift-expr, type

type Ints1 2147483645|2|0;
type Ints2 0x7ffffffb|0x5|0x0;

function init() {
    Ints1 a = 2147483645;
    Ints1 b = 2;
    Ints2 c = 0x7ffffffb;
    Ints2 d = 0x5;
    Ints1 e = 0;
    Ints2 f = 0x0;

    io:println(a >>> d); // @output 67108863
    io:println(c >>> b); // @output 536870910
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative user-defined DecimalNumbers as operands.
Labels: DecimalNumbers, shift-expr, unary-minus, type

type Ints1 -32757;
type Ints2 -2147483639|0;

function init() {
    Ints1 a = -32757;
    Ints2 b = -2147483639;
    Ints2 c = 0;

    io:println(a >>> b); // @output 36028797018963904
    io:println(a >>> c); // @output -32757
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative user-defined HexIntLiterals as operands.
Labels: HexIntLiterals, int, shift-expr, type, unary-minus

type Ints int;

function init() {
    Ints a = -0x7ffffffb;
    Ints b = -0x7ffffff9;
    Ints c = 0x0;

    io:println(a >>> b); // @output 144115188059078656
    io:println(a >>> c); // @output -2147483643
    io:println(c >>> b); // @output 0
    io:println(c >>> c); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with zero and negative user-defined IntLiterals as operands.
Labels: HexIntLiterals, int, shift-expr, type, unary-minus

type Ints int;

function init() {
    Ints a = -2147483640;
    Ints b = -2;
    Ints c = -0x7ffffffe;
    Ints d = -0x2;
    Ints e = 0;
    Ints f = 0x0;

    io:println(a >>> d); // @output 3
    io:println(c >>> b); // @output 3
    io:println(f >>> e); // @output 0
    io:println(e >>> f); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative user-defined DedcimalNumbers as operands.
Labels: int, shift-expr, type, unary-minus

type Ints int;

function init() {
    Ints a = -2147483637;
    Ints b = -2147483637;
    Ints c = 100;
    Ints d = 2;

    io:println(a >>> d); // @output 4611686017890516994
    io:println(c >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative user-defined HexIntLiterals as operands.
Labels: HexIntliteral, int, shift-expr, type, unary-minus

type Ints int;

function init() {
    Ints a = -0x1f;
    Ints b = -0x3;
    Ints c = 0x1f;
    Ints d = 0x1;

    io:println(a >>> d); // @output 9223372036854775792
    io:println(c >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression for positive and negative user-defined IntLiterals as operands.
Labels: DecimalNumbers, HexIntliteral, int, shift-expr, type, unary-minus

type Ints int;

function init() {
    Ints a = -111;
    Ints b = -2147483639;
    Ints c = 100;
    Ints d = 2;
    Ints e = -0x1f;
    Ints f = -0x4;
    Ints g = 0x1f;
    Ints h = 0x1;

    io:println(a >>> d); // @output 4611686018427387876
    io:println(c >>> b); // @output 0

    io:println(e >>> g); // @output 8589934591
    io:println(g >>> f); // @output 0

    io:println(a >>> h); // @output 9223372036854775752
    io:println(g >>> b); // @output 0
}

Test-Case: output
Description: Test '>>>' expression with user-defined subtypes of integer as the LHS operand and 'int' as the RHS
             operand.
Labels: DecimalNumbers, int, shift-expr, type, unary-minus

type Ints 2147483644|-2147483637;

function init() {
    Ints x = 2147483644;
    Ints y = -2147483637;
    int a = 3;
    int b = -9223372036854775804;

    io:println(x >>> a); // @output 268435455
    io:println(x >>> b); // @output 134217727

    io:println(y >>> a); // @output 2305843008945258497
    io:println(y >>> b); // @output 1152921504472629248
}

Test-Case: output
Description: Test '>>>' expression with user-defined subtypes of integer as the LHS operand and builtin subtypes of
             integer as the RHS operand.
Labels: DecimalNumbers, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32,
        shift-expr, type, unary-minus

type Ints 2147483645|-2147483644;

function init() {
    Ints x = 2147483645;
    Ints y = -2147483644;
    int:Signed8 a = 2;
    int:Signed8 b = -124;
    int:Unsigned8 c = 5;
    int:Signed16 d = 2;
    int:Signed16 e = -32765;
    int:Unsigned16 f = 3;
    int:Signed32 g = 3;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 1;

    io:println(x >>> a); // @output 536870911
    io:println(x >>> b); // @output 134217727
    io:println(y >>> a); // @output 4611686017890516993
    io:println(y >>> b); // @output 1152921504472629248

    io:println(x >>> c); // @output 67108863
    io:println(y >>> c); // @output 576460752236314624

    io:println(x >>> d); // @output 536870911
    io:println(x >>> e); // @output 268435455
    io:println(y >>> d); // @output 4611686017890516993
    io:println(y >>> e); // @output 2305843008945258496

    io:println(x >>> f); // @output 268435455
    io:println(y >>> f); // @output 2305843008945258496

    io:println(x >>> g); // @output 268435455
    io:println(x >>> h); // @output 16777215
    io:println(y >>> g); // @output 2305843008945258496
    io:println(y >>> h); // @output 144115188059078656

    io:println(x >>> i); // @output 1073741822
    io:println(y >>> i); // @output 9223372035781033986
}

Test-Case: output
Description: Test '>>>' expression for optional zero and positive user-defined subtypes of integer operands.
Labels: DecimalNumbers, int, nil-literal, optional-type, shift-expr, type, value:toBalString()

type Ints int;

function init() {
    Ints? a = 32757;
    Ints? b = 2;
    Ints? c = 0;
    Ints? d = ();
    Ints e = 5;
    Ints f = 1;

    int? x1 = a >>> b;
    io:println(x1); // @output 8189
    int? x2 = f >>> b;
    io:println(x2); // @output 0
    int? x3 = a >>> f;
    io:println(x3); // @output 16378
    int? x4 = e >>> b;
    io:println(x4); // @output 1

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()
    int? x7 = d >>> b;
    io:println(x7.toBalString()); // @output ()

    io:println(a >>> b); // @output 8189
    io:println(a >>> c); // @output 32757

    io:println(a >>> f); // @output 16378
    io:println(e >>> b); // @output 1

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
    io:println((d >>> d).toBalString()); // @output ()
}

Test-Case: output
Description: Test '>>>' expression for optional zero and negative user-defined subtypes of integer operands.
Labels: DecimalNumbers, int, nil-literal, optional-type, shift-expr, type, unary-minus, value:toBalString()

type Ints int;

function init() {
    Ints? a = -2147483642;
    Ints? b = -2147483645;
    Ints? c = 0;
    Ints? d = ();
    Ints e = -2;
    Ints f = -2147483643;

    int? x1 = a >>> b;
    io:println(x1); // @output 2305843008945258496
    int? x2 = f >>> b;
    io:println(x2); // @output 2305843008945258496
    int? x3 = a >>> f;
    io:println(x3); // @output 576460752236314624
    int? x4 = e >>> b;
    io:println(x4); // @output 2305843009213693951

    int? x5 = a >>> d;
    io:println(x5.toBalString()); // @output ()
    int? x6 = d >>> b;
    io:println(x6.toBalString()); // @output ()

    io:println(a >>> b); // @output 2305843008945258496
    io:println(a >>> c); // @output -2147483642

    io:println(a >>> f); // @output 576460752236314624
    io:println(e >>> b); // @output 2305843009213693951

    io:println((a >>> d).toBalString()); // @output ()
    io:println((d >>> b).toBalString()); // @output ()
}

Test-Case: output
Description: Test '>>>' expression for optional positive and negative user-defined subtypes of integer.
Labels: DecimalNumbers, optional-type, shift-expr, type, unary-minus

type Ints int;

function init() {
    Ints? a = 2147483637;
    Ints? b = 5;
    Ints? c = -2;
    Ints? d = -2147483643;
    Ints e = 100;
    Ints f = 7;
    Ints g = -23;
    Ints h = -2147483637;

    io:println(a >>> d); // @output 67108863
    io:println(c >>> b); // @output 576460752303423487

    io:println(a >>> h); // @output 1048575
    io:println(c >>> f); // @output 144115188075855871

    io:println(e >>> d); // @output 3
    io:println(g >>> b); // @output 576460752303423487
}

Test-Case: output
Description: Test 0x3F mask of user-defined subtypes of integer RHS operand in '>>>' expression.
Labels: DecimalNumbers, int, shift-expr, type, unary-minus

type Ints int;

function init() {
    Ints a = -1;
    Ints b = 63;
    Ints c = 64;
    Ints d = 122;
    Ints e = -65;
    Ints f = -64;

    io:println(a >>> b); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(a >>> c); // @output -1
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    //        = In decimal: (-1)

    io:println(a >>> d); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01111010, In decimal: 122
    //                After applying mask, In binary: 111010, In decimal: 58
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    //        = In decimal: (-288230376151711744)

    io:println(b >>> b); // @output 0
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111, In decimal: 63
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    //        = In decimal: (-9223372036854775808)

    io:println(b >>> c); // @output 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111111
    //        = In decimal: (63)

    io:println(a >>> e); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111, In decimal: -65
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(a >>> f); // @output -1
    // Shift amount (After apply mask): In binary - 111111, In decimal - 63
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11000000, In decimal: -64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    //        = In decimal: (-1)

    io:println(a >>> a); // @output 1
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    // Shift amount = Before applying mask, In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111, In decimal: -1
    //                After applying mask, In binary: 111111, In decimal: 63
    // Result = In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
    //        = In decimal: (1)

    io:println(e >>> c); // @output -65
    // Explanation:
    // Value to be shifted = Equivalent binary representation : 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111
    // Shift amount = Before applying mask, In binary: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000, In decimal: 64
    //                After applying mask, In binary: 000000, In decimal: 0
    // Result = In binary: 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111
    //        = In decimal: (-65)
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with user-defined subtypes of integer as the LHS operand and
             'int' as the RHS operand.
Labels: DecimalNumbers, decimal, float, int, int:Signed16, shift-expr, type, unary-minus, var

type Ints 12|-32762;

function errorFunction() {
    Ints x = 12;
    Ints y = -32762;
    int a = 7;
    int b = -12;

    var x1 = x >>> a;
    int:Signed16 _ = x1; // @error 'int:Signed16' but found 'int'
    var x2 = x >>> b;
    float _ = x2; // @error expected 'float' but found 'int'
    var x3 = y >>> a;
    decimal _ = x3; // @error expected 'decimal' but found 'int'
    var x4 = y >>> b;
    float _ = x4; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with integer as the LHS operand and builtin subtypes of integer
             as the RHS operand.
Labels: DecimalNumbers, decimal, float, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16,
        int:Unsigned32, shift-expr, type, unary-minus, var

type Ints int;

function errorFunction() {
    Ints x = 32765;
    int:Signed8 a = 7;
    int:Signed8 b = -126;
    int:Unsigned8 c = 5;
    int:Signed16 d = 8;
    int:Signed16 e = -32750;
    int:Unsigned16 f = 3;
    int:Signed32 g = 9;
    int:Signed32 h = -2147483641;
    int:Unsigned32 i = 17;

    var x1 = x >>> a;
    int:Signed16 _ = x1; // @error expected 'int:Signed16' but found 'int'
    var x2 = x >>> b;
    decimal _ = x2; // @error expected 'decimal' but found 'int'

    var x3 = x >>> c;
    int:Unsigned16 _ = x3; // @error expected 'int:Unsigned16' but found 'int'

    var x4 = x >>> d;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int'
    var x5 = x >>> e;
    float _ = x5; // @error expected 'float' but found 'int'

    var x6 = x >>> f;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int'

    var x7 = x >>> g;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int'
    var x8 = x >>> h;
    decimal _ = x8; // @error expected 'decimal' but found 'int'

    var x9 = x >>> i;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with user-defined subtypes of integer as the LHS operand and
             byte as the RHS operand.
Labels: byte, DecimalNumbers, int, int:Signed16, shift-expr, type, unary-minus, var

type Ints int;

function errorFunction() {
    Ints x = 12;
    Ints y = -7;
    byte a = 20;

    var x1 = x >>> a;
    int:Signed16 _ = x1; // @error expected 'int:Signed16' but found 'int'
    var x2 = y >>> a;
    byte _ = x2; // @error expected 'byte' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with user-defined subtypes of integer as the LHS operand and
             user-defined subtype of integer as the RHS operand.
Labels: DecimalNumbers, float, int, int:Signed16, shift-expr, type, unary-minus, var

type Ints1 int;
type Ints2 -1|2|-128;

function errorFunction() {
    Ints1 x = 80;
    Ints1 y = -100;
    Ints2 a = 2;
    Ints2 b = -1;
    Ints2 c = -128;

    var x1 = x >>> a;
    int:Signed16 _ = x1; // @error expected 'int:Signed16' but found 'int'
    var x2 = y >>> a;
    int:Signed16 _ = x2; // @error expected 'int:Signed16' but found 'int'
    var x3 = x >>> b;
    Ints2 _ = x3; // @error expected '-1|2|-128' but found 'int'
    var x4 = y >>> b;
    Ints2 _ = x4; // @error expected '-1|2|-128' but found 'int'
    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int'
    var x6 = y >>> c;
    float _ = x6; // @error expected 'float' but found 'int'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with user-defined subtypes of integer as the LHS operand and
             optional integer as the RHS operand.
Labels: DecimalNumbers, float, int, int:Signed16, nil-literal, optional-type, shift-expr, unary-minus

type Ints 12|-12;

function errorFunction() {
    Ints x = 12;
    Ints y = -12;
    int? a = 2;
    int? b = -9223372036854775794;
    int? c = ();

    var x1 = x >>> a;
    int:Signed16 _ = x1; // @error  expected 'int:Signed16' but found 'int?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int?'
    var x3 = y >>> a;
    int:Signed16 _ = x3; // @error  expected 'int:Signed16' but found 'int?'
    var x4 = y >>> b;
    int _ = x4; // @error expected 'int' but found 'int?'

    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int?'
    var x6 = y >>> c;
    float _ = x6; // @error expected 'float' but found 'int?'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with integer as the LHS operand and optional builtin subtypes
             of integer as the RHS operand.
Labels: DecimalNumbers, decimal, float, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16,
        int:Unsigned32, shift-expr, type, unary-minus

type Ints int;

function errorFunction() {
    Ints a = 32767;
    int:Signed8? b = 7;
    int:Signed8? c = -32;
    int:Unsigned8? d = 5;
    int:Signed16? e = 7;
    int:Signed16? f = -120;
    int:Unsigned16? g = 5;
    int:Signed32? h = 7;
    int:Signed32? i = -120;
    int:Unsigned32? j = 5;
    int:Signed8? k = ();
    int:Unsigned8? l = ();
    int:Signed16? m = ();
    int:Unsigned16? n = ();
    int:Signed32? p = ();
    int:Unsigned32? q = ();

    var x1 = a >>> b;
    int:Signed16 _ = x1; // @error expected 'int:Signed16' but found 'int?'
    var x2 = a >>> c;
    float _ = x2; // @error expected 'float' but found 'int?'

    var x3 = a >>> d;
    int:Unsigned16 _ = x3; // @error expected 'int:Unsigned16' but found 'int?'

    var x4 = a >>> e;
    int:Signed16 _ = x4; // @error expected 'int:Signed16' but found 'int?'
    var x5 = a >>> f;
    decimal _ = x5; // @error expected 'decimal' but found 'int?'

    var x6 = a >>> g;
    int:Unsigned16 _ = x6; // @error expected 'int:Unsigned16' but found 'int?'

    var x7 = a >>> h;
    int:Signed32 _ = x7; // @error expected 'int:Signed32' but found 'int?'
    var x8 = a >>> i;
    float _ = x8; // @error expected 'float' but found 'int?'

    var x9 = a >>> j;
    int:Unsigned32 _ = x9; // @error expected 'int:Unsigned32' but found 'int?'

    var x11 = a >>> k;
    int:Signed16 _ = x11; // @error expected 'int:Signed16' but found 'int?'
    var x12 = a >>> l;
    int:Signed16 _ = x12; // @error expected 'int:Signed16' but found 'int?'
    var x13 = a >>> m;
    int:Signed16 _ = x13; // @error expected 'int:Signed16' but found 'int?'
    var x14 = a >>> n;
    int:Signed8 _ = x14; // @error expected 'int:Signed8' but found 'int?'
    var x15 = a >>> p;
    int:Signed8 _ = x15; // @error expected 'int:Signed8' but found 'int?'
    var x16 = a >>> q;
    int:Signed8 _ = x16; // @error expected 'int:Signed8' but found 'int?'
}

Test-Case: error
Description: Test resultant type of the '>>>' expression with user-defined subtypes of integer as the LHS operand and
             optional byte as the RHS operand.
Labels: byte, DecimalNumbers, float, int, int:Signed16, nil-literal, optional-type, shift-expr, type, unary-minus, var

type Ints 12|-22;

function errorFunction() {
    Ints x = 12;
    Ints y = -22;
    byte? a = 2;
    byte? b = 255;
    byte? c = ();

    var x1 = x >>> a;
    int:Signed16 _ = x1; // @error  expected 'int:Signed16' but found 'int?'
    var x2 = x >>> b;
    int _ = x2; // @error expected 'int' but found 'int?'
    var x3 = y >>> a;
    int:Signed16 _ = x3; // @error  expected 'int:Signed16' but found 'int?'
    var x4 = y >>> b;
    int _ = x4; // @error expected 'int' but found 'int?'

    var x5 = x >>> c;
    float _ = x5; // @error expected 'float' but found 'int?'
    var x6 = y >>> c;
    float _ = x6; // @error expected 'float' but found 'int?'
}

Test-Case: output
Description: Test '>>>' expression with user-defined subtypes of integer operands in function call and method call.
Labels: DecimalNumbers, function-call-expr, shift-expr, type, unary-minus, value:toBalString(), value:toString()

type Ints1 -2147483640|-2147483637;
type Ints2 12|0|2;

function init() {
    Ints1 a = -2147483640;
    Ints1 b = -2147483637;
    Ints2 c = 12;
    Ints2 d = 2;

    rightShiftExpr(a >>> b); // @output 9007199253692416
    rightShiftExpr(a >>> d); // @output 4611686017890516994
    rightShiftExpr(c >>> d); // @output 3
    rightShiftExpr(c >>> b); // @output 0

    io:println((a >>> b).toString()); // @output 9007199253692416
    io:println((a >>> d).toString()); // @output 4611686017890516994
    io:println((c >>> d).toString()); // @output 3
    io:println((c >>> b).toString()); // @output 0

    io:println((a >>> b).toBalString()); // @output 9007199253692416
    io:println((a >>> d).toBalString()); // @output 4611686017890516994
    io:println((c >>> d).toBalString()); // @output 3
    io:println((c >>> b).toBalString()); // @output 0
}

function rightShiftExpr(int x) {
    io:println(x);
}

Test-Case: output
Description: Test '>>>' expression with user-defined subtypes of integer operands as a return statement.
Labels: DecimalNumbers, int, return-stmt, shift-expr, type, unary-minus

type Ints1 -122|-123;
type Ints2 12|0|2;

function init() {
    Ints1 a = -122;
    Ints1 b = -123;
    Ints2 c = 12;
    Ints2 d = 2;

    io:println(rightShiftExpr(a, b)); // @output 576460752303423484
    io:println(rightShiftExpr(a, d)); // @output 4611686018427387873
    io:println(rightShiftExpr(c, d)); // @output 3
    io:println(rightShiftExpr(c, b)); // @output 0
}

function rightShiftExpr(int x, int y) returns int {
    return x >>> y;
}

Test-Case: output
Description: Test the '>>>' expression with module level basic types as the operands.
Labels: byte, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, shift-expr,
        unary-minus

int i1 = 1221112;
int i2 = -1212321321;
int i3 = 3;
int i4 = -9223372036854775807;

int:Signed8 s1 = 7;
int:Signed8 s2 = -120;
int:Unsigned8 s3 = 5;
int:Signed16 s4 = 8;
int:Signed16 s5 = -32750;
int:Unsigned16 s6 = 3;
int:Signed32 s7 = 9;
int:Signed32 s8 = -2147483641;
int:Unsigned32 s9 = 17;

byte b1 = 255;
byte b2 = 4;

function init() {
    io:println(i1 >>> i4); // @output 610556
    io:println(i2 >>> i3); // @output 2305843009062153786
    io:println(i1 >>> i1); // @output 0
    io:println(i2 >>> i4); // @output 9223372036248615147

    io:println(s1 >>> s3); // @output 0
    io:println(s2 >>> s3); // @output 576460752303423484

    io:println(s4 >>> s6); // @output 1
    io:println(s5 >>> s6); // @output 2305843009213689858

    io:println(s7 >>> s9); // @output 0
    io:println(s8 >>> s9); // @output 140737488338944

    io:println(s1 >>> s6); // @output 0
    io:println(s5 >>> s3); // @output 576460752303422464
    io:println(s2 >>> s9); // @output 140737488355327
    io:println(s8 >>> s3); // @output 576460752236314624

    io:println(s4 >>> s7); // @output 0
    io:println(s8 >>> s6); // @output 2305843008945258496

    io:println(b1 >>> b2); // @output 15
    io:println(s2 >>> s3); // @output 576460752303423484

    io:println(s2 >>> b2); // @output 1152921504606846968
    io:println(s5 >>> b2); // @output 1152921504606844929
    io:println(s8 >>> b2); // @output 1152921504472629248
    io:println(b1 >>> s3); // @output 7
    io:println(b1 >>> s6); // @output 31
    io:println(b1 >>> s9); // @output 0
    io:println(i1 >>> b2); // @output 76319
    io:println(b1 >>> i3); // @output 31

    io:println(s1 >>> i3); // @output 0
    io:println(i2 >>> s3); // @output 576460752265538446
    io:println(s4 >>> i3); // @output 1
    io:println(i2 >>> s6); // @output 2305843009062153786
    io:println(s7 >>> i3); // @output 1
    io:println(i2 >>> s9); // @output 140737488346078
}

Test-Case: output
Description: Test the '>>>' expression with module level optional basic types as the operands.
Labels: byte, int, int:Signed8, int:Signed32, int:Unsigned8, nil-literal, optional-type, shift-expr, unary-minus,
        value:toBalString

int i1 = -1;
int? i2 = 7;
int? i3 = ();

int:Unsigned8 s1 = 255;
int:Signed16? s2 = 2;
int:Unsigned32? s3 = ();

byte? b1 = 2;
byte? b2 = ();

function init() {
    io:println(i2 >>> i1); // @output 0
    io:println(s1 >>> i2); // @output 1
    io:println(i2 >>> s2); // @output 1
    io:println(s2 >>> b1); // @output 0
    io:println(b1 >>> i2); // @output 0

    io:println((i3 >>> s1).toBalString()); // @output ()
    io:println((s2 >>> s3).toBalString()); // @output ()
    io:println((b2 >>> i2).toBalString()); // @output ()
    io:println((s3 >>> i3).toBalString()); // @output ()
    io:println((i3 >>> b2).toBalString()); // @output ()
}

Test-Case: output
Description: Test the '>>>' expression at module level.
Labels: byte, DecimalNumber, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16,
        int:Unsigned32, shift-expr, unary-minus

int i1 = 1221112;
int i2 = 3;

int:Signed8 s1 = 120;
int:Unsigned8 s2 = 5;
int:Signed16 s3 = -8;
int:Unsigned16 s4 = 3;
int:Signed32 s5 = -9;
int:Unsigned32 s6 = 17;

byte b1 = 255;
byte b2 = 4;

int r1 = i1 >>> i2;

int r2 = s1 >>> s2;
int r3 = s3 >>> s4;
int r4 = s5 >>> s6;
int r5 = i1 >>> s1;
int r6 = s6 >>> i2;

int r7 = b1 >>> b2;
int r8 = b1 >>> i2;
int r9 = i1 >>> b2;
int r10 = s1 >>> b2;
int r11 = b1 >>> s4;

int r12 = 12331321 >>> 3;

function init() {
    io:println(r1); // @output 152639
    io:println(r2); // @output 3
    io:println(r3); // @output 2305843009213693951
    io:println(r4); // @output 140737488355327
    io:println(r5); // @output 0
    io:println(r6); // @output 2
    io:println(r7); // @output 15
    io:println(r8); // @output 31
    io:println(r9); // @output 76319
    io:println(r10); // @output 7
    io:println(r11); // @output 31
    io:println(r12); // @output 1541415
}

Test-Case: output
Description: Test '>>>' expression with field access as operands.
Labels: DecimalNumber, int, mapping-constructor, module-type-defn, record-type, shift-expr, unary-minus

function init() {
    Record a = {x: 12};
    Record b = {x: -2132};

    int c = b.x >>> 1;
    io:println(c); // @output 9223372036854774742
    int d = 4000000 >>> a.x;
    io:println(d); // @output 976
}

type Record record {
    int x;
};

Test-Case: output
Description: Test '>>>' expression with member access as operands.
Labels: array-type, DecimalNumber, int, list-constructor, shift-expr

function init() {
    int[] b = [3, 40];

    int c = 10 >>> b[0];
    io:println(c); // @output 1
    int d = b[1] >>> 3;
    io:println(d); // @output 5
}

Test-Case: output
Description: Test '>>>' expression with function call as operands.
Labels: DecimalNumber, function-call-expr, int, shift-expr

function init() {
    int b = 10 >>> getInt();
    io:println(b); // @output 2
    int c = getInt() >>> 1;
    io:println(c); // @output 1
}

function getInt() returns int {
    return 2;
}

Test-Case: output
Description: Test '>>>' expression with method call as operands.
Labels: DecimalNumber, explicit-new-expr, int, method-call-expr, module-class-defn, shift-expr, unary-minus

function init() {
    Class a = new Class();

    int b = a.getInt2() >>> 2;
    io:println(b); // @output 4611686018427357101
    int c = 12132 >>> a.getInt1();
    io:println(c); // @output 11
}

class Class {
    function getInt1() returns int {
        return 10;
    }

    function getInt2() returns int {
        return -123211;
    }
}

Test-Case: output
Description: Test let expression in integer '>>>' expression operands.
Labels: int, let-expr, shift-expr

function init() {
    int a = (let int h1 = 300 >>> 2 in h1) >>> 5;
    io:println(a); // @output 2
    int b = 5 >>> (let int h1 = 3 >>> 2 in h1);
    io:println(b); // @output 5
}

Test-Case: output
Description: Test type cast expression in integer '>>>' expression operands.
Labels: DecimalFloatingPointNumber, DecimalTypeSuffix, FloatingPointTypeSuffix, int, shift-expr, type-cast-expr

function init() {
    int a = <int> 6.0 >>> <int> 2d;
    io:println(a); // @output 1
}

Test-Case: output
Description: Test unary expressions in integer '>>>' expression operands.
Labels: int, shift-expr, unary-plus, unary-minus, unary-complement

function init() {
    int a = +40 >>> -3;
    io:println(a); // @output 0

    int b = +40 >>> +3;
    io:println(b); // @output 5

    int c = -(-200 >>> 5);
    io:println(c); // @output -576460752303423481

    int d = ~(200 >>> 5);
    io:println(d); // @output -7

    int e = ~200 >>> 5;
    io:println(e); // @output 576460752303423481
}

Test-Case: output
Description: Test '>>>' expression with multiplicative expressions operands.
Labels: multiplicative-expr, int, shift-expr

function init() {
    int a = 2 * 2 >>> 404 % 10 / 4;
    io:println(a); // @output 2
}

Test-Case: output
Description: Test additive expressions as integer '>>>' expression operands.
Labels: additive-expr, int, shift-expr

function init() {
    int a = (1 + 200) >>> (3 + 4);
    io:println(a); // @output 1
}

Test-Case: output
Description: Test shift expressions as integer '>>>' expression operands.
Labels: int, shift-expr

function init() {
    int a = (100 >>> 2) >>> (100 >>> 5);
    io:println(a); // @output 3
}

Test-Case: output
Description: Test binary bitwise expressions as integer '>>>' expression operands.
Labels: binary-bitwise-expr, int, shift-expr

function init() {
    int a = (255 & 511) >>> (2 ^ 6);
    io:println(a); // @output 15
}

Test-Case: output
Description: Test conditional expressions as integer '>>>' expression operands.
Labels: conditional-expr, DecimalNumber, error, int, nil-literal, optional-type, shift-expr, union-type

function init() {
    int|error a = 10;
    int? b = ();
    int c = (a is error ? 200 : a) >>> (b ?: 1);
    io:println(c); // @output 5
    int d = (b ?: 10000) >>> (a is error ? 2 : a);
    io:println(d); // @output 9
}

Test-Case: output
Description: Test checking expressions as integer '>>>' expression operands.
Labels: checking-expr, error, int, shift-expr, union-type

function init() returns error? {
    int|error x = 12;
    int|error y = 1;
    int b = check x >>> checkpanic y;
    io:println(b); // @output 6

    int c = checkpanic x >>> check y;
    io:println(c); // @output 6
}

Test-Case: output
Description: Test valid '>>>' expression.
Labels: int, shift-expr, unary-minus

function init() {
    int a = 12>>>2;
    io:println(a); // @output 3
    int b = -12>>>-2;
    io:println(b); // @output 3
    int c = 12  >>>  2;
    io:println(c); // @output 3
    int d = 32 >>>
    1;
    io:println(d); // @output 16
    int e = 32
    >>> 2;
    io:println(e); // @output 8
}

Test-Case: parser-error
Description: Test invalid '>>>' expression.
Labels: int, shift-expr

function errorFunction() {
    int _ = 32 > >> 1; // @error undefined operator '> >>'
    int _ = 32 >> > 1; // @error undefined operator '>> >'
    int _ = 32 >>>; // @error missing right operand
    int _ = >>> 1; // @error missing left operand
}

Test-Case: error
Description: Test '>>>' expression with invalid operands.
Labels: DecimalNumber, FloatingPointTypeSuffix, HexIntLiteral, int, list-constructor-expr, shift-expr, unary-minus

function errorFunction() {
    int _ = 12 >>> -2.0; // @error operator '>>>' not defined for 'int' and 'float'
    int _ = 32 >>> 1d; // @error operator '>>>' not defined for 'int' and 'decimal'
    int _ = 32 >>> 1f; // @error operator '>>>' not defined for 'int' and 'float'
    int _ = 32.0 >>> 11; // @error operator '>>>' not defined for 'float' and 'int'
    int _ = 32f >>> 11f; // @error operator '>>>' not defined for 'float' and 'float'
    int _ = 32d >>> 11; // @error operator '>>>' not defined for 'decimal' and 'float'

    int _ = 12 >>> "1"; // @error operator '>>>' not defined for 'int' and 'string'
    int _ = "3" >>> 3; // @error operator '>>>' not defined for 'string' and 'int'
    int _ = [3] >>> [5]; // @error operator '>>>' not defined for '[int]' and '[int]'

    int _ = 1219223372036854775807 >>> 212; // @error '1219223372036854775807' is too large
    int _ = 21 >>> 121922337203685477580712312321321; // @error '121922337203685477580712312321321' is too large

    int _ = 0xaaba112abffea12123897891a >>> 212; // @error '0xaaba112abffea12123897891a' is too large
    int _ = 2312321 >>> 0xaaba112abf99fea121231a789; // @error '0xaaba112abf99fea121231a789' is too large
}
