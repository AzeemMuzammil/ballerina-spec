<table>
<tr>
<th>Type descriptor</th>
<th>Filler value</th>
<th>Condition</th>
</tr>
<tr>
<td><code>()</code></td>
<td><code>()</code></td>
<td></td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>false</code></td>
<td></td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>0</code></td>
<td></td>
</tr>
<tr>
<td><code>float</code></td>
<td><code>+0.0f</code></td>
<td></td>
</tr>
<tr>
<td><code>decimal</code></td>
<td><code>+0.0d</code></td>
<td></td>
</tr>
<tr>
<td><code>string</code></td>
<td><code>""</code></td>
<td></td>
</tr>
<tr>
<td><code>T[]</code></td>
<td><code>[]</code></td>
<td></td>
</tr>
<tr>
<td><code>map&lt;T&gt;</code></td>
<td><code>{ }</code></td>
<td></td>
</tr>
<tr>
<td>record type</td>
<td><code>{ }</code></td>
<td>if that is a valid constructor for the type, i.e. if all fields
are optional or have a default</td>
</tr>
<tr>
<td>table</td>
<td>empty table (with no rows)</td>
<td></td>
</tr>
<tr>
<td>object</td>
<td><code>new T()</code></td>
<td>if this is valid, where <code>T</code> is the object type descriptor</td>
</tr>
<tr>
<td><code>xml</code></td>
<td><code>xml``</code></td>
<td></td>
</tr>
<tr>
<td><code>stream&lt;T&gt;</code></td>
<td><code>new stream&lt;T&gt;</code></td>
<td></td>
</tr>
<tr>
<td>singleton</td>
<td>the single value used to specify the type</td>
<td></td>
</tr>
<tr>
<td rowspan="2">union</td>
<td><code>()</code></td>
<td>if <code>()</code> is a member of the union</td>
</tr>
<tr>
<td>the filler value for basic type B</td>
<td>if all members of the union belong to a single basic type B,
and the filler value for B also belongs to the union</td>
</tr>
<tr>
<td><code>T?</code></td>
<td><code>()</code></td>
<td></td>
</tr>
<tr>
<td><code>any</code></td>
<td><code>()</code></td>
<td></td>
</tr>
<tr>
<td><code>anydata</code></td>
<td><code>()</code></td>
<td></td>
</tr>
<tr>
<td><code>byte</code></td>
<td><code>0</code></td>
<td></td>
</tr>
<tr>
<td><code></code></td>
<td><code>()</code></td>
<td></td>
</tr>
</table>
